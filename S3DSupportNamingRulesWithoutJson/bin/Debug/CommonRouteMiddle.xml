<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CommonRouteMiddle</name>
    </assembly>
    <members>
        <member name="T:Ingr.SP3D.Route.Middle.PipeInstrument">
            <summary>
            PipeInstrument is the .NET wrapper class for PipeInstrument object.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.RoutePart">
            <summary>
            Abstract class upon which RoutePart class wrappers are built.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RoutePart.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the RoutePart base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RoutePart.#ctor">
            <summary>
            Public constructor for the RouteFeature base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RoutePart.Finalize">
            <summary>
            Destructor for the RoutePart base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RoutePart.IsF2ClosertoXYZThanF1(Ingr.SP3D.Route.Middle.RouteFeature,Ingr.SP3D.Route.Middle.RouteFeature)">
            <summary>
            Private function to compare two Features based on Location.
            </summary>
            <param name="oFeat1">Feature1 to be compared</param>
            <param name="oFeat2">Feature2 to be compared</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RoutePart.GetConnectablePorts(Ingr.SP3D.Common.Middle.PortType)">
             <summary>
             Returns free ports of given type for this part.
             </summary>
             <param name="eType">Port type.</param>
             <returns>
             Read-only collection of free ports of given type on this component.
             </returns>
             <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected exception.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid port type.</exception>        
            <example>This example explains how to call GetConnectablePorts method.
            <code>
             'Define pipe component. 
             Dim oPipeComp As PipeComponent = Nothing 
             'Define read only collection of IPort. 
             Dim oFreePortsCol As ReadOnlyCollection(Of IPort) = Nothing 
             'Call GetConnectablePorts method to get free ports of this component. 
             oFreePortsCol = oPipeComp.GetConnectablePorts(PortType.Piping) 
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RoutePart.GetConnectedPorts(Ingr.SP3D.Common.Middle.PortType)">
            <summary>
            Returns connected ports of the given type on this part.
            </summary>
            <param name="eType">Port type.</param>
            <returns>
            Read-only collection of connected ports of given type on this part.
            </returns>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid port type.</exception>
            <example>This example explains how to call GetConnectedPorts method.
            <code>
            'Define conduit component. 
            Dim oConduitComp As ConduitComponent = Nothing 
            'Define read only collection of IPort. 
            Dim oPortsCol As ReadOnlyCollection(Of IPort) = Nothing 
            'Call GetConnectedPorts method to get all ports of this component. 
            oPortsCol = oConduitComp.GetPorts(PortType.Conduit) 
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RoutePart.GetPorts(Ingr.SP3D.Common.Middle.PortType)">
            <summary>
            Returns all ports of a given type on this part.
            </summary>
            <param name="eType">Port type.</param>
            <returns>
            Collection of all ports of given type on this part.
            </returns>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid port type.</exception>
            <example>This example explains how to call GetPorts method.
            <code>
            'Define cable tray component. 
            Dim oCTComp As CableTrayComponent = Nothing 
            'Define read-only collection of IPort. 
            Dim oPortsCol As ReadOnlyCollection(Of IPort) = Nothing 
            'Call GetPorts method to get all ports of this component. 
            oPortsCol = oCTComp.GetPorts(PortType.Cabletray) </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RoutePart.IsConnectedTo(Ingr.SP3D.Common.Middle.IConnectable,System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.IConnection}@)">
            <summary>
            This method was not implemented. 
            </summary> 
            <compilewhen>internal</compilewhen>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RoutePart.GetConnectedObjects">
            <summary>
            Gets the connected objects.
            This method was not implemented.
            </summary>
            <returns>Read-only collection of the connected objects.</returns>
            <compilewhen>not implemented</compilewhen>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RoutePart.GetConnectedObjects(System.Type)">
            <summary>
            Gets the connected objects of specific object type.
            This method was not implemented.
            </summary>
            <param name="connectedObjectType">Type of the connected object.</param>
            <returns>Read-only collection of specific object type of the connected objects.</returns>
            <compilewhen>not implemented</compilewhen>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RoutePart.GetWBSHierarchyHelper">
            <summary>
            Gets the WBS hierarchy helper.
            </summary>
            <returns>WBSHierarchyHelper</returns>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RoutePart.SetUserDefinedName(System.String)">
             <summary>
             Sets the name of an item.
             </summary>
             <param name="Name">The new name string.</param>
            <example>This example explains how to set the name.
            <code>
             'Define RoutePart. 
             Dim oRoutePart As RoutePart = Nothing
             oRoutePart.SetUserDefinedName("RoutePart-01")
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RoutePart.GetNamedItemHelper">
            <summary>
            Private utility method to get and manage the named item helper object.
            </summary>
            <returns>m_oNamedItemHelper - Occurrence of the named item helper object.</returns>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RoutePart.GetAssemblyChildHelper">
            <summary>
            Gets the assembly child helper instance.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.RoutePart.IsBasePart">
            <summary>
            Gets or sets whether the current part is the base part. If not, use the set property to make it a base part.
            Note that this should not be used to convert a base part to a mating part.
            </summary>
            <returns>Boolean; True if it is a base part, else False.</returns>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteCannotConvertBasePartToMatingPart">Cannot convert a base part to a mating part.</exception>
            <example>This example explains how to know whether the part is base part or not.
            <code>
            'Define route part.
            Dim oPart As RoutePart = Nothing
            'Define boolean.
            Dim bIsBasePart as Boolean
            'Use IsBasePart on part to know whether it's a base part or not.
            bIsBasePart = oPart.IsBasePart
            </code>
            </example>  
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.RoutePart.Features">
            <summary>
            Gets the features from the base part.
            </summary>
            <returns>ReadOnlyCollection of RouteFeature objects. </returns>
            <example>This example explains how to get features from a part.
            <code>
            'Define route part.
            Dim oPart As RoutePart = Nothing
            'Define boolean.
            Dim oFeatCollection As ReadOnlyCollection(Of RouteFeature) = Nothing
            'Use Features on part to know get the features on part.
            oFeatCollection = oPart.Features
            </code>
            </example> 
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.RoutePart.Range">
            <summary>
            Gets or sets the range of the route part.
            </summary>
            <returns>Range box implying the range of the current object.</returns>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.RoutePart.WBSItemParents">
            <summary>
            Returns the collection of WBS parents.
            </summary>
            <example>This example explains how to get WBSItemParents of a Route Part.
            <code>
            'Get the part. 
            Dim oPart As PipeComponent = Nothing  'This can be a Duct/Cableway/Conduit component.
            'Get WBSItemParents from the run. 
            Dim oWBSParentsCollection As ReadOnlyCollection(Of IWBSItem) = oPart.WBSItemParents 
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.RoutePart.WBSProjects">
            <summary>
            Returns the collection of WBS projects.
            </summary>
            <example>This example explains how to get WBSProjects of a Route Part.
            <code>
            'Get the part. 
            Dim oPart As PipeComponent = Nothing  'This can be a Duct/Cableway/Conduit component.
            'Get WBSProjects from the run. 
            Dim oWBSProjectsCollection As ReadOnlyCollection(Of IWBSProject) = oPart.WBSProjects
            </code>
            </example> 
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.RoutePart.Name">
             <summary>
             Gets the read-only name.
             </summary>
            <example>This example explains how to get the name.
            <code>
             'Define RoutePart. 
             Dim oRoutePart As RoutePart = Nothing
             Dim sName As String
             sName = oRoutePart.Name
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.RoutePart.AssemblyParent">
            <summary>
            Gets or Sets Assembly parent to the Route Part.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeInstrument.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the PipeInstrument base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeInstrument.#ctor">
            <summary>
            Public constructor for the PipeInstrument base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeInstrument.Finalize">
            <summary>
            Destructor for the PipeInstrument base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeInstrument.GetNameRuleHelper">
            <summary>
            Private utility method to get and manage the name rule helper object.
            </summary>
            <returns>m_oSystemChildHelper - Occurrence to the name rule helper object.</returns>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeInstrument.ActiveNameRule">
             <summary>
             Gets or sets the active name rule assigned to a PipeInstrument.
             </summary>
             <returns>Active name rule as Ingr.SP3D.Common.Middle.BusinessObject.</returns>
             <exception cref="T:System.InvalidOperationException">The base object does not support this operation.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidObjectTypeException">The object is not a name rule object.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoAccessException">The user does not have access to read or modify the object.</exception>
            <example>This example explains how to get or set the active name rule.
            <code>
             'Define PipeInstrument. 
             Dim oPipeInstrument As PipeInstrument = Nothing
             Dim oActiveNameRule As BusinessObject
             'Get the active name rule. 
             oActiveNameRule = oPipeInstrument.ActiveNameRule 
             ' Set the active name rule. 
             oPipeInstrument.ActiveNameRule = oActiveNameRule 
            </code>
            </example>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.Services.RouteCrossSection">
            <summary>
            Route cross section class for getting or setting cross section attributes.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.Services.RouteCrossSection.Depth">
            <summary>
            Gets or sets the cross section depth.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.Services.RouteCrossSection.Width">
            <summary>
            Gets or sets the cross section width.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.Services.RouteCrossSection.Diameter">
            <summary>
            Gets or sets the cross section diameter.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.Services.RouteCrossSection.CornerRadius">
            <summary>
            Gets or sets the corner radius.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.Services.RouteCrossSection.CrossSectionShape">
            <summary>
            Gets or sets the cross section shape.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.DuctStockPart">
            <summary>
            DuctStockPart is the .NET wrapper class for Duct part occurrence objects.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.IStockPart">
            <summary>
            Properties and methods common to all stock parts. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.IStockPart.StockPartLength">
            <summary>
            Gets or sets the StockPartLength property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.IStockPart.StockPartCutLength">
            <summary>
            Gets or sets the StockPartCutLength property. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctStockPart.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the DuctStockPart base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctStockPart.#ctor">
            <summary>
            Internal constructor for the DuctStockPart base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctStockPart.Finalize">
            <summary>
            Destructor for the DuctStockPart base class.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctStockPart.StockPartLength">
            <summary>
            Get the StockPartLength property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctStockPart.StockPartCutLength">
            <summary>
            Get the StockPartCutLength property. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.TransitionFeature">
            <summary>
            Base class for all transition features.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.RouteFeature">
            <summary>
            Abstract class upon which the route Feature class wrappers are built.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.IRoutePathFeature">
            <summary>
            Properties and methods common to all path features.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.IRoutePathFeature.Location">
            <summary>
            Gets or sets the location.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteFeature.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the RouteFeature base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteFeature.#ctor">
            <summary>
            Public constructor for the RouteFeature base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteFeature.Finalize">
            <summary>
            Destructor for the RouteFeature base class
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteFeature.GetSystemChildHelper">
            <summary>
            Private utility method to get and manage the system child helper object.
            </summary>
            <returns>m_oSystemChildHelper - Occurrence to the system child helper object.</returns>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteFeature.GetWBSHierarchyHelper">
            <summary>
            Gets the WBS hierarchy helper.
            </summary>
            <returns>WBSHierarchyHelper</returns>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.RouteFeature.Location">
            <summary>
            Gets or sets the location property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.RouteFeature.Range">
            <summary>
            Gets the read-only range box of the feature.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.RouteFeature.Parts">
            <summary>
            Gets the collecton of parts of a feature.
            </summary>
            <example>This example shows how to get parts from run.
            <code>
            'Get the feature.
            Dim oRouteFeature As RouteFeature = Nothing
            'Define ReadOnlyCollection of routepart
            Dim oParts As ReadOnlyCollection(Of RoutePart) = Nothing        
            'Using Parts property, get the collection of parts on Feature.
            oParts = oRouteFeature.Parts
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.RouteFeature.StartLocation">
            <summary>
            Gets the read-only start location of the route feature.
            </summary>
            <example >This example shows how to get the start location of the route feature.
            <code>
            'Get the route feature.
            Dim oRouteFeature As RouteFeature = Nothing ' Get required route feature from a run.
            'Get the start location of the route feature.
            Dim oStartLoc As Position
            oStartLoc = oRouteFeature.StartLocation
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.RouteFeature.EndLocation">
            <summary>
            Gets the read-only end location of the route feature.
            </summary>
            <example >This example shows how to get the end location of the route feature.
            <code>
            'Get the route feature
            Dim oRouteFeature As RouteFeature = Nothing ' Get required route feature from a run.
            'Get the end location of the route feature.
            Dim oEndLoc As Position
            oEndLoc = oRouteFeature.EndLocation
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.RouteFeature.PathFeatureFunction">
            <summary>
            Gets the PathFeatureFunction property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.RouteFeature.SystemParent">
            <summary>
            Implementation of ISystemChild:System parent property.  Uses the
            system helper of CommonMiddle.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.RouteFeature.WBSItemParents">
            <summary>
            Returns the collection of WBS parents.
            </summary>
            <example>This example explains how to get WBSItemParents of a Route feature.
            <code>
            'Get the Feature 
            Dim oFeature As PipeEndFeature = Nothing 'this can be any Route feature.
            'Get WBSItemParents from Feature. 
            Dim oWBSParentsCollection As ReadOnlyCollection(Of IWBSItem) = oFeature.WBSItemParents 
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.RouteFeature.WBSProjects">
            <summary>
            Returns the collection of WBS projects.
            </summary>
            <example>This example explains how to get WBSProjects of a Route feature.
            <code>
            'Get the Feature 
            Dim oFeature As PipeEndFeature = Nothing 'this can be any Route feature.
            'Get WBSProjects from Feature. 
            Dim oWBSProjectsCollection As ReadOnlyCollection(Of IWBSProject) = oFeature.WBSProjects 
            </code>
            </example> 
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.TransitionFeature.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constuctor which takes private business object as input.
            </summary>
            <param name="oPBO">Private business object.</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.TransitionFeature.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.TransitionFeature.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.TransitionFeature.TangentAtPoint(Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Not implemented.
            </summary>
            <param name="pos">Position</param>
            <returns></returns>
            <compilewhen>internal</compilewhen>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.TransitionFeature.ProjectPoint(Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Not implemented.
            </summary>
            <param name="pos">Position</param>
            <returns></returns>
            <compilewhen>internal</compilewhen>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.TransitionFeature.ProjectPoint(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Not implemented.
            </summary>
            <param name="pos">Position</param>
            <param name="vecProj">Vector</param>
            <returns></returns>
            <compilewhen>internal</compilewhen>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.TransitionFeature.PointAtDistanceAlong(System.Double)">
            <summary>
            Not implemented.
            </summary>
            <param name="dist">Distance</param>
            <returns></returns>
            <compilewhen>internal</compilewhen>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.TransitionFeature.PointAtDistanceAlong(Ingr.SP3D.Common.Middle.Position,System.Double)">
            <summary>
            Not implemented.
            </summary>
            <param name="posStart">Position</param>
            <param name="dist">Distance</param>
            <returns></returns>
            <compilewhen>internal</compilewhen>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.TransitionFeature.ScopeNormal(Ingr.SP3D.Common.Middle.CurveScopeType@,Ingr.SP3D.Common.Middle.Vector@)">
            <summary>
            Finds the planarity and the normal for this curve.
            </summary>
            <param name="eScope">Enumerator which shows the planarity of the curve.</param>
            <param name="vecNormal">The normal vector of the curve.</param>
            <remarks>
            <list type="table">
               <listheader>
                   <term>CurveScopeType</term>
                   <description>Description</description>
               </listheader>
               <item>
                   <term>Unknown = 0</term>
                   <description>No normal returned.</description>
               </item>
               <item>
                   <term>Planar = 1</term>
                   <description>Normal returned, if curve is closed; then this is an oriented normal.</description>
               </item>
               <item>
                   <term>Colinear = 2</term>
                   <description>A normal returned.</description>
               </item>
               <item>
                   <term>Degenerate = 3</term>
                   <description>No normal returned.</description>
               </item>
               <item>
                   <term>NonPlanar = 4</term>
                   <description>Least squares normal returned.</description>
               </item>
            </list>
            </remarks>
            <example>This example explains how to call the ScopeNormal method.
            <code>
            'Define Transistion feature.
            Dim oTransFeat As TransitionFeature = Nothing
            'Define curve scope type.
            Dim eCurveScopeTye As CurveScopeType
            'Define normal vector.
            Dim oNormalVector As Vector = Nothing
            oTransFeat.ScopeNormal(eCurveScopeTye, oNormalVector)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.TransitionFeature.AreaCentroidMomentsOfInertia(System.Double@,Ingr.SP3D.Common.Middle.Position@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,Ingr.SP3D.Common.Middle.Vector@,Ingr.SP3D.Common.Middle.Vector@)">
            <summary>
            Not implemented.
            </summary>
            <param name="dArea"></param>
            <param name="posCentroid"></param>
            <param name="dInteriaX"></param>
            <param name="dInertiaY"></param>
            <param name="dInertiaXY"></param>
            <param name="dMajorPrncplInertia"></param>
            <param name="dMinorPrncplInertia"></param>
            <param name="dPolarInertia"></param>
            <param name="MjIAxis"></param>
            <param name="MnIAxis"></param>
            <compilewhen>internal</compilewhen>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.TransitionFeature.EndPoints(Ingr.SP3D.Common.Middle.Position@,Ingr.SP3D.Common.Middle.Position@)">
            <summary>
            Finds the end points of the transition feature.
            </summary>
            <param name="posStart">Starting point of a transition feature.</param>
            <param name="posEnd">End point of a transition feature.</param>
            <example>This example explains how to call the EndPoints method to find the end positions of a transistion feature.
            <code>        
            'Define Transition feature 
            Dim oTransFeat As TransitionFeature = Nothing 'It can be any turn feature (cableway or duct).
            'Define input arguments
            Dim oStartPos As Position = Nothing
            Dim oEndPos As Position = Nothing
            'Call 'EndPoints' to find the end points of transition feature.
            oTransFeat.EndPoints(oStartPos, oEndPos)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.TransitionFeature.IsPointOn(Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Determines whether a given point is on the transition feature.
            </summary>
            <param name="pos">Point to determine whether on this transition feature.</param>
            <returns>True if the point is on the transition feature; False, if the point is not on the transition feature.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to COM method.</exception>
            <example>This example explains how to find out if a point is on feature or not.
            <code>
            'Define Transition feature.
            Dim oTransFeat As TransitionFeature = Nothing
            'Define point on feature.
            Dim oPointOnFeat As Position = Nothing
            Dim bPointOnFeature As Boolean = False
            'Call IsPointOn to find out if the point is on feature or not.
            bPointOnFeature = oTransFeat.IsPointOn(oPointOnFeat)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.TransitionFeature.DistanceBetween(Ingr.SP3D.Common.Middle.Point3d,System.Double@,Ingr.SP3D.Common.Middle.Position@)">
            <summary>
            Determines the distance between this transition feature and the input point.
            </summary>
            <param name="oPoint3d">Input point.</param>
            <param name="dDist">Output minimum distance.</param>
            <param name="posSrcPos">Point on this transition feature at minimum distance.</param>
            <exception cref="T:System.ArgumentNullException">oPoint3d cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <example>This example explains how to call DistanceBetween method on a transition feature
            to find the minimum distance between the input point and this transition feature.
            <code>
            'Define transition feature.
            Dim oTransFeat As TransitionFeature = Nothing 'It can be any transition feature (cableway or duct).
            'Define input arguments.
            Dim dDistance As Double = 0.0
            Dim oPosOnFeature As Position = Nothing
            Dim oInputPos As Point3d = Nothing
            'Call DistanceBetween to find the minimum distance between the input point and this transition feature.
            oTransFeat.DistanceBetween(oInputPos, dDistance, oPosOnFeature)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.TransitionFeature.DistanceBetween(Ingr.SP3D.Common.Middle.ICurve,System.Double@,Ingr.SP3D.Common.Middle.Position@,Ingr.SP3D.Common.Middle.Position@)">
            <summary>
            Not implemented.
            </summary>
            <param name="oInCurve"></param>
            <param name="dDist"></param>
            <param name="posSrcPos"></param>
            <param name="posInPos"></param>
            <compilewhen>internal</compilewhen>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.TransitionFeature.DistanceBetween(Ingr.SP3D.Common.Middle.ISurface,System.Double@,Ingr.SP3D.Common.Middle.Position@,Ingr.SP3D.Common.Middle.Position@)">
            <summary>
            Not implemented.
            </summary>
            <param name="oInSurf"></param>
            <param name="dDist"></param>
            <param name="posSrcPos"></param>
            <param name="posInPos"></param>
            <compilewhen>internal</compilewhen>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.TransitionFeature.Intersect(Ingr.SP3D.Common.Middle.ICurve,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position}@,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position}@,Ingr.SP3D.Common.Middle.GeometryIntersectionType@)">
            <summary>
            Not implemented.
            </summary>
            <param name="oInCurve"></param>
            <param name="colIntPos"></param>
            <param name="colOverlapPos"></param>
            <param name="eIntersectCode"></param>
            <compilewhen>internal</compilewhen>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.TransitionFeature.Intersect(Ingr.SP3D.Common.Middle.ISurface,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.BusinessObject}@,Ingr.SP3D.Common.Middle.GeometryIntersectionType@)">
            <summary>
            Not implemented.
            </summary>
            <param name="oInObj"></param>
            <param name="colCurves"></param>
            <param name="eIntersectCode"></param>
            <compilewhen>internal</compilewhen>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.TransitionFeature.SelfIntersect(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position}@,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position}@)">
            <summary>
            Not implemented.
            </summary>
            <param name="colIntPos"></param>
            <param name="colOverlapPos"></param>
            <compilewhen>internal</compilewhen>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.TransitionFeature.CentroidInertiaForWire(System.Double@,Ingr.SP3D.Common.Middle.Position@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,Ingr.SP3D.Common.Middle.Vector@,Ingr.SP3D.Common.Middle.Vector@,Ingr.SP3D.Common.Middle.Vector@)">
            <summary>
            Not implemented.
            </summary>
            <param name="dLength"></param>
            <param name="posCentroid"></param>
            <param name="dInteriaX"></param>
            <param name="dInertiaY"></param>
            <param name="dInertiaZ"></param>
            <param name="dPrncplInertiaU"></param>
            <param name="dPrncplInertiaV"></param>
            <param name="dPrncplInertiaN"></param>
            <param name="AxisU"></param>
            <param name="AxisV"></param>
            <param name="AxisN"></param>
            <compilewhen>internal</compilewhen>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.TransitionFeature.Length">
            <summary>
            Finds the length of this transition feature.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.TransitionFeature.Area">
            <summary>
            Not implemented.
            </summary>
            <compilewhen>internal</compilewhen>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.TransitionFeature.Form">
            <summary>
            Finds the closure of this transition feature.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.TransitionFeature.Scope">
            <summary>
            Finds the planarity of this transition feature.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.TransitionFeature.Centroid">
            <summary>
            Not implemented.
            </summary>
            <compilewhen>internal</compilewhen>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.SurfaceMountFeature">
            <summary>
            Abstract class upon which Route SurfaceMount feature class wrappers are built.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.OfflineFeature">
            <summary>
             OfflineFeature class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.OfflineFeature.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the OfflineFeature base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.OfflineFeature.#ctor">
            <summary>
            Public constructor for the OfflineFeature base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.OfflineFeature.Finalize">
            <summary>
            Destructor for the OfflineFeature base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.SurfaceMountFeature.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the SurfaceMountFeature base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.SurfaceMountFeature.#ctor">
            <summary>
            Public constructor for the SurfaceMountFeature base class
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.SurfaceMountFeature.Finalize">
            <summary>
            Destructor for the SurfaceMountFeature base class
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.SurfaceMountFeature.OrientationAngle">
            <summary>
            Gets or sets the OrientationAngle property. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.StraightFeature">
            <summary>
             StraightFeature class is the base class from which all straight features (Pipe/Hvac/Cableway) are derived.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.StraightFeature.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the StraightFeature base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.StraightFeature.#ctor">
            <summary>
            Public constructor for the StraightFeature base class
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.StraightFeature.Finalize">
            <summary>
            Destructor for the StraightFeature base class
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.StraightFeature.TangentAtPoint(Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Not implemented.
            </summary>
            <param name="pos">Position</param>
            <returns></returns>
            <compilewhen>internal</compilewhen>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.StraightFeature.ProjectPoint(Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Not implemented.
            </summary>
            <param name="pos">Position</param>
            <returns></returns>
            <compilewhen>internal</compilewhen>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.StraightFeature.ProjectPoint(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Not implemented.
            </summary>
            <param name="pos">Position</param>
            <param name="vecProj">Vector</param>
            <returns></returns>
            <compilewhen>internal</compilewhen>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.StraightFeature.PointAtDistanceAlong(System.Double)">
            <summary>
            Not implemented.
            </summary>
            <param name="dist">Distance</param>
            <returns></returns>
            <compilewhen>internal</compilewhen>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.StraightFeature.PointAtDistanceAlong(Ingr.SP3D.Common.Middle.Position,System.Double)">
            <summary>
            Not implemented.
            </summary>
            <param name="posStart">Position</param>
            <param name="dist">Distance</param>
            <returns></returns>
            <compilewhen>internal</compilewhen>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.StraightFeature.ScopeNormal(Ingr.SP3D.Common.Middle.CurveScopeType@,Ingr.SP3D.Common.Middle.Vector@)">
            <summary>
            Finds the planarity and the normal for this curve.
            </summary>
            <param name="eScope">Enumerator which shows the planarity of the curve.</param>
            <param name="vecNormal">The normal vector of the curve.</param>
            <remarks>
            <list type="table">
               <listheader>
                   <term>CurveScopeType</term>
                   <description>Description</description>
               </listheader>
               <item>
                   <term>Unknown = 0</term>
                   <description>No normal returned.</description>
               </item>
               <item>
                   <term>Planar = 1</term>
                   <description>Normal returned, if curve is closed; then this is an oriented normal.</description>
               </item>
               <item>
                   <term>Colinear = 2</term>
                   <description>A normal returned.</description>
               </item>
               <item>
                   <term>Degenerate = 3</term>
                   <description>No normal returned.</description>
               </item>
               <item>
                   <term>NonPlanar = 4</term>
                   <description>Least squares normal returned.</description>
               </item>
            </list>
            </remarks>
            <example>This example explains how to call ScopeNormal to find the curve scope type and normal vector.
            <code>
            'Define straight feature. 
            Dim oStriaghtFeat As StraightFeature = Nothing 'It can be any striaght feature(cableway,pipe,conduit,duct)
            'Define input arguments.
            Dim eCurveScopeType As CurveScopeType
            Dim oScopeNormalVec As Vector = Nothing
            'Call ScopeNormal to find the curve scope type and normal vector.
            oStriaghtFeat.ScopeNormal(eCurveScopeType, oScopeNormalVec)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.StraightFeature.AreaCentroidMomentsOfInertia(System.Double@,Ingr.SP3D.Common.Middle.Position@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,Ingr.SP3D.Common.Middle.Vector@,Ingr.SP3D.Common.Middle.Vector@)">
            <summary>
            Not implemented.
            </summary>
            <param name="dArea"></param>
            <param name="posCentroid"></param>
            <param name="dInteriaX"></param>
            <param name="dInertiaY"></param>
            <param name="dInertiaXY"></param>
            <param name="dMajorPrncplInertia"></param>
            <param name="dMinorPrncplInertia"></param>
            <param name="dPolarInertia"></param>
            <param name="MjIAxis"></param>
            <param name="MnIAxis"></param>
            <compilewhen>internal</compilewhen>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.StraightFeature.EndPoints(Ingr.SP3D.Common.Middle.Position@,Ingr.SP3D.Common.Middle.Position@)">
            <summary>
            Finds the end points of the straight feature.
            </summary>
            <param name="posStart">Starting point.</param>
            <param name="posEnd">Ending point.</param>
            <example>This example explains how to call the EndPoints method to find the end positions of straight feature.
            <code>        
            'Define straight feature. 
            Dim oStriaghtFeat As StraightFeature = Nothing 'It can be any straight feature (cableway, pipe, conduit, duct).
            'Define input arguments.
            Dim oStartPos As Position = Nothing
            Dim oEndPos As Position = Nothing
            'Call EndPoints to find the end points of straight feature.
            oStriaghtFeat.EndPoints(oStartPos, oEndPos)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.StraightFeature.IsPointOn(Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Determines whether a given point is on the straight feature.
            </summary>
            <param name="pos">Point to determine if on this straight feature.</param>
            <returns>If True, the point is on the straight feature; if False, the point is not on the straight feature.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <example>Thsi example explains how to call the IsPointOn method to find whether the input position is on a straight feature or not.
            <code>
            'Define straight feature. 
            Dim oStriaghtFeat As StraightFeature = Nothing 'It can be any straight feature (cableway, pipe, conduit, duct).
            'Define input arguments.
            Dim oPosOnFeature As Position = Nothing
            'Define return argument.
            Dim bIsPointOnFeature As Boolean = False
            'Call IsPointOn to find the input position is on straight feature or not.
            bIsPointOnFeature = oStriaghtFeat.IsPointOn(oPosOnFeature)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.StraightFeature.DistanceBetween(Ingr.SP3D.Common.Middle.Point3d,System.Double@,Ingr.SP3D.Common.Middle.Position@)">
            <summary>
            Determines the distance between this straight feature and the input point.
            </summary>
            <param name="oPoint3d">Input point.</param>
            <param name="dDist">Output minimum distance.</param>
            <param name="posSrcPos">Point on this straight feature at minimum distance.</param>
            <exception cref="T:System.ArgumentNullException">oPoint3d cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <example>This example explains how to find the minimum distance between the input point and this straight feature.
            <code>
            'Define straight feature. 
            Dim oStriaghtFeat As StraightFeature = Nothing 'It can be any straight feature (cableway, pipe, conduit, duct).
            'Define input arguments.
            Dim dDistance As Double = 0.0
            Dim oPosOnFeature As Position = Nothing
            Dim oInputPos As Point3d = Nothing
            'Call DistanceBetween to find the minimum distance between the input point and this straight feature.
            oStriaghtFeat.DistanceBetween(oInputPos, dDistance, oPosOnFeature)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.StraightFeature.DistanceBetween(Ingr.SP3D.Common.Middle.ICurve,System.Double@,Ingr.SP3D.Common.Middle.Position@,Ingr.SP3D.Common.Middle.Position@)">
            <summary>
            Determines the distance between this straight feature and the input curve.
            </summary>
            <param name="oInCurve">Input curve.</param>
            <param name="dDist">Output minimum distance.</param>
            <param name="posSrcPos">Point on this straight feature at minimum distance.</param>
            <param name="posInPos">Point on input curve at minimum distance.</param>
            <exception cref="T:System.ArgumentNullException">oInCurve cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <example>This example explanis how to find the minimum distance between a curve and this straight feature.
            <code>
            'Define straight feature. 
            Dim oStriaghtFeat As StraightFeature = Nothing 'It can be any straight feature (cableway, pipe, conduit, duct).
            'Define input arguments.
            Dim oInputCurve As ICurve = Nothing
            Dim dDistance As Double = 0.0
            Dim oPosOnFeature As Position = Nothing
            Dim oPosOnInputCurve As Position = Nothing
            'Call DistanceBetween to find the minimum distance between the input curve and straight feature.
            oStriaghtFeat.DistanceBetween(oInputCurve, dDistance, oPosOnFeature, oPosOnInputCurve)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.StraightFeature.DistanceBetween(Ingr.SP3D.Common.Middle.ISurface,System.Double@,Ingr.SP3D.Common.Middle.Position@,Ingr.SP3D.Common.Middle.Position@)">
            <summary>
            Determines the distance between this straight feature and the input surface.
            </summary>
            <param name="oInSurf">Input surface.</param>
            <param name="dDist">Output minimum distance.</param>
            <param name="posSrcPos">Point on this straight feature at minimum distance.</param>
            <param name="posInPos">Point on input surface at minimum distance.</param>
            <exception cref="T:System.ArgumentNullException">oInSurf cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <example>This example explains how to find the minimum distance between the input surface and this straight feature.
            <code>
            'Define straight feature. 
            Dim oStriaghtFeat As StraightFeature = Nothing 'It can be any straight feature (cableway, pipe, conduit, duct).
            'Define input arguments.
            Dim oInputSurface As ISurface = Nothing
            Dim dDistance As Double = 0.0
            Dim oPosOnFeature As Position = Nothing
            Dim oPosOnInputSurface As Position = Nothing
            'Call DistanceBetween to find the minimum distance between the input surface and this straight feature.
            oStriaghtFeat.DistanceBetween(oInputSurface, dDistance, oPosOnFeature, oPosOnInputSurface)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.StraightFeature.Intersect(Ingr.SP3D.Common.Middle.ICurve,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position}@,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position}@,Ingr.SP3D.Common.Middle.GeometryIntersectionType@)">
            <summary>
            Finds the intersection between this straight feature and another curve.
            </summary>
            <param name="oInCurve">Input curve.</param>
            <param name="colIntPos">Output collection of intersection points.</param>
            <param name="colOverlapPos">Output collection of overlap points.</param>
            <param name="eIntersectCode">Enumerator describing type of intersection.</param>
            <exception cref="T:System.ArgumentNullException">oInCurve cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <example>This example explains how to call Intersect method 
            to find the intersect points of input curve with straight feature.
            <code>
            'Define straight feature. 
            Dim oStriaghtFeat As StraightFeature = Nothing 'It can be any straight feature (cableway, pipe, conduit, duct).
            'Define input arguments.
            Dim oCurve As ICurve = Nothing
            Dim colOfInstPos As Collection(Of Position) = Nothing
            Dim colOfOverlapPos As Collection(Of Position) = Nothing
            Dim eGeomInstType As GeometryIntersectionType
            'Call Intersect to find the intersect points of input curve with straight feature.
            oStriaghtFeat.Intersect(oCurve, colOfInstPos, colOfOverlapPos, eGeomInstType)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.StraightFeature.Intersect(Ingr.SP3D.Common.Middle.ISurface,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.BusinessObject}@,Ingr.SP3D.Common.Middle.GeometryIntersectionType@)">
            <summary>
            Finds the intersection between this straight feature and a surface.
            </summary>
            <param name="oInObj">Input surface.</param>
            <param name="colCurves">Collection of intersection curves, which will be either curves or points.</param>
            <param name="eIntersectCode"></param>
            <exception cref="T:System.ArgumentNullException">oInObj cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <example>This example explains how to call Intersect to find the intersect curves of input surface with straight feature.
            <code>
            'Define straight feature. 
            Dim oStraightFeat As StraightFeature = Nothing 'It can be any straight feature (cableway, pipe, conduit, duct).
            'Define input arguments.
            Dim oSurface As ISurface = Nothing
            Dim colOfCurves As Collection(Of BusinessObject) = Nothing
            Dim eGeomInstType As GeometryIntersectionType
            'Call Intersect to find the intersect curves of input surface with straight feature.
            oStraightFeat.Intersect(oSurface, colOfCurves, eGeomInstType)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.StraightFeature.SelfIntersect(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position}@,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position}@)">
            <summary>
            Not implemented.
            </summary>
            <param name="colIntPos">Collection of Position objects.</param>
            <param name="colOverlapPos">Collection of Position objects.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <compilewhen>internal</compilewhen>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.StraightFeature.CentroidInertiaForWire(System.Double@,Ingr.SP3D.Common.Middle.Position@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,Ingr.SP3D.Common.Middle.Vector@,Ingr.SP3D.Common.Middle.Vector@,Ingr.SP3D.Common.Middle.Vector@)">
            <summary>
            Not implemented.
            </summary>
            <param name="dLength"></param>
            <param name="posCentroid"></param>
            <param name="dInteriaX"></param>
            <param name="dInertiaY"></param>
            <param name="dInertiaZ"></param>
            <param name="dPrncplInertiaU"></param>
            <param name="dPrncplInertiaV"></param>
            <param name="dPrncplInertiaN"></param>
            <param name="AxisU"></param>
            <param name="AxisV"></param>
            <param name="AxisN"></param>
            <compilewhen>internal</compilewhen>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.StraightFeature.Direction">
            <summary>
            Gets straight feature direction.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.StraightFeature.EndPoint">
            <summary>
            Gets straight feature end point.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.StraightFeature.Infinite">
            <summary>
            Gets straight feature infinite.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.StraightFeature.RootPoint">
            <summary>
            Gets straight feature root point.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.StraightFeature.StartPoint">
            <summary>
            Gets straight feature start point.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.StraightFeature.Length">
            <summary>
            Finds the length of this straight feature.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.StraightFeature.Area">
            <summary>
            Finds the area of this straight feature.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.StraightFeature.Form">
            <summary>
            Finds the closure of this straight feature.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.StraightFeature.Scope">
            <summary>
            Finds the planarity of this straight feature.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.StraightFeature.Centroid">
            <summary>
            Finds the centroid of this straight feature.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.PipeStraightFeature">
            <summary>
             PipeStraightFeature class is the .NET wrapper class representing a PipeStraightFeature object.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.IPipePathFeature">
            <summary>
            Properties and methods common to all pipe path features.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.IPipePathFeature.SetInsulationSpec(Ingr.SP3D.ReferenceData.Middle.PipeInsulationSpec)">
            <summary>
            Sets the insulation specification assigned to the feature. This method validates the insulation temperature on the feature  
            before setting the InsulationSpec on the feature.
            </summary>
            <param name="PipeInsulationSpec">PipeInsulationSpec object to set.</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.IPipePathFeature.SetInsulationSpec(Ingr.SP3D.ReferenceData.Middle.PipeInsulationSpec,System.Double)">
            <summary>
            Assigns insulation specification to the feature. The InsulationTemperature will be validated and set on the feature.
            </summary>
            <param name="PipeInsulationSpec">Insulation specification object to set.</param>
            <param name="InsulationTemperature">Insulation temperature value to set.</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.IPipePathFeature.SetUserDefinedInsulation(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Sets the user-defined insulation.
            </summary>
            <param name="iPurpose">Purpose of the insulation.</param>
            <param name="iMaterial">Insulation material.</param>
            <param name="dThickness">Thickness of insulation.</param>
            <param name="dTemperature">Temperature rating of the insulation.</param>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteIncorrectPurposeCodeException">The lPurpose argument is a value that is not in the InsulationPurpose codelist.</exception>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteIncorrectMaterialCodeException">The lMaterial argument is a value that is not in the InsulationMaterial codelist.</exception>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteInvalidInsulationThickessException">The value for dThickness is not defined for the given InsulationMaterial code. </exception>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.IPipePathFeature.ShortCode">
            <summary>
            Gets or sets the short code property.
            This property is shown as Type in the TaskHost ribbon bar.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.IPipePathFeature.InsulationSpec">
            <summary>
            Gets the insulation specification assigned to the Feature property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.IPipePathFeature.MultiSizeOption">
            <summary>
            Gets or sets the MultiSizeOption property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.IPipePathFeature.Tag">
            <summary>
            Gets or sets the Tag property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.IPipePathFeature.NPD">
            <summary>
            Gets or sets the NPD property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.IPipePathFeature.OptionCode">
            <summary>
            Gets or sets the OptionCode property. 
            This property is shown as Option in TaskHost ribbon bar.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.IPipePathFeature.OuterDiameter">
            <summary>
            Gets the OuterDiameter property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.IPipePathFeature.DefaultShortCode">
            <summary>
            Gets or sets the DefaultShortCode property. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.IPipeInsulation">
            <summary>
            Properties and methods common to pipe insulation objects. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.IPipeInsulation.InsulationPurpose">
            <summary>
            Gets the InsulationPurpose property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.IPipeInsulation.InsulationMaterial">
            <summary>
            Gets the InsulationMaterial property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.IPipeInsulation.InsulationThickness">
            <summary>
            Gets the InsulationThickness property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.IPipeInsulation.InsulationTemperature">
            <summary>
            Gets the InsulationTemperature property. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeStraightFeature.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the PipeStraightFeature base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeStraightFeature.#ctor">
            <summary>
            Public constructor for the PipeStraightFeature base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeStraightFeature.Finalize">
            <summary>
            Destructor for the PipeStraightFeature base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeStraightFeature.SetInsulationSpec(Ingr.SP3D.ReferenceData.Middle.PipeInsulationSpec)">
            <summary>
            Sets the insulation specification assigned to the feature. This method validates the insulation temperature on the feature  
            before setting the insulation specification on the feature.
            </summary>
            <param name="PipeInsulationSpec">Insulation specification object to set.</param>
            <example>Explains how to call SetInsulationSpec method.
            <code>
            Define pipe straight feature.
            Dim oPipeSF As PipeStraightFeature = Nothing
            'Define input arguments.
            Dim oInsulationSpec As PipeInsulationSpec = Nothing
            'Call SetInsulationSpec method.
            oPipeSF.SetInsulationSpec(oInsulationSpec)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeStraightFeature.SetInsulationSpec(Ingr.SP3D.ReferenceData.Middle.PipeInsulationSpec,System.Double)">
            <summary>
            Assigns the insulation specification to the feature. The insulation temperature will be validated and set on the feature.
            </summary>
            <param name="PipeInsulationSpec">Insulation specification object to set.</param>
            <param name="InsulationTemperature">Insulation temperature value to set.</param>
            <example>Explains how to call the SetInsulationSpec method.
            <code>
            Define pipe straight feature.
            Dim oPipeSF As PipeStraightFeature = Nothing
            'Define input arguments
            Dim oInsulationSpec As PipeInsulationSpec = Nothing
            Dim dTemperature As Double = 290
            'Call SetInsulationSpec method.
            oPipeSF.SetInsulationSpec(oInsulationSpec ,dTemperature)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeStraightFeature.SetUserDefinedInsulation(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Sets the user-defined insulation.
            </summary>
            <param name="iPurpose">Purpose of the insulation.</param>
            <param name="iMaterial">Insulation material.</param>
            <param name="dThickness">Thickness of insulation.</param>
            <param name="dTemperature">Temperature rating of the insulation.</param>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteIncorrectPurposeCodeException">The lPurpose argument is a value that is not in the InsulationPurpose codelist.</exception>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteIncorrectMaterialCodeException">The lMaterial argument is a value that is not in the InsulationMaterial codelist.</exception>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteInvalidInsulationThickessException">The value for dThickness is not defined for the given InsulationMaterial code. </exception>
            <example> This example shows how to set user-defined insulation on PipeTurnFeature.
            <code>
            'Declare the required variables. 
            Dim oPipeFeature As PipeTurnFeature = Nothing
            Dim iPurpose As Int32
            Dim iMaterial As Int32
            Dim dThickness As Double
            Dim dTemperature As Double
            ' Set user-defined insulation on PipeTurnFeature. 
            oPipeFeature.SetUserDefinedInsulation(iPurpose, iMaterial, dThickness, dTemperature)
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeStraightFeature.ShortCode">
            <summary>
             Gets or sets the Short Code property.
             This property is shown as "Type" in the TaskHost ribbon bar.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeStraightFeature.InsulationSpec">
            <summary>
             Gets the Insulation Specification property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeStraightFeature.MultiSizeOption">
            <summary>
            Gets or sets the MultiSizeOption property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeStraightFeature.Tag">
            <summary>
            Gets or sets the Tag property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeStraightFeature.NPD">
            <summary>
            Gets or sets the NPD (nominal pipe diameter) property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeStraightFeature.OptionCode">
            <summary>
            Gets or sets the Option Code property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeStraightFeature.OuterDiameter">
            <summary>
            Gets or sets the Outer Diameter property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeStraightFeature.DefaultShortCode">
            <summary>
            Gets or sets the Default Short Code property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeStraightFeature.InsulationPurpose">
            <summary>
            Gets the Insulation Purpose property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeStraightFeature.InsulationMaterial">
            <summary>
            Gets the Insulation Material property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeStraightFeature.InsulationThickness">
            <summary>
            Gets the Insulation Thickness property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeStraightFeature.InsulationTemperature">
            <summary>
            Gets the Insulation Temperature property. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.PipeEndFeature">
            <summary>
             PipeEndFeature class is the .NET wrapper class representing a PipeEndFeature object.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.EndFeature">
            <summary>
             EndFeature class is the base class from which all end features (Pipe/Hvac/Cableway) are derived.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.EndFeature.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the EndFeature base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.EndFeature.#ctor">
            <summary>
            Public constructor for the EndFeature base class
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.EndFeature.Finalize">
            <summary>
            Destructor for the EndFeature base class
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.EndFeature.IsIntermediateFeature">
            <summary>
            Checks whether the end feature is an intermediate end feature or not.
            </summary>
            <returns>Boolean</returns>
            <example>This example explains how to check whether the end feature is an intermediate end feature or not.
            <code>
            'Create the end feature.
            Dim oEndFeat As EndFeature = Nothing
            Dim bIsIntermediateEndFeat As Boolean = False
            'Call IsIntermediateFeature on EndFeature.
            bIsIntermediateEndFeat = oEndFeat.IsIntermediateFeature()        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.EndFeature.DisconnectLogicalConnection">
            <summary>
            Disconnects only logical connections.
            Examples are connections between a route end feature and equipment and
            connections between two runs.
            </summary>
            <example>
            <code>
            'Declare end feature.
            Dim oEF As EndFeature = Nothing 
            'Call 'DisconnectLogicalConnection' method to disconnect the logical connection.
            oEF.DisconnectLogicalConnection() 
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.EndFeature.OrientationAngle">
            <summary>
            Gets or sets the OrientationAngle property. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeEndFeature.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the PipeEndFeature base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeEndFeature.#ctor">
            <summary>
            Public constructor for the PipeEndFeature base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeEndFeature.Finalize">
            <summary>
            Destructor for the PipeEndFeature base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeEndFeature.SetInsulationSpec(Ingr.SP3D.ReferenceData.Middle.PipeInsulationSpec)">
            <summary>
            Sets the insulation specification assigned to the feature. This method validates the insulation temperature on the feature  
            before setting the insulation specification on the feature.
            </summary>
            <param name="PipeInsulationSpec">Insulation specification object to set.</param>
            <example>This example explains how to call the SetInsulationSpec method.
            <code>
            'Define pipe end feature.
            Dim oPipeEndFeat As PipeEndFeature = Nothing
            'Define input arguments.
            Dim oPipeInsulationSpec As PipeInsulationSpec = Nothing        
            'Call SetInsulationSpec.
            oPipeEndFeat.SetInsulationSpec(oPipeInsulationSpec)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeEndFeature.SetInsulationSpec(Ingr.SP3D.ReferenceData.Middle.PipeInsulationSpec,System.Double)">
            <summary>
            Assigns the insulation specification to the feature. The insulation temperature will be validated and set on the feature.
            </summary>
            <param name="PipeInsulationSpec">Insulation specification object to set.</param>
            <param name="InsulationTemperature">Insulation temperature value to set.</param>
            <example>This example explains how to call the SetInsulationSpec method.
            <code>
            'Define pipe end feature.
            Dim oPipeEndFeat As PipeEndFeature = Nothing
            'Define input arguments.
            Dim oPipeInsulationSpec As PipeInsulationSpec = Nothing
            Dim dInsulationTemperature As Double = 273.0
            'Call SetInsulationSpec.
            oPipeEndFeat.SetInsulationSpec(oPipeInsulationSpec, dInsulationTemperature)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeEndFeature.SetUserDefinedInsulation(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Sets the user-defined insulation.
            </summary>
            <param name="iPurpose">Purpose of the insulation.</param>
            <param name="iMaterial">Insulation material.</param>
            <param name="dThickness">Thickness of insulation.</param>
            <param name="dTemperature">Temperature rating of the insulation.</param>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteIncorrectPurposeCodeException">The lPurpose argument is a value that is not in the InsulationPurpose codelist.</exception>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteIncorrectMaterialCodeException">The lMaterial argument is a value that is not in the InsulationMaterial codelist.</exception>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteInvalidInsulationThickessException">The value for dThickness is not defined for the given InsulationMaterial code. </exception>
            <example> This example shows how to set user-defined insulation on PipeTurnFeature.
            <code>
            'Declare the required variables. 
            Dim oPipeFeature As PipeTurnFeature = Nothing
            Dim iPurpose As Int32
            Dim iMaterial As Int32
            Dim dThickness As Double
            Dim dTemperature As Double
            ' Set user-defined insulation on PipeTurnFeature. 
            oPipeFeature.SetUserDefinedInsulation(iPurpose, iMaterial, dThickness, dTemperature)
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeEndFeature.ShortCode">
            <summary>
             Gets or sets the Short Code property.
             This property is shown as "Type" in the TaskHost ribbon bar.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeEndFeature.InsulationSpec">
            <summary>
             Gets the Insulation Specification property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeEndFeature.MultiSizeOption">
            <summary>
            Gets or sets the MultiSizeOption property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeEndFeature.Tag">
            <summary>
            Gets or sets the Tag property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeEndFeature.NPD">
            <summary>
            Gets or sets the NPD (nominal pipe diameter) property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeEndFeature.OptionCode">
            <summary>
            Gets or sets the Option Code property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeEndFeature.OuterDiameter">
            <summary>
            Gets or sets the Outer Diameter property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeEndFeature.DefaultShortCode">
            <summary>
            Gets or sets the Default Short Code property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeEndFeature.InsulationPurpose">
            <summary>
            Gets the Insulation Purpose property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeEndFeature.InsulationMaterial">
            <summary>
            Gets the Insulation Material property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeEndFeature.InsulationThickness">
            <summary>
            Gets the Insulation Thickness property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeEndFeature.InsulationTemperature">
            <summary>
            Gets the Insulation Temperature property. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.DuctEndFeature">
            <summary>
            Wrapper for Route DuctEndFeature class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.IDuctPathFeature">
            <summary>
            Properties and methods common to all duct path features. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.IDuctPathFeature.SetUserDefinedInsulation(System.Int32,System.Double)">
            <summary>
            Sets the user-defined insulation.
            </summary>
            <param name="iMaterial">Insulation material.</param>
            <param name="dThickness">Thickness of insulation.</param>        
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteInvalidInsulationThickessException">The value for dThickness is not defined for the given InsulationMaterial code. </exception>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.IDuctPathFeature.WallThickness">
            <summary>
            Gets or sets the WallThickness property. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.IDuctInsulation">
            <summary>
            Properties and methods common to duct insulation objects. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.IDuctInsulation.InsulationMaterial">
            <summary>
            Gets the InsulationMaterial property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.IDuctInsulation.InsulationThickness">
            <summary>
            Gets the InsulationThickness property. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.IRouteFeatureWithCrossSection">
            <summary>
            Properties and methods common to route features with a cross section. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.IRouteFeatureWithCrossSection.CrossSectionOrientationAngle">
            <summary>
            Gets or sets the CrossSectionOrientationAngle property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.IRouteFeatureWithCrossSection.Width">
            <summary>
            Gets or sets the Width property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.IRouteFeatureWithCrossSection.Depth">
            <summary>
            Gets or sets the Depth property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.IRouteFeatureWithCrossSection.CornerRadius">
            <summary>
            Gets or sets the CornerRadius property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.IRouteFeatureWithCrossSection.DimensionalBaseOuter">
            <summary>
            Gets or sets the DimensionalBaseOuter property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.IRouteFeatureWithCrossSection.CrossSectionShape">
            <summary>
            Gets the CrossSectionShape property.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctEndFeature.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the DuctEndFeature base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctEndFeature.#ctor">
            <summary>
            Public constructor for the DuctEndFeature base class
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctEndFeature.Finalize">
            <summary>
            Destructor for the DuctEndFeature base class
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctEndFeature.SetUserDefinedInsulation(System.Int32,System.Double)">
            <summary>
            Sets the user-defined insulation.
            </summary>
            <param name="iMaterial">Insulation material.</param>
            <param name="dThickness">Thickness of insulation.</param>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteIncorrectMaterialCodeException">The lMaterial argument is a value that is not in the InsulationMaterial codelist.</exception>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteInvalidInsulationThickessException">The value for dThickness is not defined for the given InsulationMaterial code. </exception>
            <example> This example shows how to set user-defined insulation on DuctEndFeature.
            <code>
            'Declare the required variables. 
            Dim oDuctFeature As DuctEndFeature = Nothing
            Dim iMaterial As Int32
            Dim dThickness As Double
            ' Set user-defined insulation on DuctEndFeature. 
            oDuctFeature.SetUserDefinedInsulation(iMaterial, dThickness)
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctEndFeature.WallThickness">
            <summary>
            Gets or sets the WallThickness property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctEndFeature.CrossSectionOrientationAngle">
            <summary>
            Gets or sets the CrossSectionOrientationAngle property. 
            </summary>        
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctEndFeature.Width">
            <summary>
            Gets or sets the Width property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctEndFeature.Depth">
            <summary>
            Gets or sets the Depth property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctEndFeature.CornerRadius">
            <summary>
            Gets or sets the CornerRadius property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctEndFeature.DimensionalBaseOuter">
            <summary>
            Gets or sets the DimensionalBaseOuter property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctEndFeature.CrossSectionShape">
            <summary>
            Gets the CrossSectionShape property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctEndFeature.InsulationMaterial">
            <summary>
            Gets InsulationMaterial property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctEndFeature.InsulationThickness">
            <summary>
            Gets InsulationThickness property. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.DuctSlantTransitionFeature">
            <summary>
            Wrapper class for Route class DuctSlantTransitionFeature.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctSlantTransitionFeature.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the DuctSlantTransitionFeature base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctSlantTransitionFeature.#ctor">
            <summary>
            Public constructor for the DuctSlantTransitionFeature base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctSlantTransitionFeature.Finalize">
            <summary>
            Destructor for the DuctSlantTransitionFeature base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctSlantTransitionFeature.SetUserDefinedInsulation(System.Int32,System.Double)">
            <summary>
            Sets the user-defined insulation.
            </summary>
            <param name="iMaterial">Insulation material.</param>
            <param name="dThickness">Thickness of insulation.</param>        
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteIncorrectMaterialCodeException">The lMaterial argument is a value that is not in the InsulationMaterial codelist.</exception>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteInvalidInsulationThickessException">The value for dThickness is not defined for the given InsulationMaterial code. </exception>
            <example> This example shows how to set user-defined insulation on DuctSlantTransitionFeature.
            <code>
            'Declare the required variables. 
            Dim oDuctFeature As DuctSlantTransitionFeature = Nothing
            Dim iMaterial As Int32
            Dim dThickness As Double
            ' Set user-defined insulation on DuctSlantTransitionFeature. 
            oDuctFeature.SetUserDefinedInsulation(iMaterial, dThickness)
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctSlantTransitionFeature.WallThickness">
            <summary>
            Gets or sets the WallThickness property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctSlantTransitionFeature.InsulationMaterial">
            <summary>
            Gets InsulationMaterial property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctSlantTransitionFeature.InsulationThickness">
            <summary>
            Gets InsulationThickness property. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.AlongLegFeature">
            <summary>
             AlongLegFeature class is the base class from which all along leg features (Pipe/Hvac/Cableway) are derived.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.AlongLegFeature.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the AlongLegFeature base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.AlongLegFeature.#ctor">
            <summary>
            Public constructor for the AlongLegFeature base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.AlongLegFeature.Finalize">
            <summary>
            Destructor for the AlongLegFeature base class.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.AlongLegFeature.OrientationAngle">
            <summary>
            Gets or sets the OrientationAngle property. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.PipeAlongLegFeature">
            <summary>
             PipeAlongLegFeature class is the .NET wrapper class representing a PipeAlongLegFeature object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeAlongLegFeature.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the PipeAlongLegFeature base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeAlongLegFeature.#ctor">
            <summary>
            Public constructor for the PipeAlongLegFeature base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeAlongLegFeature.Finalize">
            <summary>
            Destructor for the PipeAlongLegFeature base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeAlongLegFeature.SetInsulationSpec(Ingr.SP3D.ReferenceData.Middle.PipeInsulationSpec)">
            <summary>
            Sets the insulation specification assigned to the feature. This method validates the insulation temperature on the feature  
            before setting the insulation specification on the feature.
            </summary>
            <param name="PipeInsulationSpec">Insulation specification object to set.</param>
            <example>This example explains how to set insulation spec on PipeAlongLegFeature.
            <code>
            'Define Pipe along leg feature.
            Dim oPipeALF As PipeAlongLegFeature = Nothing
            'Define input arguments.
            Dim oPipeInsulationSpec As PipeInsulationSpec = Nothing
            'Call SetInsulationSpec.
            oPipeALF.SetInsulationSpec(oPipeInsulationSpec)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeAlongLegFeature.SetInsulationSpec(Ingr.SP3D.ReferenceData.Middle.PipeInsulationSpec,System.Double)">
            <summary>
            Assigns the insulation specification to the feature. The insulation temperature will be validated and set on the feature.
            </summary>
            <param name="PipeInsulationSpec">Insulation specification object to set.</param>
            <param name="InsulationTemperature">Insulation temperature value to set.</param>
            <example>This example explains how to set insulation spec on PipeAlongLegFeature.
            <code>
            'Define Pipe along leg feature.
            Dim oPipeALF As PipeAlongLegFeature = Nothing
            'Define input arguments.
            Dim oPipeInsulationSpec As PipeInsulationSpec = Nothing
            Dim dInsulationTemperature As Double = 273.0
            'Call SetInsulationSpec.
            oPipeALF.SetInsulationSpec(oPipeInsulationSpec, dInsulationTemperature)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeAlongLegFeature.SetUserDefinedInsulation(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Sets the user-defined insulation.
            </summary>
            <param name="iPurpose">Purpose of the insulation.</param>
            <param name="iMaterial">Insulation material.</param>
            <param name="dThickness">Thickness of insulation.</param>
            <param name="dTemperature">Temperature rating of the insulation.</param>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteIncorrectPurposeCodeException">The lPurpose argument is a value that is not in the InsulationPurpose codelist.</exception>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteIncorrectMaterialCodeException">The lMaterial argument is a value that is not in the InsulationMaterial codelist.</exception>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteInvalidInsulationThickessException">The value for dThickness is not defined for the given InsulationMaterial code. </exception>
            <example> This example shows how to set user-defined insulation on PipeAlongLegFeature.
            <code>
            'Declare the required variables. 
            Dim oPipeFeature As PipeAlongLegFeature = Nothing
            Dim iPurpose As Int32
            Dim iMaterial As Int32
            Dim dThickness As Double
            Dim dTemperature As Double
            ' Set user-defined insulation on PipeAlongLegFeature. 
            oPipeFeature.SetUserDefinedInsulation(iPurpose, iMaterial, dThickness, dTemperature)
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeAlongLegFeature.SecondaryNPD">
            <summary>
            Gets the Secondary Nominal Pipe Diameter property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeAlongLegFeature.ShortCode">
            <summary>
             Gets or sets the Short Code property.
             This property is shown as "Type" in the TaskHost ribbon bar.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeAlongLegFeature.InsulationSpec">
            <summary>
             Gets the Insulation Specification property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeAlongLegFeature.MultiSizeOption">
            <summary>
            Gets or sets the MultiSizeOption property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeAlongLegFeature.Tag">
            <summary>
            Gets or sets the Tag property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeAlongLegFeature.NPD">
            <summary>
            Gets or sets the NPD (nominal pipe diameter) property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeAlongLegFeature.OptionCode">
            <summary>
            Gets or sets the OptionCode property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeAlongLegFeature.OuterDiameter">
            <summary>
            Gets or sets the OuterDiameter property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeAlongLegFeature.DefaultShortCode">
            <summary>
            Gets or sets the DefaultShortCode property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeAlongLegFeature.InsulationPurpose">
            <summary>
            Gets the Insulation Purpose property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeAlongLegFeature.InsulationMaterial">
            <summary>
            Gets the Insulation Material property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeAlongLegFeature.InsulationThickness">
            <summary>
            Gets the Insulation Thickness property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeAlongLegFeature.InsulationTemperature">
            <summary>
            Gets the Insulation Temperature property. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.CableTrayComponent">
            <summary>
            CableTrayComponent is the .NET wrapper class for cable tray component occurrence objects.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.CableTrayComponent.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the CableTrayComponent base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.CableTrayComponent.#ctor">
            <summary>
            Internal constructor for the CableTrayComponent base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.CableTrayComponent.Finalize">
            <summary>
            Destructor for the CableTrayComponent base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.CableTrayComponent.GetNameRuleHelper">
            <summary>
            Private utility method to get and manage the name rule helper object.
            </summary>
            <returns>m_oSystemChildHelper - Occurrence to the name rule helper object.</returns>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CableTrayComponent.ActiveNameRule">
             <summary>
             Gets or sets the active name rule assigned to a CableTrayComponent.
             </summary>
             <returns>Active name rule as Ingr.SP3D.Common.Middle.BusinessObject.</returns>
             <exception cref="T:System.InvalidOperationException">The base object does not support this operation.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidObjectTypeException">The object is not a name rule object.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoAccessException">The user does not have access to read or modify the object.</exception>
            <example>This example explains how to get or set the active name rule.
            <code>
             'Define CableTrayComponent. 
             Dim oCableTrayComp As CableTrayComponent = Nothing
             Dim oActiveNameRule As BusinessObject
             'Get the active name rule. 
             oActiveNameRule = oCableTrayComp.ActiveNameRule 
             'Set the active name rule. 
             oCableTrayComp.ActiveNameRule = oActiveNameRule 
            </code>
            </example>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.RouteRun">
            <summary>
            Abstract class upon which RouteRun class wrappers are built.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.RouteRun.E_OUTOFMEMORY">
            <summary>
            E_OUTOFMEMORY constant value is 2147942414.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.RouteRun.E_INVALIDARG">
            <summary>
            E_INVALIDARG constant value is 2147942487.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.RouteRun.E_NOINTERFACE">
            <summary>
            E_NOINTERFACE constant value is 2147500034.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.RouteRun.E_CATALOG_NOTHICKNESS">
            <summary>
            E_CATALOG_NOTHICKNESS constant value is 2147746816.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteRun.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the RouteRun base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteRun.#ctor">
            <summary>
            Public constructor for the RouteRun base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteRun.Finalize">
            <summary>
            Destructor for the RouteRun base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteRun.AddSystemChild(Ingr.SP3D.Common.Middle.ISystemChild)">
            <summary>
            Implementation of ISystem:AddSystemChild using the system helper of
            CommonMiddle.
            </summary>
            <param name="oChild">Wrapped system object to be added to the collection
            of children.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidChildTypeException">This exception will be raised if system child is invalid for route run.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailToAddSystemChildException">This will be raised if any unexpected failure happens in this method.</exception>
            <example>This example explains about how to add system childs to route run.
            <code>
             'Define route run.
             Dim oRouteRun As PipeRun = Nothing 'It can be any route run (pipe, cableway, cablerun, conduit run)
             'Declare ISystemChild obj.
             Dim oRouteFeat As ISystemChild = Nothing
             'Add system child to route run.
             oRouteRun.AddSystemChild(oRouteFeat)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteRun.GetSystemHelper">
            <summary>
            Private utility method to get and manage the system helper object.
            </summary>
            <returns>m_oSystemHelper - Occurrence to the system helper object.</returns>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteRun.GetSystemChildHelper">
            <summary>
            Private utility method to get and manage the system child helper object.
            </summary>
            <returns>m_oSystemChildHelper - Occurrence to the system child helper object.</returns>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteRun.GetNameRuleHelper">
            <summary>
            Private utility method to get and manage the name rule helper object.
            </summary>
            <returns>m_oSystemChildHelper - Occurrence to the name rule helper object.</returns>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteRun.SetUserDefinedName(System.String)">
             <summary>
             Sets the name of an item.
             </summary>
             <param name="Name">The new name string.</param>
             <example>This example explains about how to set user defined name on route run.
             <code>
            'Define route run.
            Dim oRouteRun As PipeRun = Nothing 'It can be any route run (pipe, cableway, cablerun, conduit run).
            'Declare route run name.
            Dim sRunName As String = "PipeRun_121"
            'Set name on route run.
            oRouteRun.SetUserDefinedName(sRunName)
             </code>
             </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteRun.GetWBSHierarchyHelper">
            <summary>
            Gets the WBS hierarchy helper.
            </summary>
            <returns>WBSHierarchyHelper</returns>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteRun.GetNamedItemHelper">
            <summary>
            Private utility method to get and manage the named item helper object.
            </summary>
            <returns>m_oNamedItemHelper - Occurrence of the named item helper object.</returns>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteRun.GetRouteAPIHelper">
            <summary>
            Private utility method to get and manage the Route API helper object.
            </summary>
            <returns>m_oRouteAPIHelper - Occurrence to the Route API helper object.</returns>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteRun.RunType">
            <summary>
            Return a string that identifies the class of the Run, based on the
            identifying interface supported by the Run.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteRun.SetActiveNameRule(System.String)">
            <summary>
            Sets the active name rule.
            </summary>
            <param name="strRuleName">String indicating the name rule to be used.  If this string
            is left blank, the first rule that is not user-defined will be used.</param>
            <example>
            <code>
            'Define route run.
            Dim oRouteRun As RouteRun = Nothing
            'Declare name rule.
            Dim sNameRule As String = "RouteNameRule" 
            'Call SetActiveNameRule method.
            'As it is a protected method, it can only be accessed inside the class where defined or inside any inherited class.
            this.SetActiveNameRule(sNameRule)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteRun.CopyUserDefinedName(Ingr.SP3D.Route.Middle.RouteRun)">
            <summary>
            Copies the user-defined name of the reference run.
            </summary>
            <example>Explains how to call CopyUserDefinedName method.
            <code>
            'Define route run.
            Dim oRunToCopy as RouteRun
            'Call CopyUserDefinedName method.
            'As it is a protected method, it can only be accessed inside the class where defined or inside any inherited class.
            this.CopyUserDefinedName(oRunToCopy) 
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteRun.GetFeatureAtLocation(Ingr.SP3D.Route.Middle.PathFeatureObjectTypes,Ingr.SP3D.Route.Middle.PathFeatureFunctions,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position@,Ingr.SP3D.Route.Middle.RouteFeature@)">
            <summary>
            Gets a feature at a given location.
            </summary>        
            <param name="eReqFeatType">Required feature type.</param>
            <param name="eReqFeatFunction">Required feature function.</param>
            <param name="oAtPosition">Location at which the feature is expected.</param>
            <param name="oFeatPosition">Feature found at a given location.</param>
            <param name="oFeature">Feature returned at a given location.</param>
            <exception cref="T:System.ArgumentNullException">An input argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">An input argument
            is of the wrong type.</exception>
            <example>This example shows how to get a feature at a given location.
            <code>
            'Create a run.
            Dim oRouteRun As RouteRun = Nothing
            'Define a position at which the feature is needed.
            Dim oAtPosition As Position = Nothing
            'Declare oFeatPosition, oFeature.
            Dim oFeatPosition As Position = Nothing
            Dim oFeature As RouteFeature = Nothing
            'Using GetFeatureAtLocation(), get the feature at a given location ot position.
            oRouteRun.GetFeatureAtLocation(PathFeatureObjectTypes.PathFeatureType_STRAIGHT, _
                                              PathFeatureFunctions.PathFeatureFunction_ROUTE, _
                                              oAtPosition, oFeatPosition, oFeature)
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.RouteRun.SystemChildren">
            <summary>
            Implementation of ISystem:SystemChildren using the system helper of
            CommonMiddle.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.RouteRun.SystemParent">
            <summary>
            Implementation of ISystemChild:System parent property.  Uses the
            system helper of CommonMiddle.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.RouteRun.ActiveNameRule">
            <summary>
            Gets or sets the active name rule assigned to a run.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.RouteRun.Name">
            <summary>
            Gets the read-only name.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.RouteRun.WBSItemParents">
            <summary>
            Returns the collection of WBS parents.
            </summary>
            <example>This example explains how to get WBSItemParents of a route run.
            <code>
            'Get the Run 
            Dim oRun As PipeRun = Nothing 'This can be a Duct/Cableway/Conduit Run.
            'Get WBSItemParents from run. 
            Dim oWBSParentsCollection As ReadOnlyCollection(Of IWBSItem) = oRun.WBSItemParents 
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.RouteRun.WBSProjects">
            <summary>
            Returns the collection of WBS projects.
            </summary>
            <example>This example explains how to get WBSProjects of a route run.
            <code>
            'Get the run. 
            Dim oRun As PipeRun = Nothing 'This can be a Duct/Cableway/Conduit Run.
            'Get WBSProjects from run. 
            Dim oWBSProjectsCollection As ReadOnlyCollection(Of IWBSProject) = oRun.WBSProjects 
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.RouteRun.Specification">
            <summary>
            Gets the specification assigned to the run property.  
            </summary>
            <example>This example shows how to get and set the specification on a run.
            <code>
            'Create a run.
            Dim oRouteRun As RouteRun = Nothing
            'Get specification from run.
            Dim oSpecBase As SpecificationBase = Nothing
            oSpecBase = oRouteRun.Specification
            'Set specification on run. 
            Dim oBOSpec As SpecificationBase = Nothing
            oRouteRun.Specification = oBOSpec
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.RouteRun.Features">
            <summary>
            Gets the collection of features of a run.
            </summary>
            <example>This example shows how to get features from a run.
            <code>
            'Create a run.
            Dim oRouteRun As RouteRun = Nothing
            'Define ReadOnlyCollection of RouteFeatures.
            Dim oFeatures As ReadOnlyCollection(Of RouteFeature) = Nothing        
            'Using Features property, get the collection of features on run.
            oFeatures = oRouteRun.Features
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.RouteRun.Parts">
            <summary>
            Gets the collection of parts of a run.
            </summary>
            <example>This example shows how to get parts from a run.
            <code>
            'Create a run.
            Dim oRouteRun As RouteRun = Nothing
            'Define ReadOnlyCollection of route part.
            Dim oParts As ReadOnlyCollection(Of RoutePart) = Nothing        
            'Using Parts property, get the collection of parts on run.
            oParts = oRouteRun.Parts
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.RouteRun.RouteConnections">
            <summary>
            Returns a collection of route connection objects.
            </summary>
            <example> This example shows how to get the route connections on a run.
            <code>
            Dim oRouteRun As RouteRun = Nothing
            'Define ReadOnlyCollection of ConnectionBase objects.
            Dim oConnections As ReadOnlyCollection(Of ConnectionBase) = Nothing        
            'Using RouteConnections property, get the collection of connection objects on the run.
            oConnections = oRouteRun.RouteConnections
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.RouteRun.Range">
            <summary>
            Gets the read-only range box of the run.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.FeatureUtils">
            <summary>
            Feature utilities helper class definition.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.FeatureUtils.#ctor">
            <summary>
            Public constructor for the PipeCurveFeature class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.FeatureUtils.ConvertArcToTurn(Ingr.SP3D.Route.Middle.RouteFeature,Ingr.SP3D.Route.Middle.RouteFeature@)">
            <summary>
            Converts a curve (Arc) feature to a turn feature.
            </summary>
            <param name="oCurveFeat">Routefeature object as curve feature.</param>
            <param name="oTurnFeat">RouteFeature object as turn feature.</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.FeatureUtils.ConvertTurnToArc(Ingr.SP3D.Route.Middle.RouteFeature,Ingr.SP3D.Route.Middle.RouteFeature@)">
            <summary>
            Converts a turn feature to a curve (Arc) feature.
            </summary>
            <param name="oTurnFeat">RouteFeature object as turn feature.</param>
            <param name="oCurveFeat">RouteFeature object as curve feature.</param>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.ConduitComponent">
            <summary>
            ConduitComponent is the .NET wrapper class for Conduit Component occurrence objects.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConduitComponent.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the ConduitComponent base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConduitComponent.#ctor">
            <summary>
            Internal constructor for the ConduitComponent base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConduitComponent.Finalize">
            <summary>
            Destructor for the ConduitComponent base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConduitComponent.GetNameRuleHelper">
            <summary>
            Private utility method to get and manage the name rule helper object.
            </summary>
            <returns>m_oSystemChildHelper - Occurrence to the name rule helper object.</returns>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitComponent.ActiveNameRule">
             <summary>
             Gets or sets the active name rule assigned to a ConduitComponent.
             </summary>
             <returns>Active name rule as Ingr.SP3D.Common.Middle.BusinessObject.</returns>
             <exception cref="T:System.InvalidOperationException">The base object does not support this operation.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidObjectTypeException">The object is not a name rule object.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoAccessException">The user does not have access to read or modify the object.</exception>
            <example>This example explains how to get or set the active name rule.
            <code>
             'Define ConduitComponent. 
             Dim oConduitComponent As ConduitComponent = Nothing
             Dim oActiveNameRule As BusinessObject
             'Get the active name rule. 
             oActiveNameRule = oConduitComponent.ActiveNameRule 
             ' Set the active name rule. 
             oConduitComponent.ActiveNameRule = oActiveNameRule 
            </code>
            </example>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.TurnFeature">
            <summary>
             TurnFeature class is the base class from which all turn features (Pipe/HVAC/Cableway) are derived.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.TurnFeature.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the TurnFeature base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.TurnFeature.#ctor">
            <summary>
            Public constructor for the TurnFeature base class
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.TurnFeature.Finalize">
            <summary>
            Destructor for the TurnFeature base class
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.TurnFeature.TangentAtPoint(Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Not implemented.
            </summary>
            <param name="pos"></param>
            <returns></returns>
            <compilewhen>internal</compilewhen>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.TurnFeature.ProjectPoint(Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Not implemented.
            </summary>
            <param name="pos"></param>
            <returns></returns>
            <compilewhen>internal</compilewhen>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.TurnFeature.ProjectPoint(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Not implemented.
            </summary>
            <param name="pos"></param>
            <param name="vecProj"></param>
            <returns></returns>
            <compilewhen>internal</compilewhen>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.TurnFeature.PointAtDistanceAlong(System.Double)">
            <summary>
            Not implemented.
            </summary>
            <param name="dist"></param>
            <returns></returns>
            <compilewhen>internal</compilewhen>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.TurnFeature.PointAtDistanceAlong(Ingr.SP3D.Common.Middle.Position,System.Double)">
            <summary>
            
            </summary>
            <param name="posStart"></param>
            <param name="dist"></param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.TurnFeature.ScopeNormal(Ingr.SP3D.Common.Middle.CurveScopeType@,Ingr.SP3D.Common.Middle.Vector@)">
            <summary>
            Find the planarity and the normal for this curve.
            </summary>
            <param name="eScope">Enumerator which shows the planarity of the curve.</param>
            <param name="vecNormal">The normal vector of the curve.</param>
            <remarks>
            <list type="table">
               <listheader>
                   <term>CurveScopeType</term>
                   <description>Description</description>
               </listheader>
               <item>
                   <term>Unknown = 0</term>
                   <description>No normal returned.</description>
               </item>
               <item>
                   <term>Planar = 1</term>
                   <description>Normal returned, if curve is closed; then this is an oriented normal.</description>
               </item>
               <item>
                   <term>Colinear = 2</term>
                   <description>A normal returned.</description>
               </item>
               <item>
                   <term>Degenerate = 3</term>
                   <description>No normal returned.</description>
               </item>
               <item>
                   <term>NonPlanar = 4</term>
                   <description>Least squares normal returned.</description>
               </item>
            </list>
            </remarks>
            <example>This example explains how to call ScopeNormal to find the curve scope type and normal vector.
            <code>
            'Define turn feature. 
            Dim oTurnFeat As TurnFeature = Nothing 'It can be any turn feature (cableway, pipe, conduit, duct)
            'Define input arguments.
            Dim eCurveScopeType As CurveScopeType
            Dim oScopeNormalVec As Vector = Nothing
            'Call ScopeNormal to find the curve scope type and normal vector.
            oTurnFeat.ScopeNormal(eCurveScopeType, oScopeNormalVec)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.TurnFeature.AreaCentroidMomentsOfInertia(System.Double@,Ingr.SP3D.Common.Middle.Position@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,Ingr.SP3D.Common.Middle.Vector@,Ingr.SP3D.Common.Middle.Vector@)">
            <summary>
            Not implemented.
            </summary>
            <param name="dArea"></param>
            <param name="posCentroid"></param>
            <param name="dInteriaX"></param>
            <param name="dInertiaY"></param>
            <param name="dInertiaXY"></param>
            <param name="dMajorPrncplInertia"></param>
            <param name="dMinorPrncplInertia"></param>
            <param name="dPolarInertia"></param>
            <param name="MjIAxis"></param>
            <param name="MnIAxis"></param>
            <compilewhen>internal</compilewhen>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.TurnFeature.EndPoints(Ingr.SP3D.Common.Middle.Position@,Ingr.SP3D.Common.Middle.Position@)">
            <summary>
            Finds the end points of the turn feature.
            </summary>
            <param name="posStart">Starting point of turn feature.</param>
            <param name="posEnd">End point of turn feature.</param>
            <example>This example explains how to call the EndPoints method to find the end positions of turn feature.
            <code>        
            'Define turn feature. 
            Dim oTurnFeat As TurnFeature = Nothing 'It can be any turn feature (cableway, pipe, conduit, duct).
            'Define input arguments.
            Dim oStartPos As Position = Nothing
            Dim oEndPos As Position = Nothing
            'Call EndPoints to find the end points of turn feature.
            oTurnFeat.EndPoints(oStartPos, oEndPos)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.TurnFeature.IsPointOn(Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Determines whether a given point is on the turn feature.
            </summary>
            <param name="pos">Point to determine whether on this turn feature.</param>
            <returns>If True, then the point is on the turn feature; If False, then the point is not on the turn feature.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <example>This example explains how to call IsPointOn to find whether the input position is on a turn feature or not.
            <code>
            'Define turn feature. 
            Dim oTurnFeat As TurnFeature = Nothing 'It can be any turn feature (cableway, pipe, conduit, duct).
            'Define input arguments.
            Dim oPosOnFeature As Position = Nothing
            'Define return argument.
            Dim bIsPointOnFeature As Boolean = False
            'Call IsPointOn to find whether the input position is on turn feature or not.
            bIsPointOnFeature = oTurnFeat.IsPointOn(oPosOnFeature)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.TurnFeature.DistanceBetween(Ingr.SP3D.Common.Middle.Point3d,System.Double@,Ingr.SP3D.Common.Middle.Position@)">
            <summary>
            Determines the distance between this turn feature and the input point.
            </summary>
            <param name="oPoint3d">Input point.</param>
            <param name="dDist">Output minimum distance.</param>
            <param name="posSrcPos">Point on this turn feature at minimum distance.</param>
            <exception cref="T:System.ArgumentNullException">oPoint3d cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <example>This example explains how to find the minimum distance between the input point and this turn feature.
            <code>
            'Define turn feature. 
            Dim oTurnFeat As TurnFeature = Nothing 'It can be any turn feature (cableway, pipe, conduit, duct).
            'Define input arguments.
            Dim dDistance As Double = 0.0
            Dim oPosOnFeature As Position = Nothing
            Dim oInputPos As Point3d = Nothing
            'Call DistanceBetween to find the minimum distance between the input point and this turn feature.
            oTurnFeat.DistanceBetween(oInputPos, dDistance, oPosOnFeature)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.TurnFeature.DistanceBetween(Ingr.SP3D.Common.Middle.ICurve,System.Double@,Ingr.SP3D.Common.Middle.Position@,Ingr.SP3D.Common.Middle.Position@)">
            <summary>
            Not implemented.
            </summary>
            <param name="oInCurve"></param>
            <param name="dDist"></param>
            <param name="posSrcPos"></param>
            <param name="posInPos"></param>
            <compilewhen>internal</compilewhen>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.TurnFeature.DistanceBetween(Ingr.SP3D.Common.Middle.ISurface,System.Double@,Ingr.SP3D.Common.Middle.Position@,Ingr.SP3D.Common.Middle.Position@)">
            <summary>
            Not implemented.
            </summary>
            <param name="oInSurf"></param>
            <param name="dDist"></param>
            <param name="posSrcPos"></param>
            <param name="posInPos"></param>
            <compilewhen>internal</compilewhen>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.TurnFeature.Intersect(Ingr.SP3D.Common.Middle.ICurve,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position}@,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position}@,Ingr.SP3D.Common.Middle.GeometryIntersectionType@)">
            <summary>
            Not implemented.
            </summary>
            <param name="oInCurve"></param>
            <param name="colIntPos"></param>
            <param name="colOverlapPos"></param>
            <param name="eIntersectCode"></param>
            <compilewhen>internal</compilewhen>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.TurnFeature.Intersect(Ingr.SP3D.Common.Middle.ISurface,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.BusinessObject}@,Ingr.SP3D.Common.Middle.GeometryIntersectionType@)">
            <summary>
            Not implemented.
            </summary>
            <param name="oInObj"></param>
            <param name="colCurves"></param>
            <param name="eIntersectCode"></param>
            <compilewhen>internal</compilewhen>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.TurnFeature.SelfIntersect(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position}@,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position}@)">
            <summary>
            Not implemented.
            </summary>
            <param name="colIntPos"></param>
            <param name="colOverlapPos"></param>
            <compilewhen>internal</compilewhen>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.TurnFeature.CentroidInertiaForWire(System.Double@,Ingr.SP3D.Common.Middle.Position@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,Ingr.SP3D.Common.Middle.Vector@,Ingr.SP3D.Common.Middle.Vector@,Ingr.SP3D.Common.Middle.Vector@)">
            <summary>
            Not implemented.
            </summary>
            <param name="dLength"></param>
            <param name="posCentroid"></param>
            <param name="dInteriaX"></param>
            <param name="dInertiaY"></param>
            <param name="dInertiaZ"></param>
            <param name="dPrncplInertiaU"></param>
            <param name="dPrncplInertiaV"></param>
            <param name="dPrncplInertiaN"></param>
            <param name="AxisU"></param>
            <param name="AxisV"></param>
            <param name="AxisN"></param>
            <compilewhen>internal</compilewhen>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.TurnFeature.BendRadius">
            <summary>
            Gets or sets the BendRadius property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.TurnFeature.BendAngle">
            <summary>
            Gets the BendAngle property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.TurnFeature.TurnType">
            <summary>
            Gets or sets the TurnType property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.TurnFeature.NumberOfMiters">
            <summary>
            Gets or sets the NumberOfMiters property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.TurnFeature.BendRadiusMultiplier">
            <summary>
            Gets or sets the BendRadiusMultiplier property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.TurnFeature.ThroatRadius">
            <summary>
            Gets or sets the ThroatRadius property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.TurnFeature.AlignedTurn">
            <summary>
            Gets the Aligned Turn property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.TurnFeature.Length">
            <summary>
            Finds the length of this turn feature.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.TurnFeature.Area">
            <summary>
            Not implemented.
            </summary>
            <compilewhen>internal</compilewhen>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.TurnFeature.Form">
            <summary>
            Finds the closure of this turn feature.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.TurnFeature.Scope">
            <summary>
            Finds the planarity of this turn feature.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.TurnFeature.Centroid">
            <summary>
            Not implemented.
            </summary>
            <compilewhen>internal</compilewhen>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.PipeComponent">
            <summary>
            PipeComponent is the .NET wrapper class for PipeComponent object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeComponent.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the PipeComponent base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeComponent.#ctor">
            <summary>
            Public constructor for the PipeComponent base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeComponent.Finalize">
            <summary>
            Destructor for the PipeComponent base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeComponent.GetNameRuleHelper">
            <summary>
            Private utility method to get and manage the name rule helper object.
            </summary>
            <returns>m_oSystemChildHelper - Occurrence to the name rule helper object.</returns>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeComponent.ShortCode">
            <summary>
            Gets or sets the ShortCode property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeComponent.OptionCode">
            <summary>
            Gets or sets the OptionCode property. 
            This property is shown as "Option" in TaskHost ribbon bar.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeComponent.ActiveNameRule">
             <summary>
             Gets or sets the active name rule assigned to a PipeComponent.
             </summary>
             <returns>Active name rule as Ingr.SP3D.Common.Middle.BusinessObject.</returns>
             <exception cref="T:System.InvalidOperationException">The base object does not support this operation.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidObjectTypeException">The object is not a name rule object.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoAccessException">The user does not have access to read or modify the object.</exception>
            <example>This example explains how to get or set the active name rule.
            <code>
             'Define PipeComponent. 
             Dim oPipeComponent As PipeComponent = Nothing
             Dim oActiveNameRule As BusinessObject
             'Get the active name rule. 
             oActiveNameRule = oPipeComponent.ActiveNameRule 
             ' Set the active name rule. 
             oPipeComponent.ActiveNameRule = oActiveNameRule 
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteExceptionHelper.GetRouteException(System.Runtime.InteropServices.COMException,System.String)">
            <summary>
            This method checks if the exception is any route specific , if not commonapp specific and returns respectively 
            and if its not both  it retunrs an unknown exception.
            </summary>
            <param name="oComException">COMException that is raised</param>
            <param name="sMethodOrPropertyName">Method or Property name from which the exception is raised</param>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteUnknownException">Unknown exception.</exception>
            <returns>CmnException</returns>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteExceptionHelper.GetRouteException(System.Runtime.InteropServices.COMException)">
            <summary>
            Calls the overloaded method "GetRouteException" with second argument as NULL
            </summary>
            <param name="oCOMException">COMException that is raised</param>
            <returns>CmnException</returns>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteExceptionHelper.CheckRteException(System.Runtime.InteropServices.COMException)">
            <summary>
            Checks if the exception is any route specific exception or not depending on error code
            </summary>
            <param name="oComException">COMException that is raised</param>
            <returns>CmnException or null depending on errorcode match</returns>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteExceptionHelper.ThrowException(System.Exception,System.String)">
            <summary>
            Returns the exception with a message if its COM Exception or returns the exception directly.        
            </summary>
            <param name="oException">Exception that is raised</param>
            <param name="sMethodOrPropertyName">Methos or PropertyName from which the exception is raised</param>
            <returns>Exception</returns>
        </member>
        <member name="T:Ingr.SP3D.Route.Exceptions.RteInvalidTapNumber">
            <summary>
            Raised when the tap number is not defined in the catalog for the specification of the feature to be tapped.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteInvalidTapNumber.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the RteInvalidTapNumber class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteInvalidTapNumber.#ctor">
            <summary>
            Initializes a new instance of the RteInvalidTapNumber class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Exceptions.RteInvalidTapDirection">
            <summary>
            Tap direction cannot be parallel if the feature is not a turn or an end leg component.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteInvalidTapDirection.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the RteInvalidTapDirection class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteInvalidTapDirection.#ctor">
            <summary>
            Initializes a new instance of the RteInvalidTapDirection class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Exceptions.RteMismatchInFeatureAndTapLoacation">
            <summary>
            Raised when there is an unexpected error in the PipeTapfeature constructor.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteMismatchInFeatureAndTapLoacation.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the RteMismatchInFeatureAndTapLoacation class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteMismatchInFeatureAndTapLoacation.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the RteMismatchInFeatureAndTapLoacation class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteMismatchInFeatureAndTapLoacation.#ctor">
            <summary>
            Initializes a new instance of the RteMismatchInFeatureAndTapLoacation class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Exceptions.RteCannotConvertBasePartToMatingPart">
            <summary>
            Raised when trying to convert a base part to a mating part.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteCannotConvertBasePartToMatingPart.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the RteCannotConvertBasePartToMatingPart 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteCannotConvertBasePartToMatingPart.#ctor">
            <summary>
            Initializes a new instance of the RteCannotConvertBasePartToMatingPart 
            class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Exceptions.RteFailedToGetFeatureFromPart">
            <summary>
            Raised when there is no feature associated with the part.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteFailedToGetFeatureFromPart.#ctor">
            <summary>
            Initializes a new instance of the RteFailedToGetFeatureFromPart 
            class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Exceptions.RteEmptySpoolableObjectException">
            <summary>
            Raised when there are no parts under the Spoolable object. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteEmptySpoolableObjectException.#ctor">
            <summary>
            Initializes a new instance of RteEmptySpoolableObjectException class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Exceptions.RteMoreThanOnePlateException">
            <summary>
            Raised when the number of penetration parts connected to a pipe is greater than one. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteMoreThanOnePlateException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of RteMoreThanOnePlateException class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Route.Exceptions.RtePlateNotConnectedToPipeException">
            <summary>
            Raised when there is no connection between the penetration part and the pipe. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RtePlateNotConnectedToPipeException.#ctor">
            <summary>
            Initializes a new instance of RtePlateNotConnectedToPipeException class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Exceptions.RteInvalidSpoolingTypeException">
            <summary>
            Raised when the combination of Spoolable object and spooling type is not valid.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteInvalidSpoolingTypeException.#ctor">
            <summary>
            Initializes a new instance of RteInvalidSpoolingTypeException class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Exceptions.RteNoSubSpoolsException">
            <summary>
            Raised when the number of subspools created is zero.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteNoSubSpoolsException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of RteNoSubSpoolsException class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Route.Exceptions.RteInvalidSpecException">
            <summary>
            Raised when the specification is not valid.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteInvalidSpecException.#ctor">
            <summary>
            Initializes a new instance of the RteInvalidSpecException class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteInvalidSpecException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the RteInvalidSpecException class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Exceptions.RteInvalidNominalDiameter">
            <summary>
            Raised when there is an error trying to get or set the nominal diameter.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteInvalidNominalDiameter.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the RteInvalidNominalDiameter class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteInvalidNominalDiameter.#ctor">
            <summary>
            Initializes a new instance of the RteInvalidNominalDiameter class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Exceptions.RteInvalidShortCode">
            <summary>
            Raised when a feature type is not defined for the short code. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteInvalidShortCode.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of RteInvalidShortCode class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Route.Exceptions.RteFailedToGetInsulationThickness">
            <summary>
            Raised when insulation thickness is not defined 
            for the insulation temperature on the run.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteFailedToGetInsulationThickness.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of RteFailedToGetInsulationThickness class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Route.Exceptions.RteInvalidMinimumSlope">
            <summary>
            Raised when the minimum slope value is not valid for the given slope direction.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteInvalidMinimumSlope.#ctor">
            <summary>
            Initializes a new instance of the RteInvalidMinimumSlope class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Exceptions.RteIncorrectPurposeCodeException">
            <summary>
            Raised when SetUserDefinedInsulation is called with a purpose
            code that is not found in the InsulationPurpose codelist.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteIncorrectPurposeCodeException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the RteIncorrectPurposeCodeException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteIncorrectPurposeCodeException.#ctor">
            <summary>
            Initializes a new instance of the RteIncorrectPurposeCodeException class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Exceptions.RteIncorrectMaterialCodeException">
            <summary>
            Raised when SetUserDefinedInsulation is called with a material
            code that is not found in the InsulationMaterial codelist.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteIncorrectMaterialCodeException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the RteIncorrectMaterialCodeException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteIncorrectMaterialCodeException.#ctor">
            <summary>
            Initializes a new instance of the RteIncorrectMaterialCodeException class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Exceptions.RteInvalidObjectType">
            <summary>
            Raised when the object used does not support the required interface.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteInvalidObjectType.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the RteInvalidObjectType 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteInvalidObjectType.#ctor">
            <summary>
            Initializes a new instance of the RteInvalidObjectType class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Exceptions.RteInvalidTransitionCrossSection">
            <summary>
            Raised when the transition cross section and the end feature or port cross section are the same.
            </summary> 
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteInvalidTransitionCrossSection.#ctor">
            <summary>
            Initializes a new instance of the RteInvalidTransitionCrossSection class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Exceptions.RteInvalidInsulationThickessException">
            <summary>
            Raised when SetUserDefinedInsulation is called with a thickness
            which is not defined for the given insulation material code.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteInvalidInsulationThickessException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the RteInvalidInsulationThickessException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteInvalidInsulationThickessException.#ctor">
            <summary>
            Initializes a new instance of the RteInvalidInsulationThickessException class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Exceptions.RteCableRouteUndefinedOrIncomplete">
            <summary>
            Raised when the cable route is undefined or incomplete. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteCableRouteUndefinedOrIncomplete.#ctor">
            <summary>
            Initializes a new instance of the RteCableRouteUndefinedOrIncomplete class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Exceptions.RteFailedToGetMaterial">
            <summary>
             Raised when getting a material on the given specification fails. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteFailedToGetMaterial.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the RteFailedToGetMaterial 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteFailedToGetMaterial.#ctor">
            <summary>
            Initializes a new instance of the RteFailedToGetMaterial class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Exceptions.RteSymbolNotFound">
            <summary>
            Raised when the symbol is not found in the catalog.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteSymbolNotFound.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
             Initializes a new instance of the RteSymbolNotFound 
            class with a reference to the inner COMException that is the cause of this exception.            
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteSymbolNotFound.#ctor">
            <summary>
            Initializes a new instance of the RteSymbolNotFound class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Exceptions.RteSymbolUpdateFailed">
            <summary>
            Raised when there is failure to update the symbol.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteSymbolUpdateFailed.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
             Initializes a new instance of the RteSymbolUpdateFailed 
            class with a reference to the inner COMException that is the cause of this exception.  
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteSymbolUpdateFailed.#ctor">
            <summary>
            Initializes a new instance of the RteSymbolUpdateFailed class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Exceptions.RteNoInsulationThicknessFound">
            <summary>
            Raised when insulation thickness is not defined for a given size.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteNoInsulationThicknessFound.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the RteNoInsulationThicknessFound 
            class with a reference to the inner COMException that is the cause of this exception.  
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Exceptions.RteCannotInsertFeatureIntoRun">
            <summary>
            Raised when a feature cannot be inserted on the run.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteCannotInsertFeatureIntoRun.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the RteCannotInsertFeatureIntoRun 
            class with a reference to the inner COMException that is the cause of this exception.              
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Exceptions.RteNoSpecFound">
            <summary>
            Raised when a specification is not defined or found in the catalog. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteNoSpecFound.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the RteNoSpecFound 
            class with a reference to the inner COMException that is the cause of this exception.               
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Exceptions.RteNoInsulationSpec">
            <summary>
            Raised when an insulation specification is not defined or found in the catalog. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteNoInsulationSpec.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the RteNoInsulationSpec 
            class with a reference to the inner COMException that is the cause of this exception.         
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Exceptions.RteNoInlineFeature">
            <summary>
            Raised when an inline feature is not found for the given offline feature. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteNoInlineFeature.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the RteNoInlineFeature 
            class with a reference to the inner COMException that is the cause of this exception.         
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Exceptions.RteNoInlineFeatureHasHeaderFeature">
            <summary>
            Raised when an offline feature has a header feature but does not have an inline feature.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteNoInlineFeatureHasHeaderFeature.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the RteNoInlineFeatureHasHeaderFeature 
            class with a reference to the inner COMException that is the cause of this exception. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Exceptions.RteNoMaterialDensity">
            <summary>
            Raised when material density is not found in the catalog.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteNoMaterialDensity.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the RteNoMaterialDensity 
            class with a reference to the inner COMException that is the cause of this exception. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Exceptions.RteNoMaterial">
            <summary>
            Raised when material data is not found in the catalog.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteNoMaterial.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the RteNoMaterial 
            class with a reference to the inner COMException that is the cause of this exception.  
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Exceptions.RteNoLineConstraint">
            <summary>
            Raised when there is no line constraint. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteNoLineConstraint.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the RteNoLineConstraint 
            class with a reference to the inner COMException that is the cause of this exception. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Exceptions.RteUnknownException">
            <summary>
            Raised when there is an unexpected failure.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteUnknownException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the RteUnknownException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteUnknownException.#ctor(System.Runtime.InteropServices.COMException,System.String)">
            <summary>
            Initializes a new instance of the RteUnknownException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteUnknownException.#ctor(System.Int32,System.String,System.String,System.String,System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the RteUnknownException class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Exceptions.RteUnknownException.#ctor(System.Int32,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the RteUnknownException  class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.PipeBranchFeature">
            <summary>
             PipeBranchFeature class is the .NET wrapper class representing a PipeBranchFeature object.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.BranchFeature">
            <summary>
             BranchFeature class is the base class from which all branch features (Pipe/Hvac/Cableway) are derived.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.BranchFeature.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the BranchFeature base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.BranchFeature.#ctor">
            <summary>
            Public constructor for the BranchFeature base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.BranchFeature.Finalize">
            <summary>
            Destructor for the BranchFeature base class.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.BranchFeature.BranchAngle">
            <summary>
            Gets the BranchAngle property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.BranchFeature.BranchOffsetType">
            <summary>
            Gets or sets the BranchOffsetType
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.BranchFeature.BranchJustificationType">
            <summary>
            Gets or sets the BranchJustificationType property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.BranchFeature.BranchPenetrationType">
            <summary>
            Gets or sets the BranchPenetrationType property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.BranchFeature.BranchPenetration">
            <summary>
            Gets the BranchPenetration property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.BranchFeature.BranchPositionAffinity">
            <summary>
            Gets or sets the BranchPositionAffinity property. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeBranchFeature.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the PipeBranchFeature base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeBranchFeature.#ctor">
            <summary>
            Public constructor for the PipeBranchFeature base class
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeBranchFeature.Finalize">
            <summary>
            Destructor for the PipeBranchFeature base class
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeBranchFeature.SetInsulationSpec(Ingr.SP3D.ReferenceData.Middle.PipeInsulationSpec)">
            <summary>
            Sets the insulation specification assigned to the feature. This method validates the insulation temperature on the feature  
            before setting the insulation specification on the feature.
            </summary>
            <param name="PipeInsulationSpec">Insulation specification object to set.</param>
            <example>This example explains how to call the SetInsulationSpec method.
            <code>
            'Define pipe branch feature.
            Dim oPipeBranchFeat As PipeBranchFeature = Nothing
            'Define input arguments.
            Dim oPipeInsulationSpec As PipeInsulationSpec = Nothing        
            'Call SetInsulationSpec.
            oPipeBranchFeat.SetInsulationSpec(oPipeInsulationSpec)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeBranchFeature.SetInsulationSpec(Ingr.SP3D.ReferenceData.Middle.PipeInsulationSpec,System.Double)">
            <summary>
            Assigns the insulation specification to the feature. The insulation temperature will be validated and set on the feature.
            </summary>
            <param name="PipeInsulationSpec">Insulation specification object to set.</param>
            <param name="InsulationTemperature">Insulation temperature value to set.</param>
            <example>This example explains how to call the SetInsulationSpec method.
            <code>
            'Define pipe branch feature.
            Dim oPipeBranchFeat As PipeBranchFeature = Nothing
            'Define input arguments.
            Dim oPipeInsulationSpec As PipeInsulationSpec = Nothing
            Dim dInsulationTemperature As Double = 273.0
            'Call SetInsulationSpec.
            oPipeBranchFeat.SetInsulationSpec(oPipeInsulationSpec, dInsulationTemperature)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeBranchFeature.SetUserDefinedInsulation(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Sets the user-defined insulation.
            </summary>
            <param name="iPurpose">Purpose of the insulation.</param>
            <param name="iMaterial">Insulation material.</param>
            <param name="dThickness">Thickness of insulation.</param>
            <param name="dTemperature">Temperature rating of the insulation.</param>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteIncorrectPurposeCodeException">The lPurpose argument is a value that is not in the InsulationPurpose codelist.</exception>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteIncorrectMaterialCodeException">The lMaterial argument is a value that is not in the InsulationMaterial codelist.</exception>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteInvalidInsulationThickessException">The value for dThickness is not defined for the given InsulationMaterial code. </exception>
            <example> This example shows how to set user-defined insulation on PipeTurnFeature.
            <code>
            'Declare the required variables. 
            Dim oPipeFeature As PipeTurnFeature = Nothing
            Dim iPurpose As Int32
            Dim iMaterial As Int32
            Dim dThickness As Double
            Dim dTemperature As Double
            ' Set user-defined insulation on PipeTurnFeature. 
            oPipeFeature.SetUserDefinedInsulation(iPurpose, iMaterial, dThickness, dTemperature)
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeBranchFeature.ShortCode">
            <summary>
             Gets or sets the Short Code property.
             This property is shown as "Type" in TaskHost ribbon bar.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeBranchFeature.InsulationSpec">
            <summary>
             Gets the Insulation Specification property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeBranchFeature.MultiSizeOption">
            <summary>
            Gets or sets the MultiSizeOption property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeBranchFeature.Tag">
            <summary>
            Gets or sets the Tag property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeBranchFeature.NPD">
            <summary>
            Gets or sets the NPD (nominal pipe diameter) property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeBranchFeature.OptionCode">
            <summary>
            Gets or sets the Option Code property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeBranchFeature.OuterDiameter">
            <summary>
            Gets or sets the Outer Diameter property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeBranchFeature.DefaultShortCode">
            <summary>
            Gets or sets the Default Short Code property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeBranchFeature.InsulationPurpose">
            <summary>
            Gets the Insulation Purpose property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeBranchFeature.InsulationMaterial">
            <summary>
            Gets the Insulation Material property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeBranchFeature.InsulationThickness">
            <summary>
            Gets the Insulation Thickness property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeBranchFeature.InsulationTemperature">
            <summary>
            Gets the Insulation Temperature property. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.DuctSurfaceMountFeature">
            <summary>
            Wrapper class for DuctSurfaceMount feature.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctSurfaceMountFeature.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the DuctSurfaceMountFeature base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctSurfaceMountFeature.#ctor">
            <summary>
            Public constructor for the DuctSurfaceMountFeature base class
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctSurfaceMountFeature.Finalize">
            <summary>
            Destructor for the DuctSurfaceMountFeature base class
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctSurfaceMountFeature.MountReference">
            <summary>
            Gets or sets the MountReference property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctSurfaceMountFeature.MountOffset">
            <summary>
            Gets or sets the MountOffset property. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.DuctAlongLegTransitionFeature">
            <summary>
            Wrapper class for Route class DuctAlongLegTransitionFeature.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctAlongLegTransitionFeature.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the DuctAlongLegTransitionFeature base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctAlongLegTransitionFeature.#ctor">
            <summary>
            Public constructor for the DuctAlongLegTransitionFeature base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctAlongLegTransitionFeature.Finalize">
            <summary>
            Destructor for the DuctAlongLegTransitionFeature base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctAlongLegTransitionFeature.SetUserDefinedInsulation(System.Int32,System.Double)">
            <summary>
            Sets the user-defined insulation.
            </summary>
            <param name="iMaterial">Insulation material.</param>
            <param name="dThickness">Thickness of insulation.</param>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteIncorrectMaterialCodeException">The lMaterial argument is a value that is not in the InsulationMaterial codelist.</exception>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteInvalidInsulationThickessException">The value for dThickness is not defined for the given InsulationMaterial code. </exception>
            <example> This example shows how to set user-defined insulation on DuctAlongLegTransitionFeature.
            <code>
            'Declare the required variables. 
            Dim oDuctFeature As DuctAlongLegTransitionFeature = Nothing
            Dim iMaterial As Int32
            Dim dThickness As Double
            ' Set user-defined insulation on DuctAlongLegTransitionFeature. 
            oDuctFeature.SetUserDefinedInsulation(iMaterial, dThickness)
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctAlongLegTransitionFeature.TransitionLength">
            <summary>
            Gets or sets TransitionLength property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctAlongLegTransitionFeature.AlignCode">
            <summary>
            Gets or sets AlignCode property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctAlongLegTransitionFeature.TransitionType">
            <summary>
            Gets or sets TransitionType property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctAlongLegTransitionFeature.WallThickness">
            <summary>
            Gets or sets the WallThickness property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctAlongLegTransitionFeature.InsulationMaterial">
            <summary>
            Gets InsulationMaterial property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctAlongLegTransitionFeature.InsulationThickness">
            <summary>
            Gets InsulationThickness property. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.CablewayAlongLegTransitionFeature">
            <summary>
            Wrapper class for Route class CablewayAlongLegTransitionFeature.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.CablewayAlongLegTransitionFeature.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the CablewayAlongLegTransitionFeature base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.CablewayAlongLegTransitionFeature.#ctor">
            <summary>
            Public constructor for the CablewayAlongLegTransitionFeature base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.CablewayAlongLegTransitionFeature.Finalize">
            <summary>
            Destructor for the CablewayAlongLegTransitionFeature base class.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CablewayAlongLegTransitionFeature.TransitionLength">
            <summary>
            Gets or sets TransitionLength property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CablewayAlongLegTransitionFeature.AlignCode">
            <summary>
            Gets or sets AlignCode property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CablewayAlongLegTransitionFeature.TransitionType">
            <summary>
            Gets or sets TransitionType property. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.Services.RteResourceIDs">
            <summary>
            Summary description for RteResourceIDs
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.Services.RteResourceIDs.RteCannotConvertBasePartToMatingPart">
            <summary>
             This exception is thrown when the User tries to change a BasePart to a Mating part as this is not allowed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.Services.RteResourceIDs.RteInvalidShortCode">
            <summary>
            Exception thrown when there is no Feature Type defined for the ShortCode. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.Services.RteResourceIDs.RteInvalidNominalDiameter">
            <summary>
            Exception thrown when the given NPD is invalid for the Spec
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.Services.RteResourceIDs.RteFailedToGetFeatureFromPart">
            <summary>
            Exception thrown when we are unable to get Features associated with part.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.Services.RteResourceIDs.RteFailedToGetInsulationThickness">
            <summary>
            Exception thrown when insulation thickness is bot defined
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.Services.RteResourceIDs.RteInvalidObjectType">
            <summary>
            Passed in Object does not support the required Interface.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.Services.RteResourceIDs.RteFailedToGetMaterial">
            <summary>
            Unable to get Material data for the given Specification.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.Services.RteResourceIDs.RteIncorrectPurposeCodeException">
            <summary>
             Exception thrown when The passed in InsulationPurpose value is not in the InsulationPurpose codelist.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.Services.RteResourceIDs.RteIncorrectMaterialCodeException">
            <summary>
            Exception thrown when The passed in InsulationMaterial value is not in the InsulationMaterial codelist.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.Services.RteResourceIDs.RteMismatchInFeatureAndTapLoacation">
            <summary>
            The exception is raised when Tap Location is not on the Feature to Tap.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.Services.RteResourceIDs.RteInvalidTapNumber">
            <summary>
            The passed in Tap Number is not defined in the catalog for the spec of the Feature to be tapped.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.Services.RteResourceIDs.RteInvalidTapDirection">
            <summary>
             Tap direction cannot be parallel if the feature is not a Turn or an End Leg component. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.Services.RteResourceIDs.RteInvalidSpecException">
            <summary>
             Invalid Specification, No specification exists for the given Spec Name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.Services.RteResourceIDs.RteInvalidParentException">
            <summary>
             Invalid Parent Exception
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.Services.RteResourceIDs.DEFAULT_RESOURCE">
            <summary>
            Route localizer Resource.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.Services.RteResourceIDs.DEFAULT_ASSEMBLY">
            <summary>
            Route localizer Assembly.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.Services.RteResourceIDs.RteInvalidTransitionCrossSection">
            <summary>
            Exception is thrown when Transition cross section and selected end feature cross section are same.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.Services.RteResourceIDs.RteMoreThanOnePlateException">
            <summary>
            The number of Penetration Parts connected to a pipe is greater than one. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.Services.RteResourceIDs.RtePlateNotConnectedToPipeException">
            <summary>
            No connection exists between the Penetration Part and the Pipe.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.Services.RteResourceIDs.RteInvalidSpoolingTypeException">
            <summary>
            Wrong combination of Spoolable Object and SpoolingType.   
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.Services.RteResourceIDs.RteNoSubSpoolsException">
            <summary>
            Number of sub spools created is zero.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.Services.RteResourceIDs.RteEmptySpoolableObjectException">
            <summary>
            The passed in Spoolable Object has no parts under it.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.Services.RteResourceIDs.RteInvalidInsulationThickessException">
            <summary>
            This exception is thrown when SetUserDefinedInsulation is called with a thickenss
            which is not defined for the given insualtion material code.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.Services.RteResourceIDs.RteInvalidMinimumSlope">
            <summary>
            This exception is thrown when the minimum slope value is not valid for the given slope direction.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.Services.RteResourceIDs.RteCannotSetPropertiesonStockPorts">
            <summary>
            This exception is thrown when try to set properties on stock ports.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.Services.RteResourceIDs.RteCableRouteUndefinedOrIncomplete">
            <summary>
            This exception is thrown when cable route status is undefined or incomplete.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.Services.RteResourceIDs.RteSymbolUpdateFailed">
            <summary>
            This exception will be thrown when failed to update the symbol.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.Services.RteResourceIDs.RteNoInsulationThicknessFound">
            <summary>
            This exception will be thrown when Insulation thickness is not defined.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.Services.RteResourceIDs.RteCannotInsertFeatureIntoRun">
            <summary>
            This exception will be thrown when we cannot insert feature on the run
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.Services.RteResourceIDs.RteNoSpecFound">
            <summary>
            This exception will be thrown when there is no spec defined/found in catalog.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.Services.RteResourceIDs.RteNoInsulationSpec">
            <summary>
            This exception will be thrown when there is no insulation spec defined/found in catalog.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.Services.RteResourceIDs.RteNoMaterial">
            <summary>
            This exception will be thrown when material data is not found in catalog
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.Services.RteResourceIDs.RteNoInlineFeature">
            <summary>
            This exception will be thrown when Inline feature not found for given offline feature.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.Services.RteResourceIDs.RteNoInlineFeatureHasHeaderFeature">
            <summary>
            This exception will be thrown when Offline feature has relation to non-inline feature. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.Services.RteResourceIDs.RteNoMaterialDensity">
            <summary>
            This exception will be thrown when Material density not found in catalog.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.Services.RteResourceIDs.RteNoLineConstraint">
            <summary>
            This exception will be thrown when there is no line constraint.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.Services.RteResourceIDs.RteSymbolNotFound">
            <summary>
            This exception will be thrown when Symbol is not found in catalog
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.Services.RteResourceIDs.RteUnexpectedFailure">
            <summary>
            This exception will be thrown when there is Unexpected failure.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.RouteAPIHelper">
            <summary>
            RouteAPIHelper helper class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.IRouteAPI">
            <summary>
            Properties and methods common to all path runs.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteAPIHelper.#ctor(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Constructor for the RouteAPIHelper class.
            </summary>
            <param name="oRouteObject">Pointer to the route business object to be saved
            for use by the methods of this helper class.</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteAPIHelper.Finalize">
            <summary>
            Destructor for RouteAPIHelper class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteAPIHelper.RouteBetweenPortAndPort(Ingr.SP3D.Equipment.Middle.DistributionPort,Ingr.SP3D.Equipment.Middle.DistributionPort)">
            <summary>
            Routes from a port on the current run to a port on another run.
            </summary>
            <param name="oFromPort">Port on the current run.</param>
            <param name="oToPort">Port on another run.</param>
            <exception cref="T:System.ArgumentNullException">An input argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">An input argument
            is of the wrong type.</exception>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteAPIHelper.RouteBetweenPortAndBranch(Ingr.SP3D.Equipment.Middle.DistributionPort,Ingr.SP3D.Route.Middle.PipeStraightFeature,Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Routes from a port on the current run and a branch on another run.
            </summary>
            <param name="oPort">Port on the current run.</param>
            <param name="oPipeStraightFeature">Pipe straight feature at destination.</param>
            <param name="oBranchPosition">Position of branch on destination straight feature.</param>
            <exception cref="T:System.ArgumentNullException">An input argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">An input argument
             is of the wrong type.</exception>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteAPIHelper.RouteBetweenPortAndPoint(Ingr.SP3D.Equipment.Middle.DistributionPort,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.PipeEndFeature@)">
            <summary>
            Routes from a port on the current run to a point.
            </summary>
            <param name="oPort">Port on the current run.</param>
            <param name="oPosition">Destination point.</param>
            <param name="oPipeEndFeature">Pipe end feature created at the destination point.</param>
            <exception cref="T:System.ArgumentNullException">An input argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">An input argument
            is of the wrong type.</exception>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteAPIHelper.RouteBetweenPortAndEndFeature(Ingr.SP3D.Equipment.Middle.DistributionPort,Ingr.SP3D.Route.Middle.PipeEndFeature)">
            <summary>
            Routes from a port on the current run to an end feature on another run.
            </summary>
            <param name="oPort">Port on the current run.</param>
            <param name="oPipeEndFeature">Destination end feature on another run.</param>
            <exception cref="T:System.ArgumentNullException">An input argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">An input argument
             is of the wrong type.</exception>        
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteAPIHelper.RouteBetweenBranchAndBranch(Ingr.SP3D.Route.Middle.PipeStraightFeature,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.PipeStraightFeature,Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Routes between a branch on the current run to a branch on another run.
            </summary>
            <param name="oFromPipeStraightFeature">The straight feature on the current run
            that will be branched.</param>
            <param name="oBranchFromPosition">The location at which the branch on the current run
            will be created.</param>
            <param name="oToPipeStraightFeature">The destination straight feature.</param>
            <param name="oBranchToPosition">The location at which to create the branch on
            the destination straight feature.</param>
            <exception cref="T:System.ArgumentNullException">An input argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">An input argument
            is of the wrong type.</exception>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteAPIHelper.RouteBetweenBranchAndPoint(Ingr.SP3D.Route.Middle.PipeStraightFeature,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.PipeEndFeature@)">
            <summary>
            Routes between a branch on the current run and a point.
            </summary>
            <param name="oPipeStraightFeature">The straight feature on the current run that will
            be branched.</param>
            <param name="oBranchPosition">The location at which the branch on the current run will
            be created.</param>
            <param name="oPosition">The destination position.</param>
            <exception cref="T:System.ArgumentNullException">An input argument is null.</exception>
            <param name="oPipeEndFeature">The end feature created at the end of the new branch.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">An input argument
            is of the wrong type.</exception>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteAPIHelper.RouteBetweenBranchAndEndFeature(Ingr.SP3D.Route.Middle.PipeStraightFeature,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.PipeEndFeature)">
            <summary>
            Routes between a branch and an end feature on another run.
            </summary>
            <param name="oPipeStraightFeature">The straight feature on the current run that will
            be branched.</param>
            <param name="oBranchPosition">The location at which the branch on the current run will
            be created.</param>
            <param name="oPipeEndFeature">The end feature to which the new branch will be routed.</param>
            <exception cref="T:System.ArgumentNullException">An input argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">An input argument
            is of the wrong type.</exception>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteAPIHelper.RouteBetweenEndFeatureAndPoint(Ingr.SP3D.Route.Middle.PipeEndFeature,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.PipeEndFeature@)">
            <summary>
            Routes from an end feature on the current run to a point.
            </summary>        
            <param name="oPipeEndFeature">Pipe end feature at which the leg is to start.</param>
            <param name="oPosition">Position at which the leg is to end.</param>
            <param name="oNewPipeEndFeature">Newly created pipe end feature at the given position.</param>
            <exception cref="T:System.ArgumentNullException">An input argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">An input argument
            is of the wrong type.</exception>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteAPIHelper.RouteBetweenPointAndPoint(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.PipeEndFeature@)">
            <summary>
            Routes from a point on the current run to another point.
            </summary>
            <param name="oFromPosition">The point on the current run from which the leg is to start.</param>
            <param name="oToPosition">The point to which the leg is to be routed.</param>
            <param name="oPipeEndFeature">The new end feature at the end of the new leg.</param>
            <exception cref="T:System.ArgumentNullException">An input argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">An input argument
            is of the wrong type.</exception>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteAPIHelper.RouteBetweenEndFeatureAndEndFeature(Ingr.SP3D.Route.Middle.PipeEndFeature,Ingr.SP3D.Route.Middle.PipeEndFeature)">
            <summary>
            Routes from an end feature on the current run to an end feature on another run.
            </summary>
            <param name="oFromPipeEndFeature">End feature on the current run from which the leg
            is to start.</param>
            <param name="oToPipeEndFeature">End feature on another run to which the leg is to
            be routed.</param>
            <exception cref="T:System.ArgumentNullException">An input argument is null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteAPIHelper.InsertFeatureByShortCodeOnFeature(System.String,System.Int32,System.String,Ingr.SP3D.Route.Middle.RouteFeature,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.RouteRun,Ingr.SP3D.Route.Middle.RouteFeature@)">
            <summary>
            Inserts a feature identified by its short code.
            </summary>
            <param name="sShortCode">Short code that identifies the feature to be inserted.</param>
            <param name="iOptionCode">Option code that further identifies the feature to be inserted.</param>
            <param name="sMultiSize">Multi-size string that further identifies multi-size feature to be inserted.</param>
            <param name="oInsertOnFeature">Target feature onto which feature is being inserted.</param>
            <param name="oInsertAtPos">Insertion position.</param>
            <param name="oSecondaryRun">Input - secondary run, required if inserting a branch or a run change.</param>
            <param name="oInsertedFeature">Output - feature that was inserted.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">An input argument
            is null, or a business object is of the wrong type.</exception>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteAPIHelper.InsertFeatureByShortCodeOnPort(System.String,System.Int32,System.String,Ingr.SP3D.Equipment.Middle.DistributionPort,Ingr.SP3D.Route.Middle.RouteRun,Ingr.SP3D.Route.Middle.RouteFeature@)">
            <summary>
            Inserts a feature on a port. The feature is identified by its short code.
            </summary>
            <param name="sShortCode">Short code that identifies the feature to be inserted.</param>
            <param name="iOptionCode">Option code that further identifies the feature to be inserted.</param>
            <param name="sMultiSize">Multi-size string that further identifies the multi-size feature to be inserted.</param>
            <param name="oInsertOnPort">Port onto which the feature is to be inserted.</param>
            <param name="oSecondaryRun">Input - secondary run, required if inserting a branch or a run change.</param>
            <param name="oInsertedFeature">Output - feature that was inserted.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">An input argument
            is null, or a business object is of the wrong type.</exception>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteAPIHelper.InsertFeatureByPartOnFeature(Ingr.SP3D.ReferenceData.Middle.Part,Ingr.SP3D.Route.Middle.RouteFeature,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.RouteRun,Ingr.SP3D.Route.Middle.RouteFeature@)">
            <summary>
            Inserts a feature on another feature.  The feature to be inserted is
            identified by its catalog part.
            </summary>
            <param name="oCatalogPart">Catalog name of the part being inserted.</param>
            <param name="oInsertOnFeature">Target feature onto which the feature is to be inserted.</param>
            <param name="oInsertAtPos">Insertion position.</param>
            <param name="oSecondaryRun">Secondary run - required if inserting a branch or a run change.</param>
            <param name="oInsertedFeature">Output - feature that was inserted.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">An input argument
            is null, or an business object is of the wrong type.</exception>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteAPIHelper.InsertFeatureByPartOnPort(Ingr.SP3D.ReferenceData.Middle.Part,Ingr.SP3D.Equipment.Middle.DistributionPort,Ingr.SP3D.Route.Middle.RouteRun,Ingr.SP3D.Route.Middle.RouteFeature@)">
            <summary>
            Inserts a feature on a port.  The feature is identified by its catalog part.
            </summary>
            <param name="oCatalogPart">Catalog name of the part being inserted.</param>
            <param name="oInsertOnPort">Port onto which the feature is to be inserted.</param>
            <param name="oSecondaryRun">Secondary run, required if inserting a branch or a run change.</param>
            <param name="oInsertedFeature">Output - feature that was inserted.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">An input argument
            is null, or an business object is of the wrong type.</exception>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteAPIHelper.InsertFeatureByTagOnFeature(System.String,System.String,Ingr.SP3D.Route.Middle.RouteFeature,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.RouteRun,Ingr.SP3D.Route.Middle.RouteFeature@)">
            <summary>
            Inserts a feature on another feature.  The feature to be inserted is
            identified by its tag.
            </summary>
            <param name="sTag">Tag that identifies feature to be inserted.</param>
            <param name="sMultiSize">Multi-size string that further identifies the multi-size feature to be inserted.</param>
            <param name="oInsertOnFeature">Target feature onto which feature is being inserted.</param>
            <param name="oInsertAtPos">Insertion position.</param>
            <param name="oSecondaryRun">Input - secondary run, required if inserting a branch or a run change.</param>
            <param name="oInsertedFeature">Output - feature that was inserted.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">An input argument
            is null, or a business object is of the wrong type.</exception>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteAPIHelper.InsertFeatureByTagOnPort(System.String,System.String,Ingr.SP3D.Equipment.Middle.DistributionPort,Ingr.SP3D.Route.Middle.RouteRun,Ingr.SP3D.Route.Middle.RouteFeature@)">
            <summary>
            Inserts a feature on a port.  The feature to be inserted is identified by
            its tag.
            </summary>
            <param name="sTag">Tag that identifies the feature to be inserted.</param>
            <param name="sMultiSize">Multi-size string that further identifies the multi-size feature to be inserted.</param>
            <param name="oInsertOnPort">Port onto which the feature is to be inserted.</param>
            <param name="oSecondaryRun">Input - secondary run, required if inserting a branch or a run change.</param>
            <param name="oInsertedFeature">Output - feature that was inserted.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">An input argument
            is null, or a business object is of the wrong type.</exception>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteAPIHelper.InsertBranchFeatureByShortCodeOrTagOnComponent(System.String,System.Int32,System.String,System.String,Ingr.SP3D.Route.Middle.RteObjectCategoryType,Ingr.SP3D.Route.Middle.RoutePart,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.RouteRun,Ingr.SP3D.Route.Middle.RouteFeature@)">
            <summary>
            Inserts a feature identified by its short code.
            </summary>
            <param name="sShortCode">Short code that identifies the feature to be inserted.</param>
            <param name="iOptionCode">Option code that further identifies the feature to be inserted.</param>
            <param name="sMultiSize">Multi-size string that further identifies multi-size feature to be inserted.</param>
            <param name="sTag">Tag that identifies feature to be inserted.</param>
            <param name="oCategoryType">Defines the type of the object</param>
            <param name="oInsertOnPart">Target feature onto which feature is being inserted.</param>
            <param name="oInsertAtPos">Insertion position.</param>
            <param name="oSecondaryRun">Input - secondary run, required if inserting a branch or a run change.</param>
            <param name="oInsertedFeature">Output - feature that was inserted.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">An input argument
            is null, or a business object is of the wrong type.</exception>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteAPIHelper.InsertBranchFeatureByShortCodeOrTagOnTapPort(System.String,System.Int32,System.String,System.String,Ingr.SP3D.Route.Middle.RteObjectCategoryType,Ingr.SP3D.Route.Middle.RouteFeature,Ingr.SP3D.Route.Middle.PipeTapFeature,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.RouteRun,Ingr.SP3D.Route.Middle.RouteFeature@)">
            <summary>
            Inserts a feature identified by its short code on Tap Port.
            </summary>
            <param name="sShortCode">Short code that identifies the feature to be inserted.</param>
            <param name="iOptionCode">Option code that further identifies the feature to be inserted.</param>
            <param name="sMultiSize">Multi-size string that further identifies multi-size feature to be inserted.</param>
            <param name="sTag">Tag that identifies feature to be inserted.</param>
            <param name="oCategoryType">Defines the type of the object</param>
            <param name="oInsertOnFeature">Target feature onto which feature is being inserted.i.e. Tapped Feature.</param>
            <param name="oTapFeat">Tap Feature on which we place a component.</param>
            <param name="oInsertAtPos">Insertion position.</param>
            <param name="oSecondaryRun">Input - secondary run, required if inserting a branch or a run change.</param>
            <param name="oInsertedFeature">Output - feature that was inserted.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">An input argument
            is null, or a business object is of the wrong type.</exception>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteAPIHelper.InsertSplitFeature(System.String,System.Int32,Ingr.SP3D.Route.Middle.SplitTypes,Ingr.SP3D.Route.Middle.PipeStraightFeature,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.RouteFeature@)">
            <summary>
            Inserts a split feature.
            </summary>
            <param name="sShortCode">Short code that identifies the split feature to be inserted.</param>
            <param name="iOptionCode">Option code that further identifies the split feature to be inserted.</param>
            <param name="eSplitType">Split type.</param>
            <param name="oInsertOnObj">Object onto which the feature is to be inserted.</param>
            <param name="oInsertAtPos">Insertion position.</param>
            <param name="oInsertedFeature">Output: Feature that was inserted.</param>
            <exception cref="T:System.ArgumentNullException">An input argument is null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteAPIHelper.IsEquipmentPort(Ingr.SP3D.Equipment.Middle.DistributionPort)">
            <summary>
            IsEquipmentPort
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteAPIHelper.IsOfflinePort(Ingr.SP3D.Equipment.Middle.DistributionPort)">
            <summary>
            IsOfflinePort
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteAPIHelper.GetEndFeatureFromPort(Ingr.SP3D.Equipment.Middle.DistributionPort,Ingr.SP3D.Route.Middle.Services.RouteCrossSection)">
            <summary>
            Returns end feature adjacent to port in case of inlineport.
            If passed in port is offline port,creates pathleg then returns the newly created endfeature.
            </summary>        
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.RouteAPIHelper.InsulationSpec">
            <summary>
            Gets the insulation specification assigned to the run property.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.PipeRun">
            <summary>
            PipeRun is the .NET wrapper class for pipe run objects.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeRun.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private business object wrapper constructor for pipe runs.
            </summary>
            <param name="oBOP">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeRun.#ctor(Ingr.SP3D.Systems.Middle.Pipeline,System.Double,System.String,Ingr.SP3D.ReferenceData.Middle.PipeSpec)">
            <summary>
            Constructor for the pipe run wrapper class.
            The preferred method is to use a constructor which takes NominalDiamter as input rather than this constructor. 
            </summary>
            <param name="oPipelineSystem">Parent pipeline system.</param>
            <param name="dNPD">Nominal pipe diameter of the new pipe run.</param>
            <param name="sNPDUnitType">Nominal pipe diameter unit type of the new pipe run.</param>
            <param name="oPipeSpec">Piping specification of the new pipe run.</param>
            <exception cref="T:System.ArgumentNullException">Cannot set a null value.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">The argument is not valid.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSupportsInterfaceException">Argument does not support the required interface.</exception>        
            <example>Explains how to call the PipeRun constructor.
            <code>                
            'Define input arguments.
            Dim oPipeLine As Pipeline = Nothing
            Dim dNPD As Double = 4.0
            Dim sNPDUnitType As String = "in"
            Dim oPipeSpec As PipeSpec = Nothing
            'Call pipe run constructor to create pipe run.
            Dim oPipeRun = New PipeRun(oPipeLine, dNPD, sNPDUnitType, oPipeSpec)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeRun.#ctor(Ingr.SP3D.Route.Middle.PipeRun)">
            <summary>
            Pipe run copy constructor.
            </summary>
            <param name="oPipeRun">PipeRun object.</param>
            <exception cref="T:System.ArgumentNullException">Cannot set a null value.</exception>
            <example>Explains how to call PipeRun copy constructor.
            <code>
            'Define input arguments.       
            Dim oPipeRun As PipeRun = Nothing
            'Call PipeRun copy constructor to create pipe run from another run.
            Dim oPipeRun2 = New PipeRun(oPipeRun)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeRun.#ctor(Ingr.SP3D.Systems.Middle.Pipeline,System.Double,System.String,System.String)">
            <summary>
            Public constructor for the pipe run wrapper class.
            </summary>
            <param name="oPipelineSystem">Parent of the new pipe run.</param>
            <param name="dNPDSize">Nominal diameter size of the new pipe run.</param>
            <param name="sNPDUnits">Nominal diameter unit type of the new pipe run.</param>
            <param name="sPipeSpecName">Name of the pipe specification for the new pipe run.</param>
            <exception cref="T:System.ArgumentNullException">Cannot set a null value.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">The argument is invalid.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSupportsInterfaceException">The argument does not support the required interface.</exception>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteInvalidSpecException">A specification does not exist for the given specification name.</exception>
            <example>Explains how to call the PipeRun constructor.
            <code>                
            'Define input arguments.
            Dim oPipeLine As Pipeline = Nothing
            Dim dNPD As Double = 4.0
            Dim sNPDUnitType As String = "in"
            Dim sPipeSpecName As String = ""
            'Call PipeRun constructor to create pipe run.
            Dim oPipeRun = New PipeRun(oPipeLine, dNPD, sNPDUnitType, sPipeSpecName)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeRun.#ctor(Ingr.SP3D.Systems.Middle.Pipeline,Ingr.SP3D.Common.Middle.Services.NominalDiameter,Ingr.SP3D.ReferenceData.Middle.PipeSpec)">
            <summary>
            Public constructor for the pipe run wrapper class.
            </summary>
            <param name="oPipelineSystem">Parent of the new pipe run.</param>
            <param name="oNominalDiameter">Nominal diameter of the new pipe run.</param>
            <param name="oPipeSpec">Piping specification of new pipe run.</param>
            <exception cref="T:System.ArgumentNullException">Cannot set a null value.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">The argument is invalid.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSupportsInterfaceException">The argument does not support the required interface.</exception>
            <example>This example shows how to create a pipe run for a given NPD and PipeSpec.
            <code>
            'Create the Pipe run.
            Dim oPipeRun As PipeRun
            'Create nominal diameter and define its size and units properties of the pipe run to be placed.
            Dim oNPD As New NominalDiameter
            oNPD.Size=8
            oNPD.Units="in"
            'Define Pipeline system under which the pipe run has to be created.
            Dim oPipeline As Pipeline = Nothing 'Need to create the pipeline.
            'Define pipe spec for the pipe run to be created.
            Dim oPipeSpec As Pipespec = Nothing ' Need to get the required pipe spec from the list of allowable specs.
            'Call PipeRun constructor which takes system parent, NPD, and pipe spec as arguments to create pipe run.
            oPipeRun = New PipeRun(oPipeline, oNPD, oPipeSpec)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeRun.#ctor(Ingr.SP3D.Systems.Middle.Pipeline,Ingr.SP3D.Common.Middle.Services.NominalDiameter,Ingr.SP3D.ReferenceData.Middle.PipeSpec,Ingr.SP3D.Route.Middle.SlopeDirectionTypes,System.Double)">
            <summary>
            Public constructor for the pipe run wrapper class.
            </summary>
            <param name="oPipelineSystem">Parent of the new pipe run.</param>
            <param name="oNominalDiameter">Nominal diameter of the new pipe run.</param>
            <param name="oPipeSpecification">Pipe specification for the new pipe run.</param>
            <param name="eSlopeDirection">Slope direction of the new pipe run.</param>
            <param name="dMinimumSlope">Minimum slope of the new pipe run.</param>
            <exception cref="T:System.ArgumentNullException">Cannot set a null value.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">The argument is not valid.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSupportsInterfaceException">The argument does not support the required interface.</exception>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteInvalidSpecException">No specification exists for the given specification name.</exception>
            <example>This example shows how to create a pipe run for a given nominal diameter, pipe specification, slope direction, and minimum slope.
            <code>
            'Create the pipe run.
            Dim oPipeRun As PipeRun
            'Create Nominal Diameter and define its Size and Units properties of the pipe run to be placed.
            Dim oNPD As New NominalDiameter
            oNPD.Size=8
            oNPD.Units="in"
            'Define Pipeline system under which the pipe run has to be created.
            Dim oPipeline As Pipeline = Nothing 'Need to create the pipeline.
            'Define pipe spec for the pipe run to be created.
            Dim oPipeSpec As Pipespec = Nothing ' Need to get the required pipe spec from the list of allowable specs.
            'Call PipeRun constructor which takes system parent, NPD, and pipe spec as arguments to create pipe run.
            oPipeRun = New PipeRun(oPipeline, oNPD, oPipeSpec,SlopeDirectionTypes.Multiple,0.01 )
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeRun.Finalize">
            <summary>
            Destructor for the PipeRun wrapper class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeRun.CreatePipeRun(Ingr.SP3D.Systems.Middle.Pipeline,System.Double,System.String,Ingr.SP3D.ReferenceData.Middle.PipeSpec)">
            <summary>
            Creates a new PipeRun
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeRun.SetUserDefinedInsulation(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Sets the user-defined insulation.
            </summary>
            <param name="iPurpose">Purpose of the insulation.</param>
            <param name="iMaterial">Insulation material.</param>
            <param name="dThickness">Thickness of insulation.</param>
            <param name="dTemperature">Temperature rating of the insulation.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">An input argument
            is null or is an business object of the wrong type.</exception>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteIncorrectPurposeCodeException">The lPurpose
            argument is a value that is not in the InsulationPurpose codelist.</exception>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteIncorrectMaterialCodeException">The lMaterial
            argument is a value that is not in the InsulationMaterial codelist.</exception>
            <example>Expalins about how to call 'SetUserDefinedInsulation' method.
            <code>
            'Define pipe run
            Dim oPipeRun As PipeRun = Nothing
            'Define input arguments
            Dim iPurpose As Integer
            Dim iMaterial As Integer
            Dim dThickness As Double
            Dim dTemperature As Double
            'Call 'SetUserDefinedInsulation' method.
            oPipeRun.SetUserDefinedInsulation(iPurpose, iMaterial, dThickness, dTemperature)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeRun.SetInsulationSpec(Ingr.SP3D.ReferenceData.Middle.PipeInsulationSpec)">
            <summary>
            Assigns the insulation specification to the run. This method validates the insulation temperature on the run  
            before setting the insulation specification.
            </summary>
            <param name="PipeInsulationSpec">Pipe insulation specification object to set.</param>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteFailedToGetInsulationThickness">Failed to get insulation thickness information based on the pipe run nominal pipe diameter and temperature.</exception>
            <example>Explains how to call the SetInsulationSpec method.
            <code>
            'Define pipe run.
            Dim oPipeRun As PipeRun = Nothing
            'Define input arguments.
            Dim oPipeInsulationSpec As PipeInsulationSpec = Nothing
            'Call SetInsulationSpec method.
            oPipeRun.SetInsulationSpec(oPipeInsulationSpec)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeRun.SetInsulationSpec(Ingr.SP3D.ReferenceData.Middle.PipeInsulationSpec,System.Double)">
            <summary>
            Assigns the insulation specification to the run. This method validates the insulation temperature before setting on the run.
            </summary>
            <param name="PipeInsulationSpec">Pipe insulation specification object.</param>
            <param name="InsulationTemperature">Pipe insulation temperature.</param>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteFailedToGetInsulationThickness">Failed to get insulation thickness information based on the pipe run nominal pipe diameter and temperature.</exception>
            <example>Explains how to call the SetInsulationSpec method.
            <code>
            'Define pipe run.
            Dim oPipeRun As PipeRun = Nothing
            'Define input arguments.
            Dim oPipeInsulationSpec As PipeInsulationSpec = Nothing
            Dim dTemperature As Double = 290
            'Call SetInsulationSpec method.
            oPipeRun.SetInsulationSpec(oPipeInsulationSpec, dTemperature)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeRun.InsertSplitFeature(System.String,System.Int32,Ingr.SP3D.Route.Middle.SplitTypes,Ingr.SP3D.Route.Middle.PipeStraightFeature,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.RouteFeature@)">
            <summary>        
            Inserts a split feature.        
            </summary>
            <param name="sShortCode">Short code of the feature.</param>
            <param name="iOptionCode">Option code of the feature.</param>
            <param name="eSplitType">Split type.</param>
            <param name="oInsertOnObj">The object on which the split feature must be inserted.</param>
            <param name="oInsertAtPos">The location at which spilt feature must be inserted.</param>
            <param name="oInsertedFeature">The inserted split feature.</param>
            <exception cref="T:System.ArgumentNullException">An input argument is null.</exception>
            <example>This example explains how to call InsertSplitFeature method.
            <code>
            'Define pipe run.
            Dim oPipeRun As PipeRun = Nothing
            'Define input arguments.
            Dim sShortCode As String = ""
            Dim iOptionCode As Integer
            Dim sMultiSize As String = ""
            Dim oInsertOnFeat As PipeStraightFeature = Nothing
            Dim oInsertAtPos As Position = Nothing
            Dim oInsertedFeat As RouteFeature = Nothing
            'Call InsertSplitFeature method.
            oPipeRun.InsertSplitFeature(sShortCode, iOptionCode, sMultiSize, oInsertOnFeat, oInsertAtPos, oInsertedFeat)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeRun.InsertFeatureByShortCodeOnFeature(System.String,System.Int32,System.String,Ingr.SP3D.Route.Middle.RouteFeature,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.RouteRun,Ingr.SP3D.Route.Middle.RouteFeature@)">
            <summary>
            Inserts a feature identified by its short code.
            </summary>        
            <param name="sShortCode">Short code of the feature.</param>
            <param name="iOptionCode">Option code of the feature.</param>
            <param name="sMultiSize">Size of the feature to be inserted from the available multiple sizes.</param>
            <param name="oInsertOnFeature">Feature on which a feature must be inserted.</param>
            <param name="oInsertAtPos">The location at which the feature must be inserted.</param>
            <param name="oSecondaryRun">Secondary run.</param>
            <param name="oInsertedFeature">The inserted feature.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">An input argument
            is null or a business object is of the wrong type.</exception>
            <example>This example explains how to call the InsertFeatureByShortCodeOnFeature method.
            <code>
            'Define pipe run.
            Dim oPipeRun As PipeRun = Nothing
            'Define input arguments.
            Dim sShortCode As String = ""   'e.g., 'Tee'
            Dim iOptionCode As Integer
            Dim sMultiSize As String = ""
            Dim oInsertOnFeat As RouteFeature = Nothing
            Dim oInsertAtPos As Position = Nothing
            Dim oSecondaryRun As RouteRun = Nothing
            Dim oInsertedFeat As RouteFeature = Nothing
            'Call InsertFeatureByShortCodeOnFeature method.
            oPipeRun.InsertFeatureByShortCodeOnFeature(sShortCode, iOptionCode, sMultiSize, oInsertOnFeat, oInsertAtPos, oSecondaryRun, oInsertedFeat)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeRun.InsertFeatureByShortCodeOnPort(System.String,System.Int32,System.String,Ingr.SP3D.Equipment.Middle.DistributionPort,Ingr.SP3D.Route.Middle.RouteRun,Ingr.SP3D.Route.Middle.RouteFeature@)">
            <summary>
            Inserts a feature on a port.  The feature is identified by its short code.        
            </summary>
            <param name="sShortCode">Short code of the feature.</param>
            <param name="iOptionCode">Option code of the feature.</param>
            <param name="sMultiSize">Size of the feature to be inserted from the available multiple sizes.</param>
            <param name="oInsertOnPort">Port on which a feature must be inserted.</param>
            <param name="oSecondaryRun">Secondary run.</param>
            <param name="oInsertedFeature">The inserted feature.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">An input argument
            is null or a business object is of the wrong type.</exception>
            <example>This example explains how to call the InsertFeatureByShortCodeOnPort method.
            <code>
            'Define pipe run.
            Dim oPipeRun As PipeRun = Nothing
            'Define input arguments.
            Dim sShortCode As String = ""   'example 'Tee'
            Dim iOptionCode As Integer
            Dim sMultiSize As String = ""
            Dim oInsertOnPort As DistributionPort = Nothing
            Dim oSecondaryRun As RouteRun = Nothing
            Dim oInsertedFeat As RouteFeature = Nothing
            'Call InsertFeatureByShortCodeOnPort method.
            oPipeRun.InsertFeatureByShortCodeOnPort(sShortCode, iOptionCode, sMultiSize, oInsertOnPort, oSecondaryRun, oInsertedFeat)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeRun.InsertFeatureByPartOnFeature(Ingr.SP3D.ReferenceData.Middle.Part,Ingr.SP3D.Route.Middle.RouteFeature,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.RouteRun,Ingr.SP3D.Route.Middle.RouteFeature@)">
            <summary>
            Inserts a feature on another feature.  The feature to be inserted is
            identified by its catalog part.
            </summary>
            <param name="oCatalogPart">Catalog part.</param>
            <param name="oInsertOnFeature">Feature on which to insert a feature.</param>
            <param name="oInsertAtPos">Inserting feature position.</param>
            <param name="oSecondaryRun">New run for run change components.</param>
            <param name="oInsertedFeature">Inserted feature.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">An input argument
            is null or a business object is of the wrong type.</exception>
            <example>This example explains how to call the InsertFeatureByPartOnFeature method.
            <code>
            'Define pipe run.
            Dim oPipeRun As PipeRun = Nothing
            'Define input arguments.
            Dim oPart As Part = Nothing
            Dim oInsertOnFeat As RouteFeature = Nothing
            Dim oPosOnFeat As Position = Nothing
            Dim oSecondaryRun As RouteRun = Nothing
            Dim oInsertedFeat As RouteFeature = Nothing
            'Call InsertFeatureByPartOnFeature method.
            oPipeRun.InsertFeatureByPartOnFeature(oPart, oInsertOnFeat, oPosOnFeat, oSecondaryRun, oInsertedFeat)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeRun.InsertFeatureByPartOnPort(Ingr.SP3D.ReferenceData.Middle.Part,Ingr.SP3D.Equipment.Middle.DistributionPort,Ingr.SP3D.Route.Middle.RouteRun,Ingr.SP3D.Route.Middle.RouteFeature@)">
            <summary>
            Inserts a feature on a port.  The feature is identified by its catalog part.
            </summary>
            <param name="oCatalogPart">Catalog part.</param>
            <param name="oInsertOnPort">Distribution port on which to insert the feature.</param>
            <param name="oSecondaryRun">New piperun for run change components.</param>
            <param name="oInsertedFeature">Inserted feature.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">An input argument
            is null or a business object is of the wrong type.</exception>
            <example>This example explains how to call the InsertFeatureByPartOnPort method.
            <code>
            'Define pipe run.
            Dim oPipeRun As PipeRun = Nothing
            'Define input arguments.
            Dim oPart As Part = Nothing
            Dim oInsertOnPort As DistributionPort = Nothing
            Dim oSecondaryRun As RouteRun = Nothing
            Dim oInsertedFeat As RouteFeature = Nothing
            'Call InsertFeatureByPartOnPort method.
            oPipeRun.InsertFeatureByPartOnPort(oPart, oInsertOnPort, oSecondaryRun, oInsertedFeat)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeRun.InsertFeatureByTagOnFeature(System.String,System.String,Ingr.SP3D.Route.Middle.RouteFeature,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.RouteRun,Ingr.SP3D.Route.Middle.RouteFeature@)">
            <summary>
            Inserts a feature on another feature.  The feature to be inserted is
            identified by its tag.
            </summary>
            <param name="sTag">Tag indicating inserting feature.</param>
            <param name="sMultiSize">Size of the feature to be inserted from the available multiple sizes.</param>
            <param name="oInsertOnFeature">Feature on which to insert feature.</param>
            <param name="oInsertAtPos">Inserting feature position.</param>
            <param name="oSecondaryRun">New run for run change components.</param>
            <param name="oInsertedFeature">Inserted feature.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">An input argument
            is null or is a business object of the wrong type.</exception>
            <example>This example explains how to call the InsertFeatureByTagOnFeature method.
            <code>
            'Define pipe run.
            Dim oPipeRun As PipeRun = Nothing
            'Define input arguments.
            Dim sTag As String = ""          
            Dim sMultiSize As String = ""
            Dim oInsertOnFeat As RouteFeature = Nothing
            Dim oInsertAtPos As Position = Nothing
            Dim oSecondaryRun As RouteRun = Nothing
            Dim oInsertedFeat As RouteFeature = Nothing
            'Call InsertFeatureByTagOnFeature method.
            oPipeRun.InsertFeatureByTagOnFeature(sTag, sMultiSize, oInsertOnFeat, oInsertAtPos, oSecondaryRun, oInsertedFeat)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeRun.InsertFeatureByTagOnPort(System.String,System.String,Ingr.SP3D.Equipment.Middle.DistributionPort,Ingr.SP3D.Route.Middle.RouteRun,Ingr.SP3D.Route.Middle.RouteFeature@)">
            <summary>        
            Inserts a feature on a port.  The feature to be inserted is identified by its tag.        
            </summary>
            <param name="sTag">Tag indicating inserting feature.</param>
            <param name="sMultiSize">Size of the feature to be inserted from the available multiple sizes.</param>
            <param name="oInsertOnPort">Port on which a feature must be inserted.</param>
            <param name="oSecondaryRun">New run for run change components.</param>
            <param name="oInsertedFeature">Inserted feature.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">An input argument
            is null or is a business object of the wrong type.</exception>
            <example>This example explains how to call the InsertFeatureByTagOnPort method.
            <code>
            'Define pipe run.
            Dim oPipeRun As PipeRun = Nothing
            'Define input arguments.
            Dim sTag As String = ""           
            Dim sMultiSize As String = ""
            Dim oInsertOnPort As DistributionPort = Nothing
            Dim oSecondaryRun As RouteRun = Nothing
            Dim oInsertedFeat As RouteFeature = Nothing
            'Call InsertFeatureByTagOnPort method.
            oPipeRun.InsertFeatureByTagOnPort(sTag, sMultiSize, oInsertOnPort, oSecondaryRun, oInsertedFeat)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeRun.InsertBranchFeatureByShortCodeOrTagOnComponent(System.String,System.Int32,System.String,System.String,Ingr.SP3D.Route.Middle.RteObjectCategoryType,Ingr.SP3D.Route.Middle.RoutePart,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.RouteRun,Ingr.SP3D.Route.Middle.RouteFeature@)">
            <summary>
            Inserts a feature identified by its short code or tag on components. It returns a branch feature.
            </summary>        
            <param name="sShortCode">Short code of the feature.</param>
            <param name="iOptionCode">Option code of the feature.</param>
            <param name="sMultiSize">Size of the feature to be inserted from the available multiple sizes.</param>
            <param name="sTag">Tag that identifies the feature to be inserted.</param>
            <param name="oCategoryType">Defines the type of the object.</param>
            <param name="oInsertOnPart">Feature/Component on which a feature must be inserted.</param>
            <param name="oInsertAtPos">The location at which the feature must be inserted.</param>
            <param name="oSecondaryRun">Secondary run.</param>
            <param name="oInsertedFeature">The inserted feature.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">An input argument
            is null or a business object is of the wrong type.</exception>
            <example>This example explains how to call the InsertBranchFeatureByShortCodeOrTagOnComponent method.
            <code>
            'Define pipe run.
            Dim oPipeRun As PipeRun = Nothing
            'Define input arguments.
            Dim sShortCode As String = ""   'e.g., 'Tee'
            Dim iOptionCode As Integer
            Dim sMultiSize As String = ""
            Dim oInsertOnFeat As RouteFeature = Nothing
            Dim oInsertAtPos As Position = Nothing
            Dim oSecondaryRun As RouteRun = Nothing
            Dim oInsertedFeat As RouteFeature = Nothing
            'Call InsertBranchFeatureByShortCodeOrTagOnComponent method.
            oPipeRun.InsertBranchFeatureByShortCodeOrTagOnComponent(sShortCode, iOptionCode, sMultiSize, sTag, oCategoryType, oInsertOnPart, oInsertAtPos, oSecondaryRun, oInsertedFeature....);
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeRun.InsertBranchFeatureByShortCodeOrTagOnTapPort(System.String,System.Int32,System.String,System.String,Ingr.SP3D.Route.Middle.RteObjectCategoryType,Ingr.SP3D.Route.Middle.RouteFeature,Ingr.SP3D.Route.Middle.PipeTapFeature,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.RouteRun,Ingr.SP3D.Route.Middle.RouteFeature@)">
            <summary>
            Inserts a feature identified by its short code on components. It returns a branch feature.
            </summary>        
            <param name="sShortCode">Short code of the feature.</param>
            <param name="iOptionCode">Option code of the feature.</param>
            <param name="sMultiSize">Size of the feature to be inserted from the available multiple sizes.</param>
            <param name="sTag">Tag that identifies the feature to be inserted.</param>
            <param name="oCategoryType">Defines the type of the object.</param>
            <param name="oInsertOnFeature">Feature on which a component feature must be inserted.</param>
            <param name="oTapFeat"> Tap feature on which to insert a branch feature.</param>
            <param name="oInsertAtPos">The location at which the feature must be inserted.</param>
            <param name="oSecondaryRun">Secondary run.</param>
            <param name="oInsertedFeature">The inserted feature.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">An input argument
            is null or a business object is of the wrong type.</exception>
            <example>This example explains how to call the InsertBranchFeatureByShortCodeOrTagOnTapPort method.
            <code>
            'Define pipe run.
            Dim oPipeRun As PipeRun = Nothing
            'Define input arguments.
            Dim sShortCode As String = ""   'e.g., 'Tee'
            Dim iOptionCode As Integer
            Dim sMultiSize As String = ""
            Dim oInsertOnFeat As RouteFeature = Nothing
            Dim oInsertAtPos As Position = Nothing
            Dim oSecondaryRun As RouteRun = Nothing
            Dim oInsertedFeat As RouteFeature = Nothing
            'Call InsertBranchFeatureByShortCodeOrTagOnTapPort method.
            oPipeRun.InsertBranchFeatureByShortCodeOrTagOnTapPort(sShortCode, iOptionCode, sMultiSize, sTag, oCategoryType, oInsertOnFeature , oTapFeat,  oInsertAtPos, oSecondaryRun, oInsertedFeature.....)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeRun.RouteBetweenPortAndPort(Ingr.SP3D.Equipment.Middle.DistributionPort,Ingr.SP3D.Equipment.Middle.DistributionPort)">
            <summary>
            Routes from a port on the current run to a port on another run.
            </summary>
            <param name="oFromPort">Port on the current run.</param>
            <param name="oToPort">Port on another run.</param>
            <exception cref="T:System.ArgumentNullException">An input argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">An input argument
            is of the wrong type.</exception>
            <example>This explains how to use the RouteBetweenPortAndPort method. 
            <code>
            'Define pipe run.
            Dim oPipeRun As PipeRun = Nothing
            'Define input arguments.
            Dim oFromPort As DistributionPort = Nothing
            Dim oToPort As DistributionPort = Nothing
            'Call RouteBetweenPortAndPort method.
            oPipeRun.RouteBetweenPortAndPort(oFromPort, oToPort)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeRun.RouteBetweenPortAndBranch(Ingr.SP3D.Equipment.Middle.DistributionPort,Ingr.SP3D.Route.Middle.PipeStraightFeature,Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Routes between a port and branch feature.
            </summary>
            <param name="oPort">Distribution port.</param>
            <param name="oPipeStraightFeature">Pipe straight feature on which to create the branch.</param>
            <param name="oBranchPosition">Position on the pipe straight feature.</param>
            <exception cref="T:System.ArgumentNullException">An input argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">An input argument
             is of the wrong type.</exception>
            <example>Explains how to call RouteBetweenPortAndBranch method.
            <code>
            'Define pipe run.
            Dim oPipeRun As PipeRun = Nothing
            'Define input arguments.
            Dim oFromPort As DistributionPort = Nothing
            Dim oToBranchFeat As PipeStraightFeature = Nothing
            Dim oToBranchPosition As Position = Nothing  'Position on oToBranchFeat.        
            'Call RouteBetweenPortAndBranch method.
            oPipeRun.RouteBetweenPortAndBranch(oFromPort, oToBranchFeat, oToBranchPosition)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeRun.RouteBetweenPortAndPoint(Ingr.SP3D.Equipment.Middle.DistributionPort,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.PipeEndFeature@)">
            <summary>
            Routes the pipe from the given port to the given point.
            </summary>
            <param name="oPort">Pipe port.</param>
            <param name="oPosition">Point</param>
            <param name="oPipeEndFeature">Returns the pipe end path feature.</param>
            <exception cref="T:System.ArgumentNullException">An input argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">An input argument
            is of the wrong type.</exception>
            <example>Explains how to call the RouteBetweenPortAndPoint method.
            <code>
            'Define pipe run.
            Dim oPipeRun As PipeRun = Nothing
            'Define input arguments.
            Dim oFromPort As DistributionPort = Nothing
            Dim oToPosition As Position = Nothing
            'Define return argument.
            Dim oNewEndFeat As PipeEndFeature = Nothing
            'Call RouteBetweenPortAndPoint method.
            oPipeRun.RouteBetweenPortAndPoint(oFromPort, oToPosition, oNewEndFeat)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeRun.RouteBetweenPortAndEndFeature(Ingr.SP3D.Equipment.Middle.DistributionPort,Ingr.SP3D.Route.Middle.PipeEndFeature)">
            <summary>
            Routes from a port to an end feature.
            </summary>
            <param name="oPort">Port on the current run.</param>
            <param name="oPipeEndFeature">Destination end feature on another run.</param>
            <exception cref="T:System.ArgumentNullException">An input argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">An input argument
             is of the wrong type.</exception>
            <example>Explains how to call the RouteBetweenPortAndEndFeature method.
            <code>
            'Define pipe run.
            Dim oPipeRun As PipeRun = Nothing
            'Define input arguments.
            Dim oFromPort As DistributionPort = Nothing
            Dim oToEndFeat As PipeEndFeature = Nothing
            'Call RouteBetweenPortAndEndFeature method.
            oPipeRun.RouteBetweenPortAndEndFeature(oFromPort, oToEndFeat)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeRun.RouteBetweenBranchAndBranch(Ingr.SP3D.Route.Middle.PipeStraightFeature,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.PipeStraightFeature,Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Routes between two branch features.
            </summary>
            <param name="oFromPipeStraightFeature">Pipe straight feature on which to branch out.</param>
            <param name="oBranchFromPosition">The start position from the pipe straight feature.</param>
            <param name="oToPipeStraightFeature">Pipe straight feature on which to branch in.</param>
            <param name="oBranchToPosition">Position at the end position.</param>
            <exception cref="T:System.ArgumentNullException">An input argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">An input argument
            is of the wrong type.</exception>
            <example>Explains how to call the RouteBetweenBranchAndBranch method.
            <code>
            'Define pipe run.
            Dim oPipeRun As PipeRun = Nothing
            'Define input arguments.
            Dim oFromPipeSF As PipeStraightFeature = Nothing
            Dim oBranchFromPosition As Position = Nothing 'Position on oFromPipeSF.
            Dim oToPipeSF As PipeStraightFeature = Nothing
            Dim oBranchToPosition As Position = Nothing 'Position on oToPipeSF.
            'Call RouteBetweenBranchAndBranch method.
            oPipeRun.RouteBetweenBranchAndBranch(oFromPipeSF, oBranchFromPosition, oToPipeSF, oBranchToPosition)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeRun.RouteBetweenBranchAndPoint(Ingr.SP3D.Route.Middle.PipeStraightFeature,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.PipeEndFeature@)">
            <summary>
            Routes from branch to a point.
            </summary>
            <param name="oPipeStraightFeature">Pipe straight feature on which to branch out.</param>
            <param name="oBranchPosition">Branch position from the pipe straight feature.</param>
            <param name="oPosition">Position at which the leg is to start.</param>
            <param name="oPipeEndFeature">The new pipe end feature at the end of the new leg.</param>
            <exception cref="T:System.ArgumentNullException">An input argument is null.</exception>        
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">An input argument
            is of the wrong type.</exception>
            <example>Explains how to call the RouteBetweenBranchAndPoint method.
            <code>
            'Define pipe run.
            Dim oPipeRun As PipeRun = Nothing
            'Define input arguments.
            Dim oFromPipeSF As PipeStraightFeature = Nothing
            Dim oBranchFromPosition As Position = Nothing 'Position on oFromPipeSF.
            Dim oToPosition As Position = Nothing
            'Return argument.
            Dim oNewEndFeature As PipeEndFeature = Nothing
            'Call RouteBetweenBranchAndPoint method.
            oPipeRun.RouteBetweenBranchAndPoint(oFromPipeSF, oBranchFromPosition, oToPosition, oNewEndFeature)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeRun.RouteBetweenBranchAndEndFeature(Ingr.SP3D.Route.Middle.PipeStraightFeature,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.PipeEndFeature)">
            <summary>
            Routes from the branch to end feature.
            </summary>
            <param name="oPipeStraightFeature">Pipe straight feature on which to branch out.</param>
            <param name="oBranchPosition">Branch position from the pipe straight feature.</param>
            <param name="oPipeEndFeature">Pipe end feature at which we are routing.</param>
            <exception cref="T:System.ArgumentNullException">An input argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">An input argument
            is of the wrong type.</exception>
            <example>This example explains how to call the RouteBetweenBranchAndEndFeature method.
            <code>
            'Define pipe run.
            Dim oPipeRun As PipeRun = Nothing
            'Define input arguments.
            Dim oFromPipeSF As PipeStraightFeature = Nothing
            Dim oBranchFromPosition As Position = Nothing 'Position on oFromPipeSF.
            Dim oToPipeEF As PipeEndFeature = Nothing
            'Call RouteBetweenBranchAndEndFeature method.
            oPipeRun.RouteBetweenBranchAndEndFeature(oFromPipeSF, oBranchFromPosition, oToPipeEF)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeRun.RouteBetweenEndFeatureAndPoint(Ingr.SP3D.Route.Middle.PipeEndFeature,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.PipeEndFeature@)">
            <summary>
            Routes from an end feature on the current run to a point.
            </summary>
            <param name="oPipeEndFeature">End feature on the current run at which the leg is to end.</param>
            <param name="oPosition">Position at which the leg is to start.</param>
            <param name="oNewPipeEndFeature">Newly created end feature at given position.</param>
            <exception cref="T:System.ArgumentNullException">An input argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">An input argument
            is of the wrong type.</exception>
            <example>Explains how to call the RouteBetweenEndFeatureAndPoint method.
            <code>
            'Define pipe run.
            Dim oPipeRun As PipeRun = Nothing
            'Define input arguments.
            Dim oFromPipeEF As PipeEndFeature = Nothing
            Dim oToPosition As Position = Nothing
            'Define return argument.
            Dim oNewEndFeature As PipeEndFeature = Nothing
            'Call RouteBetweenEndFeatureAndPoint method.
            oPipeRun.RouteBetweenEndFeatureAndPoint(oFromPipeEF, oToPosition, oNewEndFeature)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeRun.RouteBetweenPointAndPoint(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.PipeEndFeature@)">
            <summary>
            Routes from a point on the current run to another point.
            </summary>
            <param name="oFromPosition">The point on the current run from which the leg is to start.</param>
            <param name="oToPosition">The point to which the leg is to be routed.</param>
            <param name="oPipeEndFeature">The new end feature at the end of the new leg.</param>
            <exception cref="T:System.ArgumentNullException">An input argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">An input argument
            is of the wrong type.</exception>
            <example>Explains how to call the RouteBetweenPointAndPoint method.
            <code>
            'Define pipe run.
            Dim oPipeRun As PipeRun = Nothing
            'Define input arguments.
            Dim oFromPosition As Position = Nothing
            Dim oToPosition As Position = Nothing
            'Define return argument.
            Dim oNewEndFeature As PipeEndFeature = Nothing
            'Call RouteBetweenPointAndPoint method.
            oPipeRun.RouteBetweenPointAndPoint(oFromPosition, oToPosition, oNewEndFeature)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeRun.RouteBetweenEndFeatureAndEndFeature(Ingr.SP3D.Route.Middle.PipeEndFeature,Ingr.SP3D.Route.Middle.PipeEndFeature)">
            <summary>
            Routes between two end features.
            </summary>
            <param name="oFromPipeEndFeature">End feature on the current run at which the leg is to start.</param>
            <param name="oToPipeEndFeature">End feature on a different run at which the leg is to end.</param>        
            <exception cref="T:System.ArgumentNullException">An input argument is null.</exception>
            <example>Explains how to call the RouteBetweenEndFeatureAndEndFeature method.
            <code>
            'Define pipe run.
            Dim oPipeRun As PipeRun = Nothing
            'Define input arguments.
            Dim oFromPipeEF As PipeEndFeature = Nothing
            Dim oToEndFeature As PipeEndFeature = Nothing
            'Call'RouteBetweenEndFeatureAndEndFeature method.
            oPipeRun.RouteBetweenEndFeatureAndEndFeature(oFromPipeEF, oToEndFeature)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeRun.ValidateCodelistValue(System.String,System.Int32)">
            <summary>
            Validates the codelist value.
            </summary>
            <param name="sTableName">Codelist table name.</param>
            <param name="iCodeListValue">Codelist value.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnIncorrectCodelistValueException">Incorrect code list value.</exception>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeRun.NPD">
            <summary>
            Gets or sets the nominal diameter of the run property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeRun.InsulationSpec">
            <summary>
            Insulation specification assigned to the run.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeRun.FlowDirection">
            <summary>
            Gets or sets the Flow Direction property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeRun.PipeRunType">
            <summary>
            Gets or sets the PipeRunType property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeRun.ScheduleOverride">
            <summary>
            Gets the Schedule Override property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeRun.MinimumSlope">
            <summary>
            Gets the Minimum Slope property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeRun.SlopeDirection">
            <summary>
            Gets the Slope Direction property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeRun.InsulationPurpose">
            <summary>
            Gets the Insulation Purpose property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeRun.InsulationMaterial">
            <summary>
            Gets the Insulation Material property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeRun.InsulationThickness">
            <summary>
            Gets the Insulation Thickness property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeRun.InsulationTemperature">
            <summary>
            Gets the Insulation Temperature property. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.DuctRun">
            <summary>
            DuctRun is the .NET wrapper class for DuctRun objects.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctRun.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private business object wrapper constructor for duct runs.
            </summary>
            <param name="oBOP">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctRun.#ctor(Ingr.SP3D.Common.Middle.ISystem,Ingr.SP3D.ReferenceData.Middle.HVACSpec)">
            <summary>
            Public constructor for the DuctRun class.
            </summary>
            <param name="oParentSystem">Parent system of the new duct run.</param>
            <param name="oHVACSpec">Specification of the new duct run.</param>
            <exception cref="T:System.ArgumentNullException">Null arguments.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnAccessDeniedException">Access denied.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Parent system is not in working status.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid parent system.</exception>        
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteInvalidSpecException">Invalid given HVAC specification object.</exception>
            <exception cref="T:System.OutOfMemoryException">Failed to create the duct run due to an out-of-memory problem.</exception>        
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteFailedToGetMaterial">Failed to get material on the given specification.</exception>
            <example>This example shows how to create the duct run.
            <code>
            'Get the HVAC spec object.
            Dim oHVACSpec As HVACSpec = Nothing
            'Get the Parent system for the DuctRun.
            Dim oSystem As ISystem = Nothing
            'Create the DuctRun.
            Dim oDuctRun As New DuctRun(oSystem, oHVACSpec)        
            </code>
            </example>        
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctRun.#ctor(Ingr.SP3D.Common.Middle.ISystem,Ingr.SP3D.ReferenceData.Middle.HVACSpec,Ingr.SP3D.Route.Middle.Services.RouteCrossSection)">
            <summary>
            Public constructor for the DuctRun class to create with a cross section.
            </summary>
            <param name="parentSystem">Parent system of the new duct run.</param>
            <param name="hvacSpec">Specification of the new duct run.</param>
            <param name="runCrossSection">CrossSection of the duct run.</param>
            <exception cref="T:System.ArgumentNullException">Null arguments.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid cross-section values.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnAccessDeniedException">Access denied.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Parent system is not in working status.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid parent system.</exception>        
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteInvalidSpecException">Invalid given HVAC specification object.</exception>
            <exception cref="T:System.OutOfMemoryException">Failed to create the duct run due to an out-of-memory problem.</exception>        
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteFailedToGetMaterial">Failed to get material on the given specification.</exception>
            <example>This example shows how to create the duct run.
            <code>
            'Get the HVAC spec object.
            Dim oHVACSpec As HVACSpec = Nothing
            'Get the Parent system for the DuctRun.
            Dim oSystem As ISystem = Nothing
            'Define the cross section for the run
            Dim oRunCrossSection As RouteCrossSection = Nothing
            'Create the DuctRun.
            Dim oDuctRun As New DuctRun(oSystem, oHVACSpec,oRunCrossSection)        
            </code>
            </example>    
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctRun.#ctor(Ingr.SP3D.Route.Middle.DuctRun)">
            <summary>
            Copy constructor for the DuctRun wrapper class.
            </summary>
            <param name="oDuctRunToCopy">Duct run to be copied.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnAccessDeniedException">Access denied exception.</exception>
            <example>This example shows how to create a copy constructor for the duct run.
            <code>
            'Get the existing DuctRun.
            Dim oDuctRunToCopy As DuctRun = Nothing
            'Using copy constructor to copy the existing duct run.
            Dim oDuctRun As New DuctRun(oDuctRunToCopy)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctRun.Finalize">
            <summary>
            Destructor for the DuctRun class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctRun.RouteBetweenPointAndPoint(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.Services.RouteCrossSection,System.Double,Ingr.SP3D.Route.Middle.DuctEndFeature@)">
            <summary>
            Routes a leg between two positions.
            </summary>
            <param name="oFromPosition">Leg starting position.</param>
            <param name="oToPosition">Leg end position.</param>
            <param name="oRteCrossSection">Cross section of the leg.</param>
            <param name="dOrientationAngle">Orientation angle of the leg in radians.</param>
            <param name="oDuctEndFeature">Newly created end feature.</param>
            <exception cref="T:System.ArgumentNullException">Input arguments are null.</exception>
            <example>This example explains how to route a duct from one point to another point.
            <code>
            'Create the DuctRun.
            Dim oDuctRun As DuctRun = Nothing
            'Define oFromPosition, oToPosition from where the route has to start and end.
            Dim oFromPosition As Position = Nothing
            Dim oToPosition As Position = Nothing
            'Define the Route cross section object and set its properties.
            Dim oRteCrossSection As New RouteCrossSection()
            oRteCrossSection.Width = 0.15 'Set the width value.
            oRteCrossSection.Depth = 0.1 'Set the depth value.
            oRteCrossSection.CornerRadius = 0.0 ' Set the corner radius value.
            'Set the CrossSectionShape value.
            oRteCrossSection.CrossSectionShape = CrossSectionShapeTypes.Rectangular
            Dim dOrientationAngle As Double = 0.5*Math.PI 'Set the orientation angle in radians.
            Dim oDuctEndFeature As DuctEndFeature = Nothing
            'Using RouteBetweenPointAndPoint() to route a duct from a point to another point.
            oDuctRun.RouteBetweenPointAndPoint(oFromPosition, oToPosition, oRteCrossSection, dOrientationAngle, oDuctEndFeature)
            </code>
            </example> 
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctRun.RouteBetweenEndFeatureAndPoint(Ingr.SP3D.Route.Middle.DuctEndFeature,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.Services.RouteCrossSection,System.Double,Ingr.SP3D.Route.Middle.DuctEndFeature@)">
            <summary>
            Routes a leg from a given end feature to a given position.
            </summary>
            <param name="oDuctEndFeature">Duct end feature at which the new leg will start.</param>
            <param name="oToPosition">End position of the new leg.</param>
            <param name="oRteCrossSection">Cross section of the leg.</param>
            <param name="dOrientationAngle">Orientation angle of the leg in radians.</param>
            <param name="oNewDuctEndFeature">Newly created end feature at the position.</param>
            <exception cref="T:System.ArgumentNullException">Input arguments are null.</exception>
            <example>This example explains how to route between an end feature and a point.
            <code>
            'Create the duct run.
            Dim oDuctRun As DuctRun = Nothing
            'Define the DuctEndFeature from where the route has to start.
            Dim oDuctEndFeature As DuctEndFeature = Nothing
            'Define ToPosition from where the route has to end.
            Dim oToPosition As Position = Nothing
            'Define the Route cross section object and set its properties.
            Dim oRteCrossSection As New RouteCrossSection()
            oRteCrossSection.Width = 0.15 'Set the width value.
            oRteCrossSection.Depth = 0.1 'Set the depth value.
            oRteCrossSection.CornerRadius = 0.0 ' Set the corner radius value.
            'Set the CrossSectionShape value.
            oRteCrossSection.CrossSectionShape = CrossSectionShapeTypes.Rectangular
            Dim dOrientationAngle As Double = 0.0 'Set the orientation angle in radians.
            Dim oNewDuctEndFeature As DuctEndFeature = Nothing
            'Using RouteBetweenEndFeatureAndPoint() route a duct from end path feature to a point.
            oDuctRun.RouteBetweenEndFeatureAndPoint(oDuctEndFeature, oToPosition, oRteCrossSection, dOrientationAngle, oNewDuctEndFeature)
            </code>
            </example>  
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctRun.RouteBetweenEndFeatureAndEndFeature(Ingr.SP3D.Route.Middle.DuctEndFeature,Ingr.SP3D.Route.Middle.DuctEndFeature,Ingr.SP3D.Route.Middle.Services.RouteCrossSection,System.Double)">
            <summary>
            Routes a leg between two end features. 
            </summary>
            <param name="oFromEndFeature">Duct end feature at which the leg will start.</param>
            <param name="oToEndFeature">Duct end feature at which the leg will end.</param>
            <param name="oRteCrossSection">Cross section of the leg.</param>
            <param name="dOrientationAngle">Orientation angle of the leg in radians.</param>
            <exception cref="T:System.ArgumentNullException">Input arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid input arguments.</exception>
            <example>This example explains how to route between two end features.
            <code>
            'Create the duct run.
            Dim oDuctRun As DuctRun = Nothing
            'Define the oFromEndFeature, oToEndFeature
            Dim oFromEndFeature As DuctEndFeature
            Dim oToEndFeature As DuctEndFeature
            'Define the Route cross section object and set its properties.
            Dim oRteCrossSection As New RouteCrossSection()
            oRteCrossSection.Width = 0.15 'Set the width value.
            oRteCrossSection.Depth = 0.1 'Set the depth value.
            oRteCrossSection.CornerRadius = 0.0 ' Set the corner radius value.
            'Set the CrossSectionShape value.
            oRteCrossSection.CrossSectionShape = CrossSectionShapeTypes.Rectangular
            Dim dOrientationAngle As Double = 0.0 'Set the orientation angle in radians.
            'Using RouteBetweenEndFeatureAndEndFeature(), to route a duct between two end features.
            oDuctRun.RouteBetweenEndFeatureAndEndFeature(oFromEndFeature, oToEndFeature, oRteCrossSection, dOrientationAngle)
            </code>
            </example>   
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctRun.RouteBetweenBranchAndPoint(Ingr.SP3D.Route.Middle.DuctStraightFeature,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.Services.RouteCrossSection,System.Double,Ingr.SP3D.Route.Middle.DuctEndFeature@)">
            <summary>
            Routes a leg between a straight feature and a point. 
            </summary>
            <param name="oDuctStraightFeature">Duct straight feature on which to branch.</param>
            <param name="oBranchPosition">Position of the straight feature.</param>
            <param name="oToPosition">End position of new leg.</param>
            <param name="oRteCrossSection">Cross section of the leg.</param>
            <param name="dOrientationAngle">Orientation angle of the leg in radians.</param>
            <param name="oDuctEndFeature">Newly created end feature at the position.</param>
            <exception cref="T:System.ArgumentNullException">Input arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid input arguments.</exception>
            <example>This example explains how to route between a branch and a point.
            <code>
            'Create the duct run.
            Dim oDuctRun As DuctRun = Nothing
            'Define the DuctStraightFeature from which we are branching out.
            Dim oDuctStraightFeature As DuctStraightFeature = Nothing
            Dim oBranchFromPosition As Position = Nothing
            'Define ToPosition from where the route has to end.
            Dim oToPosition As Position = Nothing
            'Define the Route cross section object and set its properties.
            Dim oRteCrossSection As New RouteCrossSection()
            oRteCrossSection.Width = 0.15 'Set the width value.
            oRteCrossSection.Depth = 0.1 'Set the depth value.
            oRteCrossSection.CornerRadius = 0.0 ' Set the corner radius value.
            'Set the CrossSectionShape value.
            oRteCrossSection.CrossSectionShape = CrossSectionShapeTypes.Rectangular
            Dim dOrientationAngle As Double = 0.0 'Set the orientation angle in radians.
            Dim oDuctEndFeature As DuctEndFeature = Nothing
            'Using RouteBetweenBranchAndPoint() route a duct from branch feature to a point.
            oDuctRun.RouteBetweenBranchAndPoint(oDuctStraightFeature, oBranchFromPosition, oToPosition, oRteCrossSection, dOrientationAngle, oDuctEndFeature)
            </code>
            </example> 
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctRun.RouteBetweenBranchAndEndFeature(Ingr.SP3D.Route.Middle.DuctStraightFeature,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.DuctEndFeature,Ingr.SP3D.Route.Middle.Services.RouteCrossSection,System.Double)">
            <summary>
            Routes a leg between branch and end feature. 
            </summary>
            <param name="oDuctStraightFeature">Duct straight feature on which to branch out.</param>
            <param name="oBranchPosition">Position of the duct straight feature.</param>
            <param name="oDuctEndFeature">Duct end feature at which the routing leg ends.</param>
            <param name="oRteCrossSection">Cross section of the leg.</param>
            <param name="dOrientationAngle">Orientation angle of the leg in radians.</param>
            <exception cref="T:System.ArgumentNullException">Input arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid input arguments.</exception>
            <example>This example explains how to route from the position of a straight feature to the end feature.
            <code>
            'Create the duct run.
            Dim oDuctRun As DuctRun = Nothing
            'Define the DuctStraightFeature from which we are branching out.
            Dim oDuctStraightFeature As DuctStraightFeature = Nothing
            Dim oBranchPosition As Position = Nothing
            'Define the DuctEndFeature to which we are branching in.
            Dim oDuctEndFeature As DuctEndFeature = Nothing
            'Define the Route cross section object and set its properties.
            Dim oRteCrossSection As New RouteCrossSection()
            oRteCrossSection.Width = 0.15 'Set the width value.
            oRteCrossSection.Depth = 0.1 'Set the depth value.
            oRteCrossSection.CornerRadius = 0.0 ' Set the corner radius value.
            'Set the CrossSectionShape value.
            oRteCrossSection.CrossSectionShape = CrossSectionShapeTypes.Rectangular
            Dim dOrientationAngle As Double = 0.0 'Set the orientation angle in radians.
            'Using RouteBetweenBranchAndEndFeature(), to route a duct from branch feature to end feature.
            oDuctRun.RouteBetweenBranchAndEndFeature(oDuctStraightFeature, oBranchPosition, oDuctEndFeature, oRteCrossSection, dOrientationAngle)
            </code>
            </example> 
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctRun.RouteBetweenBranchAndBranch(Ingr.SP3D.Route.Middle.DuctStraightFeature,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.DuctStraightFeature,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.Services.RouteCrossSection,System.Double)">
            <summary>
            Routes a leg between two straight features.
            </summary>
            <param name="oFromDuctStraightFeature">Duct straight feature on which to branch out.</param>
            <param name="oBranchFromPosition">Position of the from duct straight feature.</param>
            <param name="oToDuctStraightFeature">Duct straight feature on which we are branching in.</param>
            <param name="oBranchToPosition">Position of the ending duct straight feature.</param>
            <param name="oRteCrossSection">Cross section of the leg.</param>
            <param name="dOrientationAngle">Orientation angle of the leg in radians.</param>
            <exception cref="T:System.ArgumentNullException">Input arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid input arguments.</exception>
            <example>This example explains how to route between two branches.
            <code>
            'Create the duct run.
            Dim oDuctRun As DuctRun = Nothing
            'Define the DuctStraightFeature from which we are branching out.
            Dim oFromDuctStraightFeature As DuctStraightFeature = Nothing
            Dim oBranchFromPosition As Position = Nothing
            'Define the DuctStraightFeature to which we are branching in.
            Dim oToDuctStraightFeature As DuctStraightFeature = Nothing
            Dim oBranchToPosition As Position = Nothing
            'Define the Route cross section object and set its properties.
            Dim oRteCrossSection As New RouteCrossSection()
            oRteCrossSection.Width = 0.15 'Set the width value.
            oRteCrossSection.Depth = 0.1 'Set the depth value.
            oRteCrossSection.CornerRadius = 0.0 ' Set the corner radius value.
            'Set the CrossSectionShape value.
            oRteCrossSection.CrossSectionShape = CrossSectionShapeTypes.Rectangular
            Dim dOrientationAngle As Double = 0.0 'Set the orientation angle in radians.
            'Using RouteBetweenBranchAndBranch() route a Duct between two branches.
            oDuctRun.RouteBetweenBranchAndBranch(oFromDuctStraightFeature, oBranchFromPosition, oToDuctStraightFeature, oBranchToPosition, oRteCrossSection, dOrientationAngle)
            </code>
            </example>  
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctRun.RouteBetweenPortAndPoint(Ingr.SP3D.Equipment.Middle.DistributionPort,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.Services.RouteCrossSection,System.Double,Ingr.SP3D.Route.Middle.DuctEndFeature@)">
            <summary>
            Routes a leg between port and point. 
            </summary>
            <param name="oPort">Port from which the leg must start.</param>
            <param name="oToPosition">Position at which the leg must end.</param>
            <param name="oRteCrossSection">Cross section of the leg.</param>
            <param name="dOrientationAngle">Orientation angle of the leg in radians.</param>
            <param name="oDuctEndFeature">Newly created end feature at given position.</param>
            <exception cref="T:System.ArgumentNullException">Input arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid input arguments.</exception>
            <example>This example explains how to route between port and point.
            <code>
            'Create the duct run.
            Dim oDuctRun As DuctRun = Nothing
            'Define the oPort from which route has to start.
            Dim oPort As DistributionPort
            'Define the ToPosition.
            Dim oToPosition As Position
            'Define the Route cross section object and set its properties.
            Dim oRteCrossSection As New RouteCrossSection()
            oRteCrossSection.Width = 0.15 'Set the width value.
            oRteCrossSection.Depth = 0.1 'Set the depth value.
            oRteCrossSection.CornerRadius = 0.0 ' Set the corner radius value.
            'Set the CrossSectionShape value.
            oRteCrossSection.CrossSectionShape = CrossSectionShapeTypes.Rectangular
            Dim dOrientationAngle As Double = 0.0 'Set the orientation angle in radians.
            Dim oDuctEndFeature As DuctEndFeature
            'Using RouteBetweenPortAndPoint(), to route a duct from port to point.
            oDuctRun.RouteBetweenPortAndPoint(oPort, oToPosition, oRteCrossSection, dOrientationAngle, oDuctEndFeature)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctRun.RouteBetweenPortAndEndFeature(Ingr.SP3D.Equipment.Middle.DistributionPort,Ingr.SP3D.Route.Middle.DuctEndFeature,Ingr.SP3D.Route.Middle.Services.RouteCrossSection,System.Double)">
            <summary>
            Routes a leg between port and end feature.
            </summary>
            <param name="oPort">Port from which the leg starts.</param>
            <param name="oDuctEndFeature">Duct end feature where the leg ends.</param>&gt;
            <param name="oRteCrossSection">Cross section of the leg.</param>
            <param name="dOrientationAngle">Orientation angle of the leg in radians.</param>
            <exception cref="T:System.ArgumentNullException">Input arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid input arguments.</exception>
            <example>This example explains how to route between a port and end feature.
            <code>        
            'Create the duct run.
            Dim oDuctRun As DuctRun = Nothing
            'Define the oPort from which route has to start.
            Dim oPort As DistributionPort
            'Define the oDuctEndFeature.
            Dim oDuctEndFeature As DuctEndFeature
            'Define the Route cross section object and set its properties.
            Dim oRteCrossSection As New RouteCrossSection()
            oRteCrossSection.Width = 0.15 'Set the width value.
            oRteCrossSection.Depth = 0.1 'Set the depth value.
            oRteCrossSection.CornerRadius = 0.0 ' Set the corner radius value.
            'Set the CrossSectionShape value.
            oRteCrossSection.CrossSectionShape = CrossSectionShapeTypes.Rectangular
            Dim dOrientationAngle As Double = 0.0 'Set the orientation angle in radians.
            'Using RouteBetweenPortAndEndFeature(), to route a duct from port to end feature.
            oDuctRun.RouteBetweenPortAndEndFeature(oPort, oDuctEndFeature, oRteCrossSection, dOrientationAngle)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctRun.RouteBetweenPortAndBranch(Ingr.SP3D.Equipment.Middle.DistributionPort,Ingr.SP3D.Route.Middle.DuctStraightFeature,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.Services.RouteCrossSection,System.Double)">
            <summary>
            Routes a leg from port to a branch. 
            </summary>
            <param name="oPort">Port from which the leg starts.</param>
            <param name="oDuctStraightFeature">Duct straight feature into which to branch.</param>
            <param name="oBranchPosition">Position on the duct straight feature.</param>
            <param name="oRteCrossSection">Cross section of the leg.</param>
            <param name="dOrientationAngle">Orientation angle of the leg in radians.</param>
            <exception cref="T:System.ArgumentNullException">Input arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid input arguments.</exception>
            <example>This example explains how to route between port and branch.
            <code>
            'Create the duct run.
            Dim oDuctRun As DuctRun = Nothing
            'Define the oPort from which route has to start.
            Dim oPort As DistributionPort
            'Define the oDuctStraightFeature on which route has to end.
            Dim oDuctStraightFeature As DuctStraightFeature
            Dim oBranchPosition As Position
            'Define the Route cross section object and set its properties.
            Dim oRteCrossSection As New RouteCrossSection()
            oRteCrossSection.Width = 0.15 'Set the width value.
            oRteCrossSection.Depth = 0.1 'Set the depth value.
            oRteCrossSection.CornerRadius = 0.0 ' Set the corner radius value.
            'Set the CrossSectionShape value.
            oRteCrossSection.CrossSectionShape = CrossSectionShapeTypes.Rectangular
            Dim dOrientationAngle As Double = 0.0 'Set the orientation angle in radians.
            'Using RouteBetweenPortAndBranch(), to route a duct from port to branch.
            oDuctRun.RouteBetweenPortAndBranch(oPort, oDuctStraightFeature, oBranchPosition, oRteCrossSection, dOrientationAngle)
            </code>
            </example>  
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctRun.RouteBetweenPortAndPort(Ingr.SP3D.Equipment.Middle.DistributionPort,Ingr.SP3D.Equipment.Middle.DistributionPort,Ingr.SP3D.Route.Middle.Services.RouteCrossSection,System.Double)">
            <summary>
            Routes a leg from one port to another. 
            </summary>
            <param name="oFromPort">Port from which the leg starts.</param>
            <param name="oToPort">Port to which the leg ends.</param>
            <param name="oRteCrossSection">Cross section of the leg.</param>
            <param name="dOrientationAngle">Orientation angle of the leg in radians.</param>
            <exception cref="T:System.ArgumentNullException">Input arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid input arguments.</exception>
            <example>This example explains about how to route from one port to another.
            <code>
            'Create the duct run.
            Dim oDuctRun As DuctRun = Nothing
            'Define the two HVAC ports, ie, oFromPort,oToPort.
            Dim oFromPort As DistributionPort
            Dim oToPort As DistributionPort
            'Define the Route cross section object and set its properties.
            Dim oRteCrossSection As New RouteCrossSection()
            oRteCrossSection.Width = 0.15 'Set the width value.
            oRteCrossSection.Depth = 0.1 'Set the depth value.
            oRteCrossSection.CornerRadius = 0.0 ' Set the corner radius value.
            'Set the CrossSectionShape value.
            oRteCrossSection.CrossSectionShape = CrossSectionShapeTypes.Rectangular
            Dim dOrientationAngle As Double = 0.0 'Set the orientation angle in radians.
            'Using RouteBetweenPortAndPort(), to route a duct between two ports.
            oDuctRun.RouteBetweenPortAndPort(oFromPort, oToPort, oRteCrossSection, dOrientationAngle)
            </code>
            </example>  
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctRun.InsertFeatureByPartOnFeature(Ingr.SP3D.ReferenceData.Middle.Part,Ingr.SP3D.Route.Middle.RouteFeature,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.RouteFeature@)">
            <summary>
            Inserts a feature on a given feature part.
            </summary>
            <param name="oCatalogPart">Catalog part which will be inserted.</param>
            <param name="oInsertOnFeature">Feature on which to insert a feature.</param>
            <param name="oInsertAtPosition">Position at which the component will be inserted.</param>
            <param name="oInsertedFeature">Newly created feature at the given position.</param>
            <exception cref="T:System.ArgumentNullException">Input arguments are null.</exception>
            <example>This example explains how to insert a feature on a given feature (straight/end).
            <code>
            'Create the duct.
            Dim oDuctRun As DuctRun = Nothing
            'Define the Part (catalog part) which is to be inserted.
            Dim oCatalogPart As Part = Nothing
            'Define the feature on which the component has to be inserted.
            Dim oInsertOnFeature As RouteFeature = Nothing
            'Define the position on the straight feature where the component has to be inserted.
            'In case of an end feature, end feature location is taken irrespective of the location here.
            Dim oInsertAtPosition As Position = Nothing
            'Declare a variable to hold the new inserted feature returned by this method.
            Dim oInsertedFeature As RouteFeature = Nothing
            'Using InsertFeatureByPartOnFeature(), to insert a component on a duct straight feature or an end feature.
            oDuctRun.InsertFeatureByPartOnFeature(oCatalogPart, oInsertOnFeature, oInsertAtPosition, oInsertedFeature)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctRun.InsertSlantedTransitionOnEndFeature(Ingr.SP3D.Route.Middle.DuctEndFeature,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.Services.RouteCrossSection,System.Double,Ingr.SP3D.Route.Middle.RouteFeature@)">
            <summary>
            Inserts a slanted transition on a given end feature.
            </summary>
            <param name="oInsertOnFeature">Duct end feature on which the slanted transition needs to be inserted.</param>
            <param name="oEndTransitionPos">End transition position.</param>
            <param name="oRteCrossSection">Cross section of the leg.</param>
            <param name="dOrientationAngle">Orientation angle of the leg in radians.</param>
            <param name="oInsertedTransition">Returns the inserted slanted transition.</param>
            <exception cref="T:System.ArgumentNullException">Input arguments are null.</exception>
            <example>This example explains how to insert a slanted transition on a given end feature.
            <code>
            'Create the duct.
            Dim oDuctRun As DuctRun = Nothing       
            Dim oInsertOnFeature As EndFeature = Nothing        
            'Define end transition position.
            Dim oEndTransitionPos As Position = Nothing
            'Define the Route cross section object and set its properties.
            Dim oCrossSection As New RouteCrossSection()
            oCrossSection.Width = 0.15 'Set the width value.
            oCrossSection.Depth = 0.1 'Set the depth value.
            oCrossSection.CornerRadius = 0.0 ' Set the corner radius value.
            'Set the CrossSectionShape value.
            oCrossSection.CrossSectionShape = CrossSectionShapeTypes.Rectangular
            Dim dOrientationAngle As Double = 0.0 'Set the orientation angle in radians.
            'Declare a variable to hold the new inserted feature return by this method.
            Dim oInsertedFeature As RouteFeature = Nothing
            'Using InsertSlantedTransitionOnEndFeature(), to insert a slanted transition on end feature.
            oDuctRun.InsertSlantedTransitionOnEndFeature(oInsertOnFeature, oEndTransitionPos, oCrossSection, dOrientationAngle, oInsertedFeature)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctRun.InsertSlantedTransitionOnPort(Ingr.SP3D.Equipment.Middle.DistributionPort,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.Services.RouteCrossSection,System.Double,Ingr.SP3D.Route.Middle.RouteFeature@)">
            <summary>
            Inserts a slanted transition on a given port.
            </summary>
            <param name="oInsertOnPort">Port on which the slanted transition needs to be inserted.</param>
            <param name="oEndTransitionPos">End transition position.</param>
            <param name="oRteCrossSection">Cross section of the leg.</param>
            <param name="dOrientationAngle">Orientation angle of the leg in radians.</param>
            <param name="oInsertedTransition">Returns the inserted slanted transition.</param>
            <exception cref="T:System.ArgumentNullException">Input arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid input arguments.</exception>
            <example>This example explains how to insert a slanted transition on a given port.
            <code>
            'Create the duct.
            Dim oDuctRun As DuctRun = Nothing       
            Dim oInsertOnPort As DistributionPort = Nothing        
            'Define end transtition position.
            Dim oEndTransitionPos As Position = Nothing
            'Define the Route cross section object and set its properties.
            Dim oCrossSection As New RouteCrossSection()
            oCrossSection.Width = 0.15 'Set the width value.
            oCrossSection.Depth = 0.1 'Set the depth value.
            oCrossSection.CornerRadius = 0.0 ' Set the corner radius value.
            'Set the CrossSectionShape value.
            oCrossSection.CrossSectionShape = CrossSectionShapeTypes.Rectangular
            Dim dOrientationAngle As Double = 0.0 'Set the orientation angle in radians.
            'Declare a variable to hold the new inserted feature return by this method.
            Dim oInsertedFeature As RouteFeature = Nothing        
            'Using InsertSlantedTransitionOnPort(), to insert a slanted transition on port.
            oDuctRun.InsertSlantedTransitionOnPort(oInsertOnPort, oEndTransitionPos, oCrossSection, dOrientationAngle, oInsertedFeature)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctRun.InsertStraightTransitionOnEndFeature(Ingr.SP3D.Route.Middle.DuctEndFeature,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.StraightTransAlignTypes,Ingr.SP3D.Route.Middle.Services.RouteCrossSection,System.Double,Ingr.SP3D.Route.Middle.RouteFeature@)">
            <summary>
            Inserts a straight transition on a duct end feature.
            </summary>
            <param name="oDuctEndFeature">Duct end feature.</param>
            <param name="oTransEndPosition">Transition end position.</param>
            <param name="eAlign">Alignment type.</param>
            <param name="oCrossSection">Cross section of transition end.</param>
            <param name="dOrientationAngle">Orientation angle of transition.</param>
            <param name="oInsertedTransition">Inserted transition feature.</param>
            <exception cref="T:System.ArgumentNullException">Input arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid input arguments.</exception>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteInvalidTransitionCrossSection">Invalid cross section.</exception>  
            <example>This example explains how to insert straight transition on duct end feature by passing end position as input.
            <code>
            'Create the duct run.
            Dim oDuctRun As DuctRun = Nothing
            'Define duct end feature on which transition to be inserted.
            Dim oDuctEndFeature As DuctEndFeature = Nothing
            'Define end cross section of transition.
            Dim oCrossSection As RouteCrossSection = Nothing
            'Define end position of transition.
            Dim oEndPosition As Position = Nothing
            'Define straight transition alignment type.
            Dim eAlign = StraightTransAlignTypes.CENTERLINE
            'Define orientation angle of transition to be inserted.
            Dim dOrientationAngle As Double = 1.5
            'Declare a variable to hold inserted transition feature.
            Dim oInsertedFeature As RouteFeature = Nothing
            'Use InsertStraightTransitionOnEndFeature() to insert transition on duct end feature.
            oDuctRun.InsertStraightTransitionOnEndFeature(oDuctEndFeature, oEndPosition, eAlign, oCrossSection, dOrientationAngle, oInsertedFeature)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctRun.InsertStraightTransitionOnEndFeature(Ingr.SP3D.Route.Middle.DuctEndFeature,System.Double,Ingr.SP3D.Route.Middle.StraightTransAlignTypes,Ingr.SP3D.Route.Middle.Services.RouteCrossSection,System.Double,Ingr.SP3D.Route.Middle.RouteFeature@)">
            <summary>
            Insert straight transition on duct end feature.
            </summary>
            <param name="oDuctEndFeature">Duct end feature.</param>
            <param name="dTransLength">Length of transition.</param>
            <param name="eAlign">Alignment type.</param>
            <param name="dOrientationAngle">Orientation angle of transition.</param>
            <param name="oCrossSection">Cross section of transition.</param>
            <param name="oInsertedTransition">Inserted transition feature.</param>
            <exception cref="T:System.ArgumentNullException">Input arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid input arguments.</exception>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteInvalidTransitionCrossSection">Invalid cross section.</exception>  
            <example>This example explains how to insert straight transition on duct end feature by passing transition length as input. 
            <code>
            'Create the duct run.
            Dim oDuctRun As DuctRun = Nothing
            'Define duct end feature on which transition to be inserted.
            Dim oDuctEndFeature As DuctEndFeature = Nothing
            'Define end cross section of transition.
            Dim oCrossSection As RouteCrossSection = Nothing
            'Define length of transition.
            Dim dTransLength As Double = 1.0
            'Define straight transition alignment type.
            Dim eAlign = StraightTransAlignTypes.CENTERLINE
            'Define orientation angle of transition to be inserted.
            Dim dOrientationAngle As Double = 1.5
            'Declare a variable to hold inserted transition feature.
            Dim oInsertedFeature As RouteFeature = Nothing
            'Use InsertStraightTransitionOnEndFeature() to insert transition on duct end feature.
            oDuctRun.InsertStraightTransitionOnEndFeature(oDuctEndFeature, dTransLength, eAlign, oCrossSection, dOrientationAngle, oInsertedFeature)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctRun.InsertStraightTransitionOnPort(Ingr.SP3D.Equipment.Middle.DistributionPort,System.Double,Ingr.SP3D.Route.Middle.StraightTransAlignTypes,Ingr.SP3D.Route.Middle.Services.RouteCrossSection,System.Double,Ingr.SP3D.Route.Middle.RouteFeature@)">
            <summary>
            Inserts straight transition on component or equipment port.
            </summary>
            <param name="oInsertOnPort">HVAC port on which transition to be inserted.</param>
            <param name="dTransLength">Length of transition.</param>
            <param name="eAlign">Alignment type of transition.</param>
            <param name="oCrossSection">End cross section of transition.</param>
            <param name="dOrientationAngle">Orientation angle of transition.</param>
            <param name="oInsertedTransition">Inserted transition feature.</param>
            <exception cref="T:System.ArgumentNullException">Input arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid input arguments.</exception>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteInvalidTransitionCrossSection">Invalid cross section.</exception>  
            <example>This example explains how to insert straight transition on port by passing transition length as input. 
            <code>
            'Create the duct run.
            Dim oDuctRun As DuctRun = Nothing
            'Define distribution port on which transition to be inserted.
            Dim oDuctPort As DistributionPort = Nothing
            'Define end cross section of transition.
            Dim oCrossSection As RouteCrossSection = Nothing
            'Define length of transition.
            Dim dTransLength As Double = 1.0
            'Define straight transition alignment type.
            Dim eAlign = StraightTransAlignTypes.CENTERLINE
            'Define orientation angle of transition to be inserted.
            Dim dOrientationAngle As Double = 1.5
            'Declare a variable to hold inserted transition feature.
            Dim oInsertedFeature As RouteFeature = Nothing
            'Use InsertStraightTransitionOnPort() to insert transition on equipment or component HVAC port.
            oDuctRun.InsertStraightTransitionOnPort(oDuctPort, dTransLength, eAlign, oCrossSection, dOrientationAngle, oInsertedFeature)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctRun.InsertStraightTransitionOnPort(Ingr.SP3D.Equipment.Middle.DistributionPort,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.StraightTransAlignTypes,Ingr.SP3D.Route.Middle.Services.RouteCrossSection,System.Double,Ingr.SP3D.Route.Middle.RouteFeature@)">
            <summary>
             Inserts straight transition on HVAC component or equipment port.
            </summary>
            <param name="oInsertOnPort">HVAC port on which transition to be inserted.</param>
            <param name="oTransEndPosition">Transition end position.</param>
            <param name="eAlign">Alignment type.</param>
            <param name="oCrossSection">Transition end cross section.</param>
            <param name="dOrientationAngle">Orientation angle of transition.</param>
            <param name="oInsertedTransition">Inserted transition.</param>
            <exception cref="T:System.ArgumentNullException">Input arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid input arguments.</exception>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteInvalidTransitionCrossSection">Invalid cross section.</exception>  
            <example>This example explains how to insert straight transition on duct port by passing end position as input.
            <code>
            'Create the duct run.
            Dim oDuctRun As DuctRun = Nothing
            'Define distribution port on which transition to be inserted.
            Dim oDuctPort As DistributionPort = Nothing
            'Define end cross section of transition.
            Dim oCrossSection As RouteCrossSection = Nothing
            'Define end position of transition.
            Dim oEndPosition As Position = Nothing
            'Define straight transition alignment type.
            Dim eAlign = StraightTransAlignTypes.CENTERLINE
            'Define orientation angle of transition to be inserted.
            Dim dOrientationAngle As Double = 0.1
            'Declare a variable to hold inserted transition feature.
            Dim oInsertedFeature As RouteFeature = Nothing
            'Use InsertStraightTransitionOnPort() to insert transition on equipment or component HVAC port.
            oDuctRun.InsertStraightTransitionOnPort(oDuctPort, oEndPosition, eAlign, oCrossSection, dOrientationAngle, oInsertedFeature)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctRun.InsertTurnTransitionOnEndFeature(Ingr.SP3D.Route.Middle.DuctEndFeature,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.Services.RouteCrossSection,System.Double,System.Double,Ingr.SP3D.Route.Middle.TurnTransAlignTypes,System.Boolean,Ingr.SP3D.Route.Middle.RouteFeature@)">
            <summary>
            Inserts a turn transition on a given end feature.
            </summary>
            <param name="oInsertOnFeature">Duct end feature on which the turn transition needs to be inserted.</param>
            <param name="oEndTransitionPos">End transition position.</param>
            <param name="oRteCrossSection">Cross section of the leg.</param>
            <param name="dOrientationAngle">Orientation angle of the leg in radians.</param>
            <param name="dThroatRadius">Throat radius.</param>
            <param name="eTurnAlign">Turn alignment type.</param>
            <param name="bMitered">Mitered in true or false.</param>
            <param name="oInsertedTransition">Returns the inserted turn transition.</param>
            <exception cref="T:System.ArgumentNullException">Input arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid input arguments.</exception>
            <example>This example explains how to insert a turn transition on a given end feature.
            <code>
            'Create the duct.
            Dim oDuctRun As DuctRun = Nothing
            Dim oInsertOnFeature As DuctEndFeature = Nothing
            'Define end transition position.
            Dim oEndTransitionPos As Position = Nothing
            'Define the Route cross section object and set its properties.
            Dim oCrossSection As New RouteCrossSection()
            oCrossSection.Width = 0.15 'Set the width value.
            oCrossSection.Depth = 0.1 'Set the depth value.
            oCrossSection.CornerRadius = 0.0 ' Set the corner radius value.
            'Set the CrossSectionShape value.
            oCrossSection.CrossSectionShape = CrossSectionShapeTypes.Rectangular
            Dim dOrientationAngle As Double = 0.0 'Set the orientation angle in radians.
            Dim dThroatRadius As Double = 1.0 'Set throat radius value.
            Dim eTurnAlign As TurnTransAlignTypes = TurnTransAlignTypes.ALIGN_CENTER 'Set the turn align type.
            Dim bMitered As Boolean = False ' Set the mitered flag.
            'Declare a variable to hold the new inserted feature returned by this method.
            Dim oInsertedFeature As RouteFeature = Nothing
            'Using InsertTurnTransitionOnEndFeature(), to insert a turn transition on end feature.
            oDuctRun.InsertTurnTransitionOnEndFeature(oInsertOnFeature, oEndTransitionPos, oCrossSection, dOrientationAngle, dThroatRadius, eTurnAlign, bMitered, oInsertedFeature)
            </code>
            </example>        
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctRun.InsertTurnTransitionOnPort(Ingr.SP3D.Equipment.Middle.DistributionPort,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.Services.RouteCrossSection,System.Double,System.Double,Ingr.SP3D.Route.Middle.TurnTransAlignTypes,System.Boolean,Ingr.SP3D.Route.Middle.RouteFeature@)">
            <summary>
            Inserts a turn transition on a given port.
            </summary>
            <param name="oInsertOnPort">Port on which the turn transition needs to be inserted.</param>
            <param name="oEndTransitionPos">End transition position.</param>
            <param name="oRteCrossSection">Cross section of the leg.</param>
            <param name="dOrientationAngle">Orientation angle of the leg in radians.</param>
            <param name="dThroatRadius">Throat radius.</param>
            <param name="eTurnAlign">Turn alignment type.</param>
            <param name="bMitered">Mitered in True or False.</param>
            <param name="oInsertedTransition">Returns the inserted turn transition.</param>
            <exception cref="T:System.ArgumentNullException">Input arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid input arguments.</exception>
            <example>This example explains how to insert a turn transition on a given port.
            <code>
            'Create the duct.
            Dim oDuctRun As DuctRun = Nothing
            Dim oInsertOnPort As DistributionPort = Nothing
            'Define end transtition position.
            Dim oEndTransitionPos As Position = Nothing
            'Define the Route cross section object and set its properties.
            Dim oCrossSection As New RouteCrossSection()
            oCrossSection.Width = 0.15 'Set the width value.
            oCrossSection.Depth = 0.1 'Set the depth value.
            oCrossSection.CornerRadius = 0.0 ' Set the corner radius value.
            'Set the CrossSectionShape value.
            oCrossSection.CrossSectionShape = CrossSectionShapeTypes.Rectangular
            Dim dOrientationAngle As Double = 0.0 'Set the orientation angle in radians.
            Dim dThroatRadius As Double = 1.0 'Set throat radius value.
            Dim eTurnAlign As TurnTransAlignTypes = TurnTransAlignTypes.ALIGN_CENTER 'Set the turn align type.
            Dim bMitered As Boolean = False ' Set the mitered flag.
            'Declare a variable to hold the new inserted feature returned by this method.
            Dim oInsertedFeature As RouteFeature = Nothing
            'Using InsertTurnTransitionOnEndFeature(), to insert a turn transition on port.
            oDuctRun.InsertTurnTransitionOnEndFeature(oInsertOnPort, oEndTransitionPos, oCrossSection, dOrientationAngle, dThroatRadius, eTurnAlign, bMitered, oInsertedFeature)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctRun.InsertFeatureByPartOnPort(Ingr.SP3D.ReferenceData.Middle.Part,Ingr.SP3D.Equipment.Middle.DistributionPort,Ingr.SP3D.Route.Middle.RouteFeature@)">
            <summary>
            Inserts a duct feature on a port by passing a catalog part.
            </summary>
            <param name="oCatalogPart">Inserting catalog part.</param>
            <param name="oInsertOnPort">Equipment or component port.</param>
            <param name="oInsertedFeature">Inserted duct feature.</param>
            <exception cref="T:System.ArgumentNullException">Input arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid input arguments.</exception>
            <example>This example explains how to insert feature on given port (component/equipment port).
            <code>
            'Create the duct run.
            Dim oDuctRun As DuctRun = Nothing
            'Define the Part(Catalog part) which is to be inserted.
            Dim oCatalogPart As Part = Nothing
            'Define the port on which the component has to be inserted.
            Dim oInsertOnPort As DistributionPort = Nothing
            'Declare a variable to hold the new inserted feature returned by this method.
            Dim oInsertedFeature As RouteFeature = Nothing
            'Using InsertFeatureByPartOnPort(), to insert a component on a component port or equipment port.
            oDuctRun.InsertFeatureByPartOnPort(oCatalogPart, oInsertOnPort, oInsertedFeature)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctRun.SetUserDefinedInsulation(System.Int32,System.Double)">
            <summary>
            Sets the user-defined insulation.
            </summary>
            <param name="iMaterial">Insulation material.</param>
            <param name="dThickness">Thickness of insulation.</param>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteIncorrectMaterialCodeException">The lMaterial argument is a value that is not in the InsulationMaterial codelist.</exception>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteInvalidInsulationThickessException">The value for dThickness is not defined for the given InsulationMaterial code. </exception>
            <example> This example shows how to set user-defined insulation on DuctRun.
            <code>
            'Declare the required variables. 
            Dim oDuctRun As DuctRun = Nothing
            Dim iMaterial As Int32
            Dim dThickness As Double
            ' Set user-defined insulation on DuctRun. 
            oDuctRun.SetUserDefinedInsulation(iMaterial, dThickness)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctRun.GetOrientationAngle(System.Double)">
            <summary>
            Converts to corresponding +ve value if we pass -ve values. 
            </summary>        
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctRun.CreateDuctRun(Ingr.SP3D.Common.Middle.ISystem,Ingr.SP3D.ReferenceData.Middle.HVACSpec)">
            <summary>
            Public constructor for the DuctRun class.
            </summary>
            <param name="oParentSystem">Parent system of the new duct run.</param>
            <param name="oHVACSpec">Specification of the new duct run.</param>
            <exception cref="T:System.ArgumentNullException">Null arguments.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnAccessDeniedException">Access denied.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Parent system is not in working status.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid parent system.</exception>        
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteInvalidSpecException">Invalid given HVAC specification object.</exception>
            <exception cref="T:System.OutOfMemoryException">Failed to create the duct run due to out of memory problem.</exception>        
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteFailedToGetMaterial">Failed to get material on given specification.</exception>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctRun.WallThickness">
            <summary>
            Gets or sets the WallThickness property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctRun.MaximumRecommendedVelocity">
            <summary>
            Gets or sets the MaximumRecommendedVelocity property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctRun.MaximumRecommendedPressureLoss">
            <summary>
            Gets or sets the MaximumRecommendedPressureLoss property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctRun.FlowDirection">
            <summary>
            Gets or sets the FlowDirection property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctRun.InsulationMaterial">
            <summary>
            Gets the InsulationMaterial property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctRun.InsulationThickness">
            <summary>
            Gets the InsulationThickness property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctRun.CrossSection">
            <summary>
            Gets or sets the cross section on the duct run.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.IConduitPathFeature">
            <summary>
            Properties common to all conduit path features.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.IConduitPathFeature.ShortCode">
            <summary>
            Gets or sets the Short Code property on the conduit path feature.
            This property is shown as Type in the TaskHost ribbon bar.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.IConduitPathFeature.NCD">
            <summary>
            Gets or sets the NCD property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.IConduitPathFeature.OptionCode">
            <summary>
            Gets or sets the OptionCode property. 
            This property is shown as Option in the TaskHost ribbon bar.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.IConduitPathFeature.OuterDiameter">
            <summary>
            Gets the OuterDiamter property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.IConduitPathFeature.DefaultShortCode">
            <summary>
            Gets or sets the DefaultShortCode property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitPathFeatHelper.ShortCode">
            <summary>
            Gets or sets the short code property on the Conduit feature.
            This property is shown as "Type" in TaskHost ribbon bar.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitPathFeatHelper.NCD">
            <summary>
            Gets or sets the NCD property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitPathFeatHelper.OptionCode">
            <summary>
            Gets or sets the OptionCode property. 
            This property is shown as "Option" in TaskHost ribbon bar.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitPathFeatHelper.OuterDiameter">
            <summary>
            Gets the outerDiameter property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitPathFeatHelper.DefaultShortCode">
            <summary>
            Gets the DefaultShortCode property. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.CableTrayStockPart">
            <summary>
            CableTrayStockPart is the .NET wrapper class for cable tray part occurrence objects.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.CableTrayStockPart.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the CableTrayStockPart base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.CableTrayStockPart.#ctor">
            <summary>
            Internal constructor for the CableTrayStockPart base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.CableTrayStockPart.Finalize">
            <summary>
            Destructor for the CableTrayStockPart base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.CableTrayStockPart.GetNameRuleHelper">
            <summary>
            Private utility method to get and manage the name rule helper object.
            </summary>
            <returns>m_oSystemChildHelper - Occurrence to the name rule helper object.</returns>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CableTrayStockPart.ActiveNameRule">
             <summary>
             Gets or sets the active name rule assigned to a CableTrayStockPart.
             </summary>
             <returns>Active name rule as Ingr.SP3D.Common.Middle.BusinessObject.</returns>
             <exception cref="T:System.InvalidOperationException">The base object does not support this operation.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidObjectTypeException">The object is not a name rule object.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoAccessException">The user does not have access to read or modify the object.</exception>
            <example>This example explains how to get or set the active name rule.
            <code>
             'Define CableTrayStockPart. 
             Dim oCableTrayStockPart As CableTrayStockPart = Nothing
             Dim oActiveNameRule As BusinessObject
             'Get the active name rule. 
             oActiveNameRule = oCableTrayStockPart.ActiveNameRule 
             ' Set the active name rule. 
             oCableTrayStockPart.ActiveNameRule = oActiveNameRule 
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CableTrayStockPart.StockPartLength">
            <summary>
            Gets or sets the StockPartLength property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CableTrayStockPart.StockPartCutLength">
            <summary>
            Gets or sets the StockPartCutLength property.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.DuctStraightFeature">
            <summary>
            Wrapper for Route DuctStraightFeature class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctStraightFeature.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the DuctStraightFeature base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctStraightFeature.#ctor">
            <summary>
            Public constructor for the DuctStraightFeature base class
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctStraightFeature.Finalize">
            <summary>
            Destructor for the DuctStraightFeature base class
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctStraightFeature.SetUserDefinedInsulation(System.Int32,System.Double)">
            <summary>
            Sets the user-defined insulation.
            </summary>
            <param name="iMaterial">Insulation material.</param>
            <param name="dThickness">Thickness of insulation.</param>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteIncorrectMaterialCodeException">The lMaterial argument is a value that is not in the InsulationMaterial codelist.</exception>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteInvalidInsulationThickessException">The value for dThickness is not defined for the given InsulationMaterial code. </exception>
            <example> This example shows how to set user-defined insulation on DuctStraightFeature.
            <code>
            'Declare the required variables. 
            Dim oDuctFeature As DuctStraightFeature = Nothing
            Dim iMaterial As Int32
            Dim dThickness As Double
            ' Set user-defined insulation on DuctStraightFeature. 
            oDuctFeature.SetUserDefinedInsulation(iMaterial, dThickness)
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctStraightFeature.WallThickness">
            <summary>
            Gets or sets the WallThickness property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctStraightFeature.CrossSectionOrientationAngle">
            <summary>
            Gets or sets the CrossSectionOrientationAngle property. 
            </summary>        
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctStraightFeature.Width">
            <summary>
            Gets or sets the Width property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctStraightFeature.Depth">
            <summary>
            Gets or sets the Depth property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctStraightFeature.CornerRadius">
            <summary>
            Gets or sets the CornerRadius property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctStraightFeature.DimensionalBaseOuter">
            <summary>
            Gets or sets the DimensionalBaseOuter property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctStraightFeature.CrossSectionShape">
            <summary>
            Gets the CrossSectionShape property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctStraightFeature.InsulationMaterial">
            <summary>
            Gets InsulationMaterial property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctStraightFeature.InsulationThickness">
            <summary>
            Gets InsulationThickness property. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.DuctAlongLegFeature">
            <summary>
            Wrapper class for Route DuctAlongLegFeature class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctAlongLegFeature.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the DuctAlongLegFeature base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctAlongLegFeature.#ctor">
            <summary>
            Public constructor for the DuctAlongLegFeature base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctAlongLegFeature.Finalize">
            <summary>
            Destructor for the DuctAlongLegFeature base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctAlongLegFeature.SetUserDefinedInsulation(System.Int32,System.Double)">
            <summary>
            Sets the user-defined insulation.
            </summary>
            <param name="iMaterial">Insulation material.</param>
            <param name="dThickness">Thickness of insulation.</param>        
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteIncorrectMaterialCodeException">The lMaterial argument is a value that is not in the InsulationMaterial codelist.</exception>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteInvalidInsulationThickessException">The value for dThickness is not defined for the given InsulationMaterial code. </exception>
            <example> This example shows how to set user-defined insulation on DuctAlongLegFeature.
            <code>
            'Declare the required variables. 
            Dim oDuctFeature As DuctAlongLegFeature = Nothing
            Dim iMaterial As Int32
            Dim dThickness As Double
            'Set user-defined insulation on DuctAlongLegFeature. 
            oDuctFeature.SetUserDefinedInsulation(iMaterial, dThickness)
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctAlongLegFeature.WallThickness">
            <summary>
            Gets or sets the WallThickness property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctAlongLegFeature.InsulationMaterial">
            <summary>
            Gets InsulationMaterial property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctAlongLegFeature.InsulationThickness">
            <summary>
            Gets InsulationThickness property. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.SpoolHelper">
            <summary>
            The SpoolHelper class helps to create spools.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.SpoolHelper.#ctor">
            <summary>
            Creates a SpoolHelper object.
            </summary>
            <example>
            <code>
            'Create SpoolHelper
            Dim oSpoolHelper = New SpoolHelper()
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.SpoolHelper.CreateSpools(Ingr.SP3D.Common.Middle.ISpoolableObject,Ingr.SP3D.ReferenceData.Middle.Services.SpoolRule,Ingr.SP3D.ReferenceData.Middle.Services.SpoolingType)">
            <summary>
            Creates the pipe/duct spools based on the spool type.
            </summary>
            <param name="oSpoolableObject">SpoolableObject object.</param>
            <param name="oSpoolRule">SpoolRule object.</param>
            <param name="eSpoolingType">Type of spool to be created.</param>
            <exception cref="T:System.ArgumentNullException">The SpoolRule object is null.</exception>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RtePlateNotConnectedToPipeException">No connection exists between the penetration part and the pipe.</exception>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteEmptySpoolableObjectException">Raised when SpoolableObject does not have parts underneath.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">The SpoolableObject is not in working status.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnAccessDeniedException">The current user does not have write permission to the system object.</exception>       
            <example>This example shows how to create spools.
            <code>
            'Get the SpoolableObject from PipeLineSystem or DuctSystem which support ISpoolableObject interface.
            Dim oSpoolableObject As ISpoolableObject = Nothing
            'Create the SpoolRule.
            Dim oSpoolRule As New SpoolRule()
            'Initialize the required SpoolType (in this case PipeSpool) to be created.
            Dim eSpoolingType As SpoolingType
            eSpoolingType = SpoolingType.PipeSpool
            'Create a new SpoolHelper object.
            Dim oSpoolHelper As New SpoolHelper
            'Declare a variable to hold the spools created which will be returned by CreateSpools method.
            Dim oNewSpools As ReadOnlyCollection(Of Spool)
            'Using CreateSpool() method to spool the PipelineSystem/DuctingSystem.
            oNewSpools = oSpoolHelper.CreateSpools(oSpoolableObject, oSpoolRule, eSpoolingType)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.SpoolHelper.CreatePenetrationSpools(Ingr.SP3D.Common.Middle.BusinessObject,Ingr.SP3D.ReferenceData.Middle.Services.SpoolRule)">
            <summary>
            Creates the spools of the specified spool type.
            </summary>
            <param name="oPenetrationPlate">PenetrationPlate object.</param>
            <param name="oSpoolRule">SpoolRule object.</param>
            <exception cref="T:System.ArgumentNullException">The SpoolRule object is null.</exception>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RtePlateNotConnectedToPipeException">No connection exists between the penetration part and the pipe.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">The SpoolableObject is not in working status.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnAccessDeniedException">The current user does not have write permission to the system object.</exception>
            <example>This example shows how to create penetration spools.
            <code>
            'Place a PenetrationPlate (StandardComponent) object which is associated with a pipeline and pass in that PenetrationPlate to this method.
            Dim oPenetrationPlate As BusinessObject = Nothing
            'Create the SpoolRule. (Or get the default spool rule from catalog using GetSpoolRule() method on CatalogOutfittingHelper class.)
            Dim oSpoolRule As New SpoolRule()
            'Create a new SpoolHelper object.
            Dim oSpoolHelper As New SpoolHelper
            'Declare a variable to hold the spools created which will be returned by CreateSpools method.
            Dim oNewSpools As ReadOnlyCollection(Of Spool)
            'Using CreateSpool() method to spool the PipelineSystem/DuctingSystem.
            oNewSpools = oSpoolHelper.CreatePenetrationSpools(oPenetrationPlate, oSpoolRule)
            </code>
            </example>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.ConduitStockPart">
            <summary>
            ConduitStockPart is the .NET wrapper class for Conduit part occurrence objects.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConduitStockPart.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the ConduitStockPart base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConduitStockPart.#ctor">
            <summary>
            Internal constructor for the ConduitStockPart base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConduitStockPart.Finalize">
            <summary>
            Destructor for the ConduitStockPart base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConduitStockPart.GetNameRuleHelper">
            <summary>
            Private utility method to get and manage the name rule helper object.
            </summary>
            <returns>m_oSystemChildHelper - Occurrence to the name rule helper object.</returns>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitStockPart.ActiveNameRule">
             <summary>
             Gets or sets the active name rule assigned to a ConduitStockPart.
             </summary>
             <returns>Active name rule as Ingr.SP3D.Common.Middle.BusinessObject.</returns>
             <exception cref="T:System.InvalidOperationException">The base object does not support this operation.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidObjectTypeException">The object is not a name rule object.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoAccessException">The user does not have access to read or modify the object.</exception>
            <example>This example explains how to get or set the active name rule.
            <code>
             'Define ConduitStockPart. 
             Dim oConduitStockPart As ConduitStockPart = Nothing
             Dim oActiveNameRule As BusinessObject
             'Get the active name rule. 
             oActiveNameRule = oConduitStockPart.ActiveNameRule 
             ' Set the active name rule. 
             oConduitStockPart.ActiveNameRule = oActiveNameRule 
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitStockPart.StockPartLength">
            <summary>
            Gets or sets the StockPartLength property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitStockPart.StockPartCutLength">
            <summary>
            Gets or sets the StockPartCutLength property.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.CablewayTurnTransitionFeature">
            <summary>
            Wrapper for Route CablewayTurnTransitionFeature class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.CablewayTurnTransitionFeature.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the CablewayTurnTransitionFeature base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.CablewayTurnTransitionFeature.#ctor">
            <summary>
            Public constructor for the CablewayTurnTransitionFeature base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.CablewayTurnTransitionFeature.Finalize">
            <summary>
            Destructor for the CablewayTurnTransitionFeature base class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.CablewayEndFeature">
            <summary>
            Wrapper for Route CablewayEndFeature class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.CablewayEndFeature.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the CablewayEndFeature base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.CablewayEndFeature.#ctor">
            <summary>
            Public constructor for the CablewayEndFeature base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.CablewayEndFeature.Finalize">
            <summary>
            Destructor for the CablewayEndFeature base class.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CablewayEndFeature.CrossSectionOrientationAngle">
            <summary>
            Gets or sets the CrossSectionOrientationAngle property. 
            </summary>        
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CablewayEndFeature.Width">
            <summary>
            Gets or sets the Width property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CablewayEndFeature.Depth">
            <summary>
            Gets or sets the Depth property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CablewayEndFeature.CornerRadius">
            <summary>
            Gets or sets the CornerRadius property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CablewayEndFeature.DimensionalBaseOuter">
            <summary>
            Gets or sets the DimensionalBaseOuter property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CablewayEndFeature.CrossSectionShape">
            <summary>
            Gets the CrossSectionShape property. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.PenetrationSpool">
            <summary>
            Class representing PenetrationSpool.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PenetrationSpool.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the PenetrationSpool class.
            </summary>
            <param name="oBOP">Private business object.</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PenetrationSpool.Finalize">
            <summary>
            Destructor for the PenetrationSpool base class.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PenetrationSpool.Parts">
            <summary>
            Gets the parts under the spool.
            </summary>
            <example>This example shows how to get the parts associated with a spool.
            <code>
            'Create a PenetrationSpool object.
            Dim oPenetrationSpool As PenetrationSpool
            Dim oPartsCol As ReadOnlyCollection(Of BusinessObject) = oPenetrationSpool.Parts()
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PenetrationSpool.SpoolableObject">
            <summary>
            Gets the SpoolableObject associated with the penetration spool.
            </summary>
            <example>This example shows how to get the spoolable object associated with a spool.
            <code>
            'Create a PenetrationSpool object.
            Dim oPenetrationSpool As PenetrationSpool
            Dim oSpoolableObject As ISpoolableObject = oPenetrationSpool.SpoolableObject
            </code>
            </example>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.SplitTypes">
            <summary>
            Split types enumerator.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.SplitTypes.SPLIT">
            <summary>
            Mask value to indicate the split type as SPLIT.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.SplitTypes.TAKEDOWN">
            <summary>
            Mask value to indicate the split type as TAKEDOWN.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.SplitTypes.FEATUREBREAK">
            <summary>
            Mask value to indicate the split type as FEATUREBREAK.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.PathFeatureObjectTypes">
            <summary>
            Path feature object types enumerator.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureObjectTypes.PathFeatureType_UNDEFINED">
            <summary>
            Mask value to indicate the UNDEFINED feature type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureObjectTypes.PathFeatureType_ALONG">
            <summary>
            Mask value to indicate the ALONG leg feature type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureObjectTypes.PathFeatureType_BRANCH">
            <summary>
            Mask value to indicate the BRANCH feature type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureObjectTypes.PathFeatureType_END">
            <summary>
            Mask value to indicate the END feature type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureObjectTypes.PathFeatureType_TRANSITION">
            <summary>
            Mask value to indicate the TRANSITION feature type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureObjectTypes.PathFeatureType_STRAIGHT">
            <summary>
            Mask value to indicate the STRAIGHT feature type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureObjectTypes.PathFeatureType_TURN">
            <summary>
            Mask value to indicate the TURN feature type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureObjectTypes.PathFeatureType_SURFACE">
            <summary>
            Mask value to indicate the SURFACE MOUNT feature type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureObjectTypes.PathFeatureType_ENTRYEXIT">
            <summary>
            Mask value to indicate the ENTRYEXIT feature type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureObjectTypes.PathFeatureType_SEGMENT">
            <summary>
            Mask value to indicate the SEGMENT feature type.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.PathFeatureFunctions">
            <summary>
            Path feature functions enumerator.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureFunctions.PathFeatureFunction_UNDEFINED">
            <summary>
            Mask value to indicate the UNDEFINED function type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureFunctions.PathFeatureFunction_ROUTE">
            <summary>
            Mask value to indicate the ROUTE function type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureFunctions.PathFeatureFunction_COMPONENT">
            <summary>
            Mask value to indicate the COMPONENT function type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureFunctions.PathFeatureFunction_SPLIT">
            <summary>
            Mask value to indicate the SPLIT function type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureFunctions.PathFeatureFunction_BRANCHPARENT">
            <summary>
            Mask value to indicate the BRANCHPARENT function type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureFunctions.PathFeatureFunction_RUNCHANGE">
            <summary>
            Mask value to indicate the RUNCHANGE function type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureFunctions.PathFeatureFunction_TAKEDOWN">
            <summary>
            Mask value to indicate the TAKEDOWN function Type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureFunctions.PathFeatureFunction_TRANSITION">
            <summary>
            Mask value to indicate the TRANSITION function type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureFunctions.PathFeatureFunction_PLANNINGSPLIT">
            <summary>
            Mask value to indicate the PLANNINGSPLIT function type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureFunctions.PathFeatureFunction_DEFAULTSPLIT">
            <summary>
            Mask value to indicate the DEFAULTSPLIT function type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureFunctions.PathFeatureFunction_MATING">
            <summary>
            Mask value to indicate the MATING function type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureFunctions.PathFeatureFunction_ATTACHING">
            <summary>
            Mask value to indicate the ATTACHING function type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureFunctions.PathFeatureFunction_ENDLEG">
            <summary>
            Mask value to indicate the ENDLEG function type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureFunctions.PathFeatureFunction_ENTRY">
            <summary>
            Mask value to indicate the ENTRY function type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureFunctions.PathFeatureFunction_EXIT">
            <summary>
            Mask value to indicate the EXIT function type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureFunctions.PathFeatureFunction_FEATUREBREAK">
            <summary>
            Mask value to indicate the FEATUREBREAK function type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureFunctions.PathFeatureFunction_SIZECHANGE">
            <summary>
            Mask value to indicate the SIZECHANGE function type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureFunctions.PathFeatureFunction_DIVISION">
            <summary>
            Mask value to indicate the DIVISION function type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureFunctions.PathFeatureFunction_CONNECTOR">
            <summary>1
            Mask value to indicate the CONNECTOR function type.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.SelectableObjectTypes">
            <summary>
            Path feature Selectable object type functions enumerator.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.SelectableObjectTypes.AlongLegFeature">
            <summary>
            Mask value to indicate the ALONG leg feature type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.SelectableObjectTypes.BranchFeature">
            <summary>
            Mask value to indicate the BRANCH feature type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.SelectableObjectTypes.EndFeature">
            <summary>
            Mask value to indicate the END feature type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.SelectableObjectTypes.TransitionFeature">
            <summary>
            Mask value to indicate the TRANSITION feature type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.SelectableObjectTypes.StraightFeature">
            <summary>
            Mask value to indicate the STRAIGHT feature type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.SelectableObjectTypes.TurnFeature">
            <summary>
            Mask value to indicate the TURN feature type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.SelectableObjectTypes.SurfaceMountFeature">
            <summary>
            Mask value to indicate the SURFACE MOUNT feature type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.SelectableObjectTypes.EntryExitFeature">
            <summary>
            Mask value to indicate the ENTRYEXIT feature type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.SelectableObjectTypes.SegmentFeature">
            <summary>
            Mask value to indicate the SEGMENT feature type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.SelectableObjectTypes.LogicallyConnectedEnd">
            <summary>
            Mask value to indicate the Logically connected end feature type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.SelectableObjectTypes.EquipmentNozzleConnected">
            <summary>
            Mask value to indicate the equipment nozzle connected.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.SelectableObjectTypes.EquipmentNozzleFree">
            <summary>
            Mask value to indicate the equipment nozzle free.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.SelectableObjectTypes.ComponentPortConnected">
            <summary>
            Mask value to indicate the Component port connected type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.SelectableObjectTypes.ComponentPortFree">
            <summary>
            Mask value to indicate the Component port free type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.SelectableObjectTypes.BasePart">
            <summary>
            Mask value to indicate the Base Part feature type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.SelectableObjectTypes.TapFeatureFree">
            <summary>
            Mask value to indicate the Tap Feature Free type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.SelectableObjectTypes.TapFeatureConnected">
            <summary>
            Mask value to indicate the Tap Feature Connected type.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.PipeTapDirection">
            <summary>
            Pipe tap direction enumerator.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PipeTapDirection.PipeTapDirection_PERPENDICULAR">
            <summary>
            Mask value to indicate the tap direction is PERPENDICULAR.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PipeTapDirection.PipeTapDirection_PARALLEL">
            <summary>
            Mask value to indicate the tap direction is PARALLEL.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.StraightTransAlignTypes">
            <summary>
            Enumerated types of transition alignment types.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.StraightTransAlignTypes.CENTERLINE">
            <summary>
            Center line alignment.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.StraightTransAlignTypes.UPPER_RIGHT">
            <summary>
            Upper right alignment.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.StraightTransAlignTypes.UPPER_LEFT">
            <summary>
            Upper left alignment.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.StraightTransAlignTypes.LOWER_LEFT">
            <summary>
            Lower left alignment.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.StraightTransAlignTypes.LOWER_RIGHT">
            <summary>
            Lower right alignment.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.StraightTransAlignTypes.RIGHT_CENTER">
            <summary>
            Right center alignment.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.StraightTransAlignTypes.UPPER_CENTER">
            <summary>
            Upper center alignment.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.StraightTransAlignTypes.LEFT_CENTER">
            <summary>
            Left center alignment.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.StraightTransAlignTypes.LOWER_CENTER">
            <summary>
            Lower center alignment.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.StraightTransAlignTypes.NOT_ALIGNED">
            <summary>
            No alignment.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.TurnTransAlignTypes">
            <summary>
            Enumerated types of turn transition alignment types.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.TurnTransAlignTypes.ALIGN_CENTER">
            <summary>
            Center alignement.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.TurnTransAlignTypes.ALIGN_RIGHT">
            <summary>
            Right alignment.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.TurnTransAlignTypes.ALIGN_LEFT">
            <summary>
            Left alignment.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.TurnTransAlignTypes.NOT_ALIGNED">
            <summary>
            No alignment.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.BranchJustificationTypes">
            <summary>
            Enumerated types of branch justification types.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.BranchJustificationTypes.Undefined">
            <summary>
            Undefined branch justification type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.BranchJustificationTypes.Center">
            <summary>
            Center branch justification type. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.BranchJustificationTypes.Outer">
            <summary>
            Outer branch justification type. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.BranchJustificationTypes.Inner">
            <summary>
            Inner branch justification type. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.BranchOffsetTypes">
            <summary>
            Enumerated types of branch offset types. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.BranchOffsetTypes.Undefined">
            <summary>
            Undefined branch offset type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.BranchOffsetTypes.Center">
            <summary>
            Center branch offset type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.BranchOffsetTypes.Tangential">
            <summary>
            Tangential branch offset type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.BranchOffsetTypes.UserDefined">
            <summary>
            User-defined branch offset type. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.BranchPenetrationTypes">
            <summary>
            Enumerated types of branch penetration types. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.BranchPenetrationTypes.Undefined">
            <summary>
            Undefined branch penetration type. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.BranchPenetrationTypes.Center">
            <summary>
            Center branch penetration type. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.BranchPenetrationTypes.OuterSurface">
            <summary>
            Outer surface branch penetration type. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.BranchPenetrationTypes.InnerSurface">
            <summary>
            Inner surface branch penetration type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.BranchPenetrationTypes.UserDefined">
            <summary>
            User-defined branch penetration type. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.BranchPositionAffinities">
            <summary>
            Enumerated types of branch position affinity types. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.BranchPositionAffinities.Undefined">
            <summary>
            Undefined branch position affinity type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.BranchPositionAffinities.None">
            <summary>
            No branch position affinity type. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.BranchPositionAffinities.Up">
            <summary>
            Up (Z-axis based) branch position affinity type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.BranchPositionAffinities.Down">
            <summary>
            Down (Z-axis based) branch position affinity type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.BranchPositionAffinities.Top">
            <summary>
            Top (C/S V-axis based) branch position affinity type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.BranchPositionAffinities.Bottom">
            <summary>
            Bottom (C/S V-axis based) branch position affinity type.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.TurnTypes">
            <summary>
            Enumerated types of turn types.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.TurnTypes.Default">
            <summary>
            Dafault turn type. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.TurnTypes.Bend">
            <summary>
            Bend turn type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.TurnTypes.Elbow">
            <summary>
            Elbow turn type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.TurnTypes.Miter">
            <summary>
            Miter turn type. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.TurnTypes.TurnComponent">
            <summary>
            Turn component turn type. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.TurnTypes.ElbowReducing">
            <summary>
            Elbow-reducing turn type. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.MountReferencePositions">
            <summary>
            Enumerated types of mount reference positions.
            <img src="Graphics/CommonRoute/MountRefPositions.png" />     
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.MountReferencePositions.Undefined">
            <summary>
            Undefined = 0. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.MountReferencePositions.RightSideBottom">
            <summary>
            Bottom of the right side of the cross section = 1. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.MountReferencePositions.RightSideCenter">
            <summary>
            Center of the right side of cross section = 2. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.MountReferencePositions.RightSideTop">
            <summary>
            Top of the right side of the cross section = 3. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.MountReferencePositions.TopSideRight">
            <summary>
            Right of the top side of the cross section = 4. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.MountReferencePositions.TopSideCenter">
            <summary>
            Center of the top side of the cross section = 5. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.MountReferencePositions.TopSideLeft">
            <summary>
            Left of the top side of the cross section = 6. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.MountReferencePositions.LeftSideTop">
            <summary>
            Top of the let side of the cross section = 7. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.MountReferencePositions.LeftSideCenter">
            <summary>
            Center of the left side of the cross section = 8. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.MountReferencePositions.LeftSideBottom">
            <summary>
            Bottom of the left side of the cross section = 9.  
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.MountReferencePositions.BottomSideLeft">
            <summary>
            Left of  the bottom side of the corss section = 10. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.MountReferencePositions.BottomSideCenter">
            <summary>
            Center of the bottom side of the cross section = 11. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.MountReferencePositions.BottomSideRight">
            <summary>
            Right of the bottom side of the cross section = 12. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.SlopeDirectionTypes">
            <summary>
            Enumerated types of slope direction types.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.SlopeDirectionTypes.NotSloped">
            <summary>
            Not sloped. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.SlopeDirectionTypes.Up">
            <summary>
            Slope direction is up. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.SlopeDirectionTypes.Down">
            <summary>
            Slope direction is down. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.SlopeDirectionTypes.Multiple">
            <summary>
            Slope direction is multiple. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.PipeTapReferenceLeg">
            <summary>
            Enumerated types of pipe tap reference leg. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PipeTapReferenceLeg.None">
            <summary>
            No pipe tap reference leg type. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PipeTapReferenceLeg.PrimaryLeg">
            <summary>
            Primary leg pipe tap reference leg type. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PipeTapReferenceLeg.OtherLeg">
            <summary>
            Other leg pipe tap reference leg type. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.PathFeatureTransitionTypes">
            <summary>
            Enumerated types of path feature transition types. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureTransitionTypes.Undefined">
            <summary>
            Undefined path feature transition type. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureTransitionTypes.StraightParallel">
            <summary>
            Straight parallel path feature transition type. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureTransitionTypes.StraightSlant">
            <summary>
            Straight slant path feature transition type. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureTransitionTypes.Turn">
            <summary>
            Turn path feature transition type. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureTransitionTypes.VanedTurn">
            <summary>
            Vaned turn path feature transition type. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureTransitionTypes.MiterTurn">
            <summary>
            Miter turn path feature transition type. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.PathFeatureAlignCodeTypes">
            <summary>
            Enumerated types of path feature align code types. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureAlignCodeTypes.Undefined">
            <summary>
            Undefined path feature align code type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureAlignCodeTypes.Centerline">
            <summary>
            Centerline path feature align code type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureAlignCodeTypes.UpperRight">
            <summary>
            Upper right path feature align code type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureAlignCodeTypes.UpperLeft">
            <summary>
            Upper left path feature align code type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureAlignCodeTypes.LowerLeft">
            <summary>
            Lower left path feature align code type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureAlignCodeTypes.LowerRight">
            <summary>
            Lower right path feature align code type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureAlignCodeTypes.RightCenter">
            <summary>
            Right center path feature align code type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureAlignCodeTypes.UpperCenter">
            <summary>
            Upper center path feature align code type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureAlignCodeTypes.LeftCenter">
            <summary>
            Left center path feature align code type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureAlignCodeTypes.LowerCenter">
            <summary>
            Lower center path feature align code type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureAlignCodeTypes.NotAligned">
            <summary>
            Not-aligned path feature align code type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureAlignCodeTypes.Center">
            <summary>
            Center path feature align code type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureAlignCodeTypes.Corner1">
            <summary>
            Corner 1 path feature align code type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.PathFeatureAlignCodeTypes.Corner2">
            <summary>
            Corner 2 path feature align code type.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.RteTapFeatTypes">
            <summary>
            Enumerated types for TapFeature.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.RteTapFeatTypes.RteTapFeatFlags_User_Inserted">
            <summary>
            User-inserted tap feature.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.RteTapFeatTypes.RteTapFeatFlags_System_Generated">
            <summary>
            System-generated tap feature.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.RteObjectCategoryType">
            <summary>
            Enumerated types for Route Part category
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.RteObjectCategoryType.RTE_UNDEFINED_OBJECT">
            <summary>
            Undefined type = 1
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.RteObjectCategoryType.RTE_COMPONENT_OBJECT">
            <summary>
            Component type = 2
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.RteObjectCategoryType.RTE_INSTRUMENT_OBJECT">
            <summary>
            Instrument type = 3
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.RteObjectCategoryType.RTE_SPECIALTY_OBJECT">
            <summary>
            Speciality type - 4
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.RteVolumePlanes">
            <summary>
            Enumerated types-Plane type of a volume.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.RteVolumePlanes.None">
            <summary>
            No planed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.RteVolumePlanes.XPositive_Pln">
            <summary>
            Positive X-plane.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.RteVolumePlanes.XNegative_Pln">
            <summary>
            Negative X-plane.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.RteVolumePlanes.YPositive_Pln">
            <summary>
            Positive Y-plane.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.RteVolumePlanes.YNegative_Pln">
            <summary>
            Negative Y-plane.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.RteVolumePlanes.ZPositive_Pln">
            <summary>
            Positive Z-plane.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.RteVolumePlanes.ZNegative_Pln">
            <summary>
            Negative Z-plane.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.RteVolumePlanes.AllPln">
            <summary>
            All planes.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.RteSpaceVolumeType">
            <summary>
            Enumerated types-Space Volume Type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.RteSpaceVolumeType.RTE_VOLUMETYPE_AREA">
            <summary>
            VOLUMETYPE: Area Volume = 0
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.RteSpaceVolumeType.RTE_VOLUMETYPE_DWGVOLUME">
            <summary>
            VOLUMETYPE: Drawing Volume = 1
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.RteSpaceVolumeType.RTE_VOLUMETYPE_INTERFERENCEVOLUME">
            <summary>
            VOLUMETYPE: Intrerference Volume = 2
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.RteSpaceVolumeType.RTE_VOLUMETYPE_ZONE">
            <summary>
            VOLUMETYPE: Zone Volume = 3
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.RteSpaceVolumeType.RTE_VOLUMETYPE_ALL_SPACEENITY">
            <summary>
            VOLUMETYPE: All space Volumes =  4
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.RteObjectTypeForVolRule">
            <summary>
            Enumerated object type to be used for volume rule
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.RteObjectTypeForVolRule.RTE_OBJECTTYPE_CABLERUN">
            <summary>
            Object type Cable run = 0
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.RteObjectTypeForVolRule.RTE_OBJTYPE_CABLEWAY">
            <summary>
            Object type cableway = 1
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.RteObjectTypeForVolRule.RTE_OBJTYPE_CONDUITRUN">
            <summary>
            Object type conduit run = 2
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.RteObjectTypeForVolRule.RTE_OBJTYPE_EQUIPMENT">
            <summary>
            Object type equipment = 3
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.RteObjectTypeForVolRule.RTE_OBJTYPE_VOLUME">
            <summary>
            object type All volumes =  4
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.RteObjectTypeForVolRule.RTE_OBJTYPE_ZONE">
            <summary>
            object type zone volume =  5
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.RteObjectTypeForVolRule.RTE_OBJTYPE_AREA">
            <summary>
            object type area volume =  6
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.RteObjectTypeForVolRule.RTE_OBJTYPE_INRFERENCEVOL">
            <summary>
            object type interference volumes =  7
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.RteObjectTypeForVolRule.RTE_OBJTYPE_DWGVOL">
            <summary>
            object type drawing volumes =  7
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.RteCableTrayComponentClass">
            <summary>
            Enumerated object type to be used for CableTray Component.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.RteCableTrayComponentClass.CABLETRAY_UNDEFINED">
            <summary>
            Object type Cable run = 0
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.RteCableTrayComponentClass.CABLETRAY_INLINE">
            <summary>
            Object type cabletray inline = 1
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.RteCableTrayComponentClass.CABLETRAY_END">
            <summary>
            Object type cabletray end = 2
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.RteCableTrayComponentClass.CABLETRAY_TURN">
            <summary>
            Object type cabletray turn = 3
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.RteCableTrayComponentClass.CABLETRAY_BRANCHPARENT">
            <summary>
            object type cable tray branchparent =  4
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.RteCableTrayComponentClass.CABLETRAY_ENDLEG">
            <summary>
            object type cabletray end leg =  5
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.RteCableTrayComponentClass.CABLETRAY_TRANSITION">
            <summary>
            object type cable tray transition =  6
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Route.Middle.RteCableTrayComponentClass.CABLETRAY_STRAIGHT">
            <summary>
            object type cable tray Straight =  7
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.CARVolumeRule">
            <summary>
            Abstract Base class need to be implemented for the writting of Voulme Rule for cable auto routing.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.CARVolumeRule.CARVolumeRuleMethod(Ingr.SP3D.Route.Middle.CableRun,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.BusinessObject},System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.BusinessObject},System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.BusinessObject})">
            <summary>
            Triggers the rule.
            </summary>
            <param name="cableRun">Input cable run.</param>
            <param name="redundantCableColl">Redundant cable Collection.</param>
            <param name="avoidancePlnColl">Collection of avoidance planes.</param>
            <param name="avoidanceVolColl">Collection of avoidance volume.</param>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CARVolumeRule.CARVolZoneHelper">
            <summary>
            Gets or sets public member variable CARVolZoneHelper.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.IAlongLegFeature">
            <summary>
            Properties and methods common to all along leg features.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.IBranchFeature">
            <summary>
            Properties and methods common to all branch features.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.ITurnFeature">
            <summary>
            Properties and methods common to all turn features.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.IEndFeature">
            <summary>
            Properties and methods common to all end features.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.IStraightFeature">
            <summary>
            Properties and methods common to all straight features.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.RouteHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteHelper.GetFeatureTypeAndAllowedPlacementTypeForEngineeringTag(System.String,System.String,System.Double,System.String,System.Double,System.String,System.String,System.Double,System.Double,Ingr.SP3D.Route.Middle.PathFeatureObjectTypes@,System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Route.Middle.SelectableObjectTypes}@,Ingr.SP3D.Route.Middle.PathFeatureFunctions@)">
            <summary>
            Returns the list of allowable object types, the inseting feature type and the inserting feature function type.
            </summary>
            <param name="tag">Tag that needs to be placed</param>
            <param name="pipeSpecName">Name of the spec to be placed</param>
            <param name="firstSize">First size diameter</param>
            <param name="firstSizeUnits">Units of the first size diameter</param>
            <param name="secondSize">Second size diameter</param>
            <param name="secondSizeUnits">Units of Second size</param>
            <param name="multiSizeOption">The option code selected</param>
            <param name="minTemperature">The minimum temperature for the spec</param>
            <param name="maxTemperature">Maximum temperature of the spec</param>
            <param name="insertingFeatureType">The feature Type</param>
             <param name="selectableObjectTypesForPlacement">List of allowable objects that can be placed</param>
            <param name="insertingFeatureFunctionType">Out the feature function type </param>
            <exception cref="T:System.ArgumentNullException">Thrown when the tag or spec name is null</exception>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteHelper.GetFeatureTypeAndAllowedPlacementTypeForShortCode(System.String,System.String,System.Double,System.String,System.Double,System.String,Ingr.SP3D.Route.Middle.PathFeatureObjectTypes@,System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Route.Middle.SelectableObjectTypes}@,Ingr.SP3D.Route.Middle.PathFeatureFunctions@)">
            <summary>
             Returns the list of allowable object types, the inseting feature type and the inserting feature function type.
            </summary>
            <param name="specName">Spec Name as string</param>
            <param name="shortCode">Short Code as string</param>
            <param name="firstSize">First Size as double</param>
            <param name="firstSizeUnits">First Size Units as string</param>
            <param name="secondSize">Second size as double</param>
            <param name="secondSizeUnits">Second Size units as string</param>
            <param name="insertingFeatureType">out the type of inserting feature</param>
            <param name="selectableObjectTypesForPlacement">list of selectable objects that can be placed</param>
            <param name="insertingFeatureFunctionType">out function type of the inserting feature</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.RouteHelper.GetFeatureTypeAndAllowedPlacementTypeForPart(Ingr.SP3D.ReferenceData.Middle.Part,System.String,Ingr.SP3D.Route.Middle.PathFeatureObjectTypes@,System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Route.Middle.SelectableObjectTypes}@,Ingr.SP3D.Route.Middle.PathFeatureFunctions@)">
            <summary>
            For a given Part ,Returns the list of allowable object types, the inseting feature type and the inserting feature function type.
            </summary>
            <param name="part"> Part</param>
            <param name="specName">Spec name of the Feature whose part needs to be inserted.It is compulsory for the Pipe parts, for others could be null</param>
            <param name="insertingFeatureType">Out type of the inserting feature</param>
            <param name="allowedPlacementTypes">allowed objects that could be Placed</param>
            <param name="insertingFeatureFunctionType">Path Feature function type of the inserting feature.</param>
            <exception cref="T:System.ArgumentNullException">This is thrown when the Part sent as input is neither CableTray Part or HVAC Part </exception>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.PipeStockPart">
            <summary>
            PipeStockPart is the .NET wrapper class for pipe part occurrence objects.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeStockPart.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the PipeStockPart base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeStockPart.#ctor">
            <summary>
            Public constructor for the PipeStockPart base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeStockPart.Finalize">
            <summary>
            Destructor for the PipeStockPart base class.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeStockPart.FieldLinerThickness">
            <summary>
            Gets the FieldLinearThickness property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeStockPart.ColdSpringLength">
            <summary>
            Gets or sets the ColdSpringLength property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeStockPart.StockPartLength">
            <summary>
            Gets or sets the StockPartLength property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeStockPart.StockPartCutLength">
            <summary>
            Gets or sets the StockPartCutLength property.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.RouteStockPort">
            <summary>
            RouteStockPort class is a base class for all route stock ports.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.RouteStockPort.IsConnected">
            <summary>
            Gets a boolean which indicates whether the port is free or connected.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.RouteStockPort.Location">
            <summary>
            Gets the port location.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.RouteStockPort.NormalVector">
            <summary>
            Gets the port's normal vector.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.RouteStockPort.PortStatus">
            <summary>
            Gets the port status.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.RouteStockPort.RadialVector">
            <summary>
            Gets the port's radial vector.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.RouteStockPort.Connectable">
            <summary>
            Gets the connectable part.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.RouteStockPort.Connections">
            <summary>
            Gets a collection of the port's connections.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.RouteStockPort.PortType">
            <summary>
            Gets the port type.
            </summary>
            <remarks>
            <list type="table">
               <listheader>
                   <term>PortType</term>
                   <description>Description</description>
               </listheader>
               <item>
                   <term>All = 1</term>
                   <description>All port type.</description>
               </item>    
               <item>
                   <term>Piping = 2</term>
                   <description>Piping port type.</description>
               </item>
               <item>
                   <term>Duct = 3</term>
                   <description>Duct port type.</description>
               </item>
               <item>
                   <term>Cable = 4</term>
                   <description>Cable port type.</description>
               </item>
               <item>
                   <term>Foundation = 5</term>
                   <description>Foundation port type.</description>
               </item>
               <item>
                   <term>Cabletray = 6</term>
                   <description>Cabletray port type.</description>
               </item>
               <item>
                   <term>Conduit = 7</term>
                   <description>Conduit port type.</description>
               </item>
               <item>
                   <term>Edge = 8</term>
                   <description>Edge port type.</description>
               </item>
               <item>
                   <term>Face = 9</term>
                   <description>Face port type.</description>
               </item>
               <item>
                   <term>End = 10</term>
                   <description>End port type.</description>
               </item>
               <item>
                   <term>Centerline = 11</term>
                   <description>Centerline port type.</description>
               </item>
            </list>
            </remarks>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.PipeStockPort">
            <summary>
            Pipe stock part port definition.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeStockPort.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor which takes private business object as input.
            </summary>
            <param name="oPBO">Private business object.</param>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeStockPort.EndPractice">
            <summary>
            Gets the end practice value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeStockPort.EndPreparation">
            <summary>
            Gets the end preperation value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeStockPort.EndStandard">
            <summary>
            Gets the end standard value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeStockPort.FlangeOrHubOutsideDiameter">
            <summary>
            Gets the flange or hub outside diameter.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeStockPort.FlangeOrHubThickness">
            <summary>
            Gets the flange or hub thickness.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeStockPort.FlangeOrMechanicalGrooveWidth">
            <summary>
            Gets or flange or mechanical groove width.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeStockPort.FlangeProjectionOrSocketOffset">
            <summary>
            Gets the flange projection or socket offset.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeStockPort.FlowDirection">
            <summary>
            Gets the flow direction.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeStockPort.Id">
            <summary>
            Gets the port ID.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeStockPort.LinerThicknessAtFaceOfFlange">
            <summary>
            Gets the port's linear thickness at the face of flange.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeStockPort.LinerThicknessAtInsideDiameter">
            <summary>
            Gets the linear thickness at inside diameter.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeStockPort.NPD">
            <summary>
            Gets the port's nominal pipe diameter.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeStockPort.PipingOutsideDiameter">
            <summary>
            Gets the piping outside diameter.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeStockPort.PipingPointBasis">
            <summary>
            Gets the piping point basis.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeStockPort.PortIndex">
            <summary>
            Gets the port index of pipe stock port.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeStockPort.PressureRating">
            <summary>
            Gets the pressure rating value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeStockPort.RaisedFaceOrSocketDiameter">
            <summary>
            Gets the value of raised face or socket diameter.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeStockPort.RatingPractice">
            <summary>
            Gets the rating practice.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeStockPort.ReinforcedWallThickness">
            <summary>
            Gets the reinforced wall thickness.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeStockPort.SchedulePractice">
            <summary>
            Gets the schedule practice.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeStockPort.ScheduleThickness">
            <summary>
            Gets the schedule thickness.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeStockPort.SeatingOrGrooveOrSocketDepth">
            <summary>
            Gets the depth of seating, groove, or socket.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeStockPort.TerminationClass">
            <summary>
            Gets the termination class.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeStockPort.TerminationSubClass">
            <summary>
            Gets the termination subclass.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeStockPort.WallThicknessOrGrooveSetback">
            <summary>
            Gets the wall thickness or groove set back.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.CableTrayStockPort">
            <summary>
            Cable tray stock port class definition.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.CableTrayStockPort.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Default constructor which takes private business object as input.
            </summary>
            <param name="oPBO">Private business object.</param>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CableTrayStockPort.ActualDepth">
            <summary>
            Gets the actual depth of a cable tray stock port.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CableTrayStockPort.ActualWidth">
            <summary>
            Gets the actual width of a cable tray stock port.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CableTrayStockPort.LoadDepth">
            <summary>
            Gets the load depth of a cable tray stock port.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CableTrayStockPort.LoadWidth">
            <summary>
            Gets the load width of a cable tray stock port.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CableTrayStockPort.NominalDepth">
            <summary>
            Gets the nominal depth of a cable tray stock port.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CableTrayStockPort.NominalWidth">
            <summary>
            Gets the nominal width of a cable tray stock port.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CableTrayStockPort.PortIndex">
            <summary>
            Gets the port index of a cable tray stock port. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CableTrayStockPort.OrientationAngle">
            <summary>
            Gets the orientation angle of a cable tray stock port. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.ConduitStockPort">
            <summary>
            Conduit stock port class definition.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConduitStockPort.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor which takes private business object as input.
            </summary>
            <param name="oPBO">Private business object.</param>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitStockPort.ConduitDiameter">
            <summary>
            Gets the conduit diameter value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitStockPort.EndPractice">
            <summary>
            Gets the end practice value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitStockPort.EndPreparation">
            <summary>
            Gets the end preparation value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitStockPort.EndStandard">
            <summary>
            Gets the end standard value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitStockPort.HubOutsideDiameter">
            <summary>
            Gets the hub outside diameter value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitStockPort.HubThickness">
            <summary>
            Gets the hub thickness value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitStockPort.ID">
            <summary>
            Gets the port ID.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitStockPort.NCD">
            <summary>
            Gets the nominal diameter of a conduit stock port.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitStockPort.PortIndex">
            <summary>
            Gets the port index of conduit stock port.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitStockPort.SchedulePractice">
            <summary>
            Gets the schedule practice value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitStockPort.ScheduleThickness">
            <summary>
            Gets the schedule thickness value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitStockPort.WallThickness">
            <summary>
            Gets the wall thickness value.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.DuctStockPort">
            <summary>
            Duct stock port class definition.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctStockPort.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor which takes private business object as input.
            </summary>
            <param name="oPBO">Private business object.</param>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctStockPort.ConnectPortOffset">
            <summary>
            Gets the connect port offset value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctStockPort.EndPreparation">
            <summary>
            Gets the end preparation value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctStockPort.FlangeWidth">
            <summary>
            Gets the flange width value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctStockPort.FlowDirection">
            <summary>
            Gets the flow direction value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctStockPort.PortDepth">
            <summary>
            Gets the port depth value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctStockPort.PortIndex">
            <summary>
            Gets the port index of a conduit stock port.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctStockPort.Thickness">
            <summary>
            Gets the thickness value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctStockPort.CornerRadius">
            <summary>
            Gets the corner radius of duct stock port.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctStockPort.CrossSectionShape">
            <summary>
            Gets the cross section shape of a duct stock port.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctStockPort.Depth">
            <summary>
            Gets the cross section depth of a duct stock port.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctStockPort.DimensionBaseOuter">
            <summary>
            Returns True if it is a dimension base outer.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctStockPort.Width">
            <summary>
            Gets the cross section width of a duct stock port.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctStockPort.OrientationAngle">
            <summary>
            Gets the orientation angle of a duct stock port.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.DuctSplitFeature">
            <summary>
            Wrapper class for Route DuctSplitFeature class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctSplitFeature.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the DuctSplitFeature base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctSplitFeature.#ctor">
            <summary>
            Public constructor for the DuctSplitFeature base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctSplitFeature.Finalize">
            <summary>
            Destructor for the DuctSplitFeature base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctSplitFeature.SetUserDefinedInsulation(System.Int32,System.Double)">
            <summary>
            Sets the user-defined insulation.
            </summary>
            <param name="iMaterial">Insulation material.</param>
            <param name="dThickness">Thickness of insulation.</param>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteIncorrectMaterialCodeException">The lMaterial argument is a value that is not in the InsulationMaterial codelist.</exception>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteInvalidInsulationThickessException">The value for dThickness is not defined for the given InsulationMaterial code. </exception>
            <example> This example shows how to set user-defined insulation on DuctSplitFeature.
            <code>
            'Declare the required variables. 
            Dim oDuctFeature As DuctSplitFeature = Nothing
            Dim iMaterial As Int32
            Dim dThickness As Double
            ' Set user-defined insulation on DuctSplitFeature. 
            oDuctFeature.SetUserDefinedInsulation(iMaterial, dThickness)
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctSplitFeature.WidthSlope">
            <summary>
            Gets or sets the WidthSlope property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctSplitFeature.DepthSlope">
            <summary>
            Gets or sets the DepthSlope property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctSplitFeature.SlopeNormal">
            <summary>
            Gets or sets the SlopeNormal property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctSplitFeature.WallThickness">
            <summary>
            Gets or sets the WallThickness property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctSplitFeature.InsulationMaterial">
            <summary>
            Gets InsulationMaterial property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctSplitFeature.InsulationThickness">
            <summary>
            Gets InsulationThickness property. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.CablewaySlantTransitionFeature">
            <summary>
            Wrapper class for Route class CablewaySlantTransitionFeature.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.CablewaySlantTransitionFeature.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the CablewaySlantTransitionFeature base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.CablewaySlantTransitionFeature.#ctor">
            <summary>
            Public constructor for the CablewaySlantTransitionFeature base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.CablewaySlantTransitionFeature.Finalize">
            <summary>
            Destructor for the CableTraySlantTransFeature base class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.PipeTapFeature">
            <summary>
             PipeTapFeature class is the .NET wrapper class representing a PipeTapFeature object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeTapFeature.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the PipeTapFeature class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeTapFeature.#ctor">
            <summary>
            Private constructor for the PipeTapFeature class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeTapFeature.Finalize">
            <summary>
            Destructor for the PipeTapFeature class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeTapFeature.#ctor(Ingr.SP3D.Route.Middle.RouteFeature,System.String,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Route.Middle.PipeTapDirection)">
            <summary>
            Public constructor for the PipeTapFeature class.
            </summary>
            <param name="FeatToTap">Pipe feature on which the tap must be placed.</param>
            <param name="TapNumber">Tap number from the tap property data sheet specifying the tap to be placed.</param>
            <param name="LocationOfTap">Position of the tap on the feature to be tapped.</param>
            <param name="TapDirectionVector">Direction vector of the tap.</param>
            <param name="TapDirection">Direction of the tap to be placed. This can be parallel or perpendicular in case of turn or end leg components; for all other cases it must be perpendicular.</param>
            <exception cref="T:System.ArgumentNullException">Cannot set null value.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Feature to be tapped is not a pipe feature.</exception>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteInvalidTapNumber">No tap is defined in the catalog with the specified tap number.</exception>       
            <example>Explains how to call the PipeTapFeature constructor.
            <code>
            'Define input arguments.
            Dim oFeatureToTap As RouteFeature = Nothing
            Dim sTapNumber As String = ""
            Dim oTapLocation As Position = Nothing
            Dim oTapDirVec As Vector = Nothing
            Dim eTapDirection As PipeTapDirection = Nothing
            'Call PipeTapFeature constructor.
            Dim oPiprTapFeature = New PipeTapFeature(oFeatureToTap, sTapNumber, oTapLocation, oTapDirVec, eTapDirection)
            </code></example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeTapFeature.Angle">
            <summary>
            Gets or sets the Angle property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeTapFeature.TapNumber">
            <summary>
            Gets or sets the Tap Number property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeTapFeature.ReferenceLeg">
            <summary>
            Gets or sets the Reference Leg property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeTapFeature.TapDirection">
            <summary>
            Gets or sets the Tap Direction property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeTapFeature.DistanceFromReference">
            <summary>
            Gets or sets the Distance From Reference property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeTapFeature.ReferencePortIndex">
            <summary>
            Gets or sets the Reference Port Index property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeTapFeature.Location">
            <summary>
            Gets the Location property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeTapFeature.Direction">
            <summary>
            Gets the Direction property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeTapFeature.TapFeatFlag">
            <summary>
            Gets and Sets the TapFeatureType property. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.ConduitStraightFeature">
            <summary>
            Wrapper for the route ConduitStraightFeature class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConduitStraightFeature.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the ConduitStraightFeature base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConduitStraightFeature.#ctor">
            <summary>
            Public constructor for the ConduitStraightFeature base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConduitStraightFeature.Finalize">
            <summary>
            Destructor for the ConduitStraightFeature base class.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitStraightFeature.ShortCode">
            <summary>
             Gets or sets the short code property on the ConduitAlongLegFeature class.
             This property is shown as "Type" in TaskHost ribbon bar.
            </summary>
             <example>This example shows how to get or set the shortcode property on ConduitAlongLegFeature.
             <code>
             Dim sShortCode As string
             'Get shortcode on ConduitAlongLegFeature
             sShortCode = oConduitAlongLegFeature.ShortCode
             'Define shortcode
             sShortCode = "TEE"
             'Set shortcode on ConduitAlongLegFeature    
             oConduitAlongLegFeature.ShortCode = sShortCode
             </code>
             </example>        
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitStraightFeature.NCD">
            <summary>
            Gets or sets the NCD value. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitStraightFeature.OptionCode">
            <summary>
            Gets or sets the OptionCode property. 
            This property is shown as "Option" in TaskHost ribbon bar.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitStraightFeature.OuterDiameter">
            <summary>
            Gets the OuterDiameter Property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitStraightFeature.DefaultShortCode">
            <summary>
            Gets the DefaultShortCode property. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.PipeCurveFeature">
            <summary>
            PipeCurveFeature class is the .NET wrapper class representing a PipeCurveFeature object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeCurveFeature.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Public constructor for the PipeCurveFeature base class
            </summary>
            <param name="oPBO"></param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeCurveFeature.Finalize">
            <summary>
            Destructor for the PipeCurveFeature base class
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.PipeTurnFeature">
            <summary>
             PipeTurnFeature class is the .NET wrapper class representing a PipeTurnFeature object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeTurnFeature.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the PipeTurnFeature base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeTurnFeature.#ctor">
            <summary>
            Public constructor for the PipeTurnFeature base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeTurnFeature.Finalize">
            <summary>
            Destructor for the PipeTurnFeature base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeTurnFeature.SetInsulationSpec(Ingr.SP3D.ReferenceData.Middle.PipeInsulationSpec)">
            <summary>
            Sets the insulation specification assigned to the feature. This method validates the insulation temperature on the feature  
            before setting the insulation specification on the feature.
            </summary>
            <param name="PipeInsulationSpec">Insulation specification object to set.</param>
            <example>Explains how to call the SetInsulationSpec method.
            <code>
            'Define Pipe turn feature.
            Dim oPipeTurnFeat As PipeTurnFeature = Nothing
            'Define input arguments.
            Dim oPipeInslSpec As PipeInsulationSpec = Nothing        
            'Call SetInsulationSpec method.
            oPipeTurnFeat.SetInsulationSpec(oPipeInslSpec)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeTurnFeature.SetInsulationSpec(Ingr.SP3D.ReferenceData.Middle.PipeInsulationSpec,System.Double)">
            <summary>
            Assigns the insulation specification to the feature. The insulation temperature will be validated and set on the feature.
            </summary>
            <param name="PipeInsulationSpec">Insulation specification object to set.</param>
            <param name="InsulationTemperature">Insulation temperature value to set.</param>
            <example>Explains how to call the SetInsulationSpec method.
            <code>
            'Define Pipe turn feature.
            Dim oPipeTurnFeat As PipeTurnFeature = Nothing
            'Define input arguments.
            Dim oPipeInslSpec As PipeInsulationSpec = Nothing
            Dim dInslTemp As Double = 300
            'Call SetInsulationSpec method.
            oPipeTurnFeat.SetInsulationSpec(oPipeInslSpec, dInslTemp)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeTurnFeature.SetUserDefinedInsulation(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Sets the user-defined insulation.
            </summary>
            <param name="iPurpose">Purpose of the insulation.</param>
            <param name="iMaterial">Insulation material.</param>
            <param name="dThickness">Thickness of insulation.</param>
            <param name="dTemperature">Temperature rating of the insulation.</param>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteIncorrectPurposeCodeException">The lPurpose argument is a value that is not in the InsulationPurpose codelist.</exception>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteIncorrectMaterialCodeException">The lMaterial argument is a value that is not in the InsulationMaterial codelist.</exception>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteInvalidInsulationThickessException">The value for dThickness is not defined for the given InsulationMaterial code. </exception>
            <example> This example shows how to set user-defined insulation on PipeTurnFeature.
            <code>
            'Declare the required variables. 
            Dim oPipeFeature As PipeTurnFeature = Nothing
            Dim iPurpose As Int32
            Dim iMaterial As Int32
            Dim dThickness As Double
            Dim dTemperature As Double
            ' Set user-defined insulation on PipeTurnFeature. 
            oPipeFeature.SetUserDefinedInsulation(iPurpose, iMaterial, dThickness, dTemperature)
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeTurnFeature.ShortCode">
            <summary>
             Gets or sets the Short Code property.
             This property is shown as "Type" in the TaskHost ribbon bar.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeTurnFeature.InsulationSpec">
            <summary>
             Gets the Insulation Specification property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeTurnFeature.MultiSizeOption">
            <summary>
            Gets or sets the MultiSizeOption property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeTurnFeature.Tag">
            <summary>
            Gets or sets the Tag property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeTurnFeature.NPD">
            <summary>
            Gets or sets the NPD (nominal pipe diameter) property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeTurnFeature.OptionCode">
            <summary>
            Gets or sets the Option Code property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeTurnFeature.OuterDiameter">
            <summary>
            Gets or sets the Outer Diameter property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeTurnFeature.DefaultShortCode">
            <summary>
            Gets or sets the Default Short Code property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeTurnFeature.InsulationPurpose">
            <summary>
            Gets the Insulation Purpose property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeTurnFeature.InsulationMaterial">
            <summary>
            Gets the Insulation Material property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeTurnFeature.InsulationThickness">
            <summary>
            Gets the Insulation Thickness property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeTurnFeature.InsulationTemperature">
            <summary>
            Gets the Insulation Temperature property. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.ConduitTurnFeature">
            <summary>
            Wrapper for the route ConduitTurnFeature class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConduitTurnFeature.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the ConduitTurnFeature base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConduitTurnFeature.#ctor">
            <summary>
            Public constructor for the ConduitTurnFeature base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConduitTurnFeature.Finalize">
            <summary>
            Destructor for the ConduitTurnFeature base class.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitTurnFeature.ShortCode">
            <summary>
             Gets or sets the short code property on the ConduitAlongLegFeature class.
             This property is shown as "Type" in TaskHost ribbon bar.
            </summary>
             <example>This example shows how to get or set the shortcode property on ConduitAlongLegFeature.
             <code>
             Dim sShortCode As string
             'Get shortcode on ConduitAlongLegFeature
             sShortCode = oConduitAlongLegFeature.ShortCode
             'Define shortcode
             sShortCode = "TEE"
             'Set shortcode on ConduitAlongLegFeature    
             oConduitAlongLegFeature.ShortCode = sShortCode
             </code>
             </example>        
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitTurnFeature.NCD">
            <summary>
            Gets or sets the NCD value. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitTurnFeature.OptionCode">
            <summary>
            Gets or sets the OptionCode property. 
            This property is shown as "Option" in TaskHost ribbon bar.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitTurnFeature.OuterDiameter">
            <summary>
            Gets the OuterDiameter Property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitTurnFeature.DefaultShortCode">
            <summary>
            Gets the DefaultShortCode property. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.ConduitAlongLegFeature">
            <summary>
            Wrapper class for route ConduitAlongLegFeature class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConduitAlongLegFeature.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the ConduitAlongLegFeature base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConduitAlongLegFeature.#ctor">
            <summary>
            Public constructor for the ConduitAlongLegFeature base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConduitAlongLegFeature.Finalize">
            <summary>
            Destructor for the ConduitAlongLegFeature base class.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitAlongLegFeature.SecondaryNCD">
            <summary>
            Gets the SecondaryNCD property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitAlongLegFeature.ShortCode">
            <summary>
             Gets or sets the short code property on the ConduitAlongLegFeature class.
             This property is shown as "Type" in TaskHost ribbon bar. 
            </summary>
             <example>This example shows how to get or set the shortcode property on ConduitAlongLegFeature.
             <code>
             Dim sShortCode As string
             'Get shortcode on ConduitAlongLegFeature
             sShortCode = oConduitAlongLegFeature.ShortCode
             'Define shortcode
             sShortCode = "TEE"
             'Set shortcode on ConduitAlongLegFeature    
             oConduitAlongLegFeature.ShortCode = sShortCode
             </code>
             </example>        
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitAlongLegFeature.NCD">
            <summary>
            Gets or sets the NCD value. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitAlongLegFeature.OptionCode">
            <summary>
            Gets or sets the OptionCode property. 
            This property is shown as "Option" in TaskHost ribbon bar.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitAlongLegFeature.OuterDiameter">
            <summary>
            Gets the OuterDiameter Property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitAlongLegFeature.DefaultShortCode">
            <summary>
            Gets the DefaultShortCode property. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.DuctTurnTransitionFeature">
            <summary>
            Wrapper for Route DuctTurnTransitionFeature class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctTurnTransitionFeature.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the DuctTurnTransitionFeature base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctTurnTransitionFeature.#ctor">
            <summary>
            Public constructor for the DuctTurnTransitionFeature base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctTurnTransitionFeature.Finalize">
            <summary>
            Destructor for the DuctTurnTransitionFeature base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctTurnTransitionFeature.SetUserDefinedInsulation(System.Int32,System.Double)">
            <summary>
            Sets the user-defined insulation.
            </summary>
            <param name="iMaterial">Insulation material.</param>
            <param name="dThickness">Thickness of insulation.</param>        
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteIncorrectMaterialCodeException">The lMaterial argument is a value that is not in the InsulationMaterial codelist.</exception>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteInvalidInsulationThickessException">The value for dThickness is not defined for the given InsulationMaterial code. </exception>
            <example> This example shows how to set user-defined insulation on DuctTurnTransitionFeature.
            <code>
            'Declare the required variables. 
            Dim oDuctFeature As DuctTurnTransitionFeature = Nothing
            Dim iMaterial As Int32
            Dim dThickness As Double
            ' Set user-defined insulation on DuctTurnTransitionFeature. 
            oDuctFeature.SetUserDefinedInsulation(iMaterial, dThickness)
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctTurnTransitionFeature.WallThickness">
            <summary>
            Gets or sets the WallThickness property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctTurnTransitionFeature.InsulationMaterial">
            <summary>
            Gets InsulationMaterial property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctTurnTransitionFeature.InsulationThickness">
            <summary>
            Gets InsulationThickness property. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.CablewayStraightFeature">
            <summary>
            Wrapper for Route CablewayStraightFeature class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.CablewayStraightFeature.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the CablewayStraightFeature base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.CablewayStraightFeature.#ctor">
            <summary>
            Public constructor for the CablewayStraightFeature base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.CablewayStraightFeature.Finalize">
            <summary>
            Destructor for the CablewayStraightFeature base class.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CablewayStraightFeature.CrossSectionOrientationAngle">
            <summary>
            Gets or sets the CrossSectionOrientationAngle property. 
            </summary>        
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CablewayStraightFeature.Width">
            <summary>
            Gets or sets the Width property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CablewayStraightFeature.Depth">
            <summary>
            Gets or sets the Depth property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CablewayStraightFeature.CornerRadius">
            <summary>
            Gets or sets the CornerRadius property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CablewayStraightFeature.DimensionalBaseOuter">
            <summary>
            Gets or sets the DimensionalBaseOuter property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CablewayStraightFeature.CrossSectionShape">
            <summary>
            Gets the CrossSectionShape property. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.CablewayBranchFeature">
            <summary>
            Wrapper for Route CablewayBranchFeature class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.CablewayBranchFeature.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the CablewayBranchFeature base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.CablewayBranchFeature.#ctor">
            <summary>
            Public constructor for the CablewayBranchFeature base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.CablewayBranchFeature.Finalize">
            <summary>
            Destructor for the CablewayBranchFeature base class.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CablewayBranchFeature.CrossSectionOrientationAngle">
            <summary>
            Gets or sets the CrossSectionOrientationAngle property. 
            </summary>        
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CablewayBranchFeature.Width">
            <summary>
            Gets or sets the Width property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CablewayBranchFeature.Depth">
            <summary>
            Gets or sets the Depth property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CablewayBranchFeature.CornerRadius">
            <summary>
            Gets or sets the CornerRadius property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CablewayBranchFeature.DimensionalBaseOuter">
            <summary>
            Gets or sets the DimensionalBaseOuter property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CablewayBranchFeature.CrossSectionShape">
            <summary>
            Gets the CrossSectionShape property. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.CablewayAlongLegFeature">
            <summary>
            Wrapper class for Route class CablewayAlongLegFeature.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.CablewayAlongLegFeature.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the CablewayAlongLegFeature base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.CablewayAlongLegFeature.#ctor">
            <summary>
            Public constructor for the CablewayAlongLegFeature base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.CablewayAlongLegFeature.Finalize">
            <summary>
            Destructor for the CablewayAlongLegFeature base class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.ConnectionItem">
            <summary>
            ConnectionItem is an abstract class and contains the common information for 
            various connection items such as PipeGasket, PipeWeld, PipeMechanicalItem, and PipeBoltSet.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConnectionItem.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the ConnectionItem base class.
            </summary>
            <param name="oPBO">Private business object.</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConnectionItem.#ctor">
            <summary>
            Public constructor for the ConnectionItem base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConnectionItem.Finalize">
            <summary>
            Destructor for the ConnectionItem base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConnectionItem.GetAssemblyChildHelper">
            <summary>
            Gets the assembly child helper instance.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConnectionItem.WBSItemParents">
            <summary>
            Returns the collection of WBS parents.
            </summary>
            <example>This example explains how to get WBSItemParents of a ConnectionItem.
            <code>
            'Get the ConnectionItem. 
            Dim oConnectionItem As PipeBoltSet = Nothing  'This can be Gasket, Weld or a MechImpliedItem.
            'Get WBSItemParents from Connection. 
            Dim oWBSParentsCollection As ReadOnlyCollection(Of IWBSItem) = oConnectionItem.WBSItemParents 
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConnectionItem.WBSProjects">
            <summary>
            Returns the collection of WBS projects.
            </summary>
            <example>This example explains how to get WBSProjects of a ConnectionItem.
            <code>
            'Get the ConnectionItem. 
            Dim oConnectionItem As PipeBoltSet = Nothing  'This can be Gasket, Weld or a MechImpliedItem.
            'Get WBSProjects from Connection. 
            Dim oWBSProjectsCollection As ReadOnlyCollection(Of IWBSProject) = oConnectionItem.WBSProjects
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConnectionItem.Connection">
            <summary>
            Returns the route connection of this connection item.
            </summary>
            <example>This example explains how to use the Connection property on a connection item.
            <code>
            'Declare a connection item.
            Dim oConnectionItem As ConnectionItem = Nothing
            'Call Connection property on connection item to get its connection.
            Dim oConnection As Connection = oConnectionItem.Connection
            </code></example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConnectionItem.AssemblyParent">
            <summary>
            Gets or Sets Assembly parent to the Connection Items.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.PipeGasket">
            <summary>
            PipeGasket class is a connection item.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeGasket.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the PipeGasket base class.
            </summary>
            <param name="oPBO">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeGasket.#ctor">
            <summary>
            Public constructor for the PipeGasket base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeGasket.Finalize">
            <summary>
            Destructor for the PipeGasket base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeGasket.ValidateCodelistValue(System.String,System.Int32)">
            <summary>
            Validates the codelist value.
            </summary>
            <param name="sTableName">Codelist table name.</param>
            <param name="iCodeListValue">Codelist value.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnIncorrectCodelistValueException">Incorrect code list value.</exception>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeGasket.GetParentValue(System.String,System.Int32)">
            <summary>
            Gets the parent codelist value. 
            </summary>
            <param name="sTableName">Child codelist table name.</param>
            <param name="iCodelistValue">Child codelist value.</param>
            <returns>Parent codelist value.</returns>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeGasket.GasketOption">
            <summary>
            Gets or sets the GasketOption property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeGasket.GasketSelectionBasis">
            <summary>
            Gets the GasketSelectionBasis property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeGasket.GasketReportingRequirements">
            <summary>
            Gets the GasketReportingRequirements property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeGasket.GasketReportingClassification">
            <summary>
            Gets or sets the GasketReportingClassification property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeGasket.GasketSizedCommodityCode">
            <summary>
            Gets the GasketSizedCommodityCode property. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.PipeWeld">
            <summary>
            PipeWeld class is a connection item.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeWeld.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the PipeWeld base class.
            </summary>
            <param name="oPBO">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeWeld.#ctor">
            <summary>
            Public constructor for the PipeWeld base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeWeld.Finalize">
            <summary>
            Destructor for the PipeWeld base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeWeld.ValidateCodelistValue(System.String,System.Int32)">
            <summary>
            Validates the codelist value.
            </summary>
            <param name="sTableName">Codelist table name.</param>
            <param name="iCodeListValue">Codelist value.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnIncorrectCodelistValueException">Incorrect code list value.</exception>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeWeld.GetParentValue(System.String,System.Int32)">
            <summary>
            Gets the parent codelist value. 
            </summary>
            <param name="sTableName">Child codelist table name.</param>
            <param name="iCodelistValue">Child codelist value.</param>
            <returns>Parent codelist value.</returns>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeWeld.SetUserDefinedName(System.String)">
             <summary>
             Sets the name of an item.
             </summary>
             <param name="Name">The new name string.</param>
            <example>This example explains how to set the name.
            <code>
             'Define PipeWeld. 
             Dim oPipeWeld As PipeWeld = Nothing
             oPipeWeld.SetUserDefinedName("PipeWeldItem-1")
            </code>
            </example>
            
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeWeld.GetNamedItemHelper">
            <summary>
            Private utility method to get and manage the named item helper object.
            </summary>
            <returns>m_oNamedItemHelper - Occurrence of the named item helper object.</returns>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeWeld.GetNameRuleHelper">
            <summary>
            Private utility method to get and manage the name rule helper object.
            </summary>
            <returns>m_oSystemChildHelper - Occurrence to the name rule helper object.</returns>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeWeld.SequenceNumber">
            <summary>
            Gets the SequenceNumber property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeWeld.WeldType">
            <summary>
            Gets or sets the WeldType property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeWeld.WeldTypeBasis">
            <summary>
            Gets the WeldTypeBasis property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeWeld.WeldClass">
            <summary>
            Gets the WeldClass property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeWeld.WeldMaterialsGrade">
            <summary>
            Gets or sets the WeldMaterialsGrade property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeWeld.WeldMaterialsCategory">
            <summary>
            Gets the WeldMaterialsCategory property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeWeld.Height">
            <summary>
            Gets the Height property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeWeld.FieldFitLength">
            <summary>
            Gets the FieldFitLength property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeWeld.ClearanceDiameter">
            <summary>
            Gets the ClearanceDiameter property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeWeld.ClearanceLength">
            <summary>
            Gets the ClearanceLength property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeWeld.Thickness">
            <summary>
            Gets the Thickness property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeWeld.WeldGap">
            <summary>
            Gets the WeldGap property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeWeld.WPSNumber">
            <summary>
            Gets or sets the Welding Procedure Specification (WPS) Number property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeWeld.PassLength">
            <summary>
            Gets the weld length as the PassLength property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeWeld.Location">
            <summary>
            Gets the Location property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeWeld.Direction">
            <summary>
            Gets the Direction property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeWeld.Name">
             <summary>
             Gets the read-only name.
             </summary>
            <example>This example explains how to get the name.
            <code>
             'Define PipeWeld. 
             Dim oPipeWeld As PipeWeld = Nothing
             Dim sName As String
             sName = oPipeWeld.Name
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeWeld.ActiveNameRule">
             <summary>
             Gets or sets the active name rule assigned to a pipe weld.
             </summary>
             <returns>Active name rule as Ingr.SP3D.Common.Middle.BusinessObject.</returns>
             <exception cref="T:System.InvalidOperationException">The base object does not support this operation.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidObjectTypeException">The object is not a name rule object.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoAccessException">The user does not have access to read or modify the object.</exception>
            <example>This example explains how to get or set the active name rule.
            <code>
             'Define PipeWeld. 
             Dim oPipeWeldItem As PipeWeld = Nothing
             Dim oActiveNameRule As BusinessObject
             'Get the active name rule. 
             oActiveNameRule = oPipeWeldItem.ActiveNameRule 
             ' Set the active name rule. 
             oPipeWeldItem.ActiveNameRule = oActiveNameRule 
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeWeld.Range">
            <summary>
            Gets or sets the range of the pipe weld.
            </summary>
            <returns>Range box implying the range of the current object.</returns>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.PipeMechanicalItem">
            <summary>
            PipeMechanicalItem class is a connection item.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeMechanicalItem.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the PipeMechanicalItem base class.
            </summary>
            <param name="oPBO">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeMechanicalItem.#ctor">
            <summary>
            Public constructor for the PipeMechanicalItem base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeMechanicalItem.Finalize">
            <summary>
            Destructor for the PipeMechanicalItem base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeMechanicalItem.SetUserDefinedName(System.String)">
             <summary>
             Sets the name of an item.
             </summary>
             <param name="Name">The new name string.</param>
            <example>This example explains how to set the name.
            <code>
             'Define PipeMechanicalItem. 
             Dim oPipeMechItem As PipeMechanicalItem = Nothing
             oPipeMechItem.SetUserDefinedName("PipeMechItem-1")
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeMechanicalItem.GetNamedItemHelper">
            <summary>
            Private utility method to get and manage the named item helper object.
            </summary>
            <returns>m_oNamedItemHelper - Occurrence of the named item helper object.</returns>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeMechanicalItem.GetNameRuleHelper">
            <summary>
            Private utility method to get and manage the name rule helper object.
            </summary>
            <returns>m_oSystemChildHelper - Occurrence to the name rule helper object.</returns>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeMechanicalItem.ClampOption">
            <summary>
            Gets or sets the ClampOption property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeMechanicalItem.OrientationAngle">
            <summary>
            Gets or sets the OrientationAngle property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeMechanicalItem.Name">
             <summary>
             Gets the read-only name.
             </summary>
            <example>This example explains how to get the name.
            <code>
             'Define PipeMechanicalItem. 
             Dim oPipeMechItem As PipeMechanicalItem = Nothing
             Dim sName As String
             sName = oPipeMechItem.Name
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeMechanicalItem.ActiveNameRule">
             <summary>
             Gets or sets the active name rule assigned to a pipe mechanical item.
             </summary>
             <returns>Active name rule as Ingr.SP3D.Common.Middle.BusinessObject.</returns>
             <exception cref="T:System.InvalidOperationException">The base object does not support this operation.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidObjectTypeException">The object is not a name rule object.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoAccessException">The user does not have access to read or modify the object.</exception>
            <example>This example explains how to get or set the active name rule.
            <code>
             'Define PipeMechanicalItem. 
             Dim oPipeMechItem As PipeMechanicalItem = Nothing
             Dim oActiveNameRule As BusinessObject
             'Get the active name rule. 
             oActiveNameRule = oPipeMechItem.ActiveNameRule 
             'Set the active name rule. 
             oPipeMechItem.ActiveNameRule = oActiveNameRule 
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeMechanicalItem.Range">
            <summary>
            Gets or sets the range of the mechanical item.
            </summary>
            <returns>Range box implying the range of the current object.</returns>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.PipeBoltSet">
            <summary>
            PipeBoltSet class is a connection item.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeBoltSet.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the PipeBoltSet base class.
            </summary>
            <param name="oPBO">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeBoltSet.#ctor">
            <summary>
            Public constructor for the PipeBoltSet base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeBoltSet.Finalize">
            <summary>
            Destructor for the PipeBoltSet base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeBoltSet.ValidateCodelistValue(System.String,System.Int32)">
            <summary>
            Validates the codelist value.
            </summary>
            <param name="sTableName">Codelist table name.</param>
            <param name="iCodeListValue">Codelist value.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnIncorrectCodelistValueException">Incorrect code list value.</exception>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeBoltSet.GetParentValue(System.String,System.Int32)">
            <summary>
            Gets the parent codelist value. 
            </summary>
            <param name="sTableName">Child codelist table name.</param>
            <param name="iCodelistValue">Child codelist value.</param>
            <returns>Parent codelist value.</returns>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeBoltSet.NumberOfBolts">
            <summary>
            Gets the NumberOfBolts property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeBoltSet.BoltOption">
            <summary>
            Gets or sets the BoltOption property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeBoltSet.CalculatedLength">
            <summary>
            Gets the CalculatedLength property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeBoltSet.RoundedLength">
            <summary>
            Gets the RoundedLength property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeBoltSet.BoltSelectionBasis">
            <summary>
            Gets or sets the BoltSelectionBasis property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeBoltSet.BoltDiameter">
            <summary>
            Gets the BoltDiameter property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeBoltSet.BoltLengthRoundOffBasis">
            <summary>
            Gets the BoltLengthRoundOffBasis property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeBoltSet.BoltReportingRequirements">
            <summary>
            Gets the BoltReportingRequirements property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeBoltSet.BoltReportingClassification">
            <summary>
            Gets or sets the BoltReportingClassification property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeBoltSet.RegularBolts">
            <summary>
            Gets the RegularBolts property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeBoltSet.NumberOfNuts">
            <summary>
            Gets the NumberOfNuts property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeBoltSet.NutOption">
            <summary>
            Gets or sets the NutOption property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeBoltSet.NutSelectionBasis">
            <summary>
            Gets the NutSelectionBasis property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeBoltSet.NutReportingRequirements">
            <summary>
            Gets the NutReportingRequirements property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeBoltSet.NutReportingClassfication">
            <summary>
            Gets or sets the property for the nut reporting classification. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeBoltSet.NutSizedCommodityCode">
            <summary>
            Gets the NutSizedCommodityCode property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeBoltSet.NumberOfWashers">
            <summary>
            Gets the NumberOfWashers property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeBoltSet.WasherOption">
            <summary>
            Gets or sets the WasherOption property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeBoltSet.WasherSelectionBasis">
            <summary>
            Gets the WasherSelectionBasis property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeBoltSet.WasherReportingRequirements">
            <summary>
            Gets the WasherReportingRequirements property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeBoltSet.WasherReportingClassification">
            <summary>
            Gets or sets the WasherReportingClassification property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeBoltSet.WasherSizedCommodityCode">
            <summary>
            Gets the WasherSizedCommodityCode property. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.DuctSpool">
            <summary>
            Class representing DuctSpool.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctSpool.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the DuctSpool class.
            </summary>
            <param name="oBOP">Private business object.</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctSpool.Finalize">
            <summary>
            Destructor for the DuctSpool base class.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctSpool.Parts">
            <summary>
            Gets the parts under the spool.
            </summary>
            <example>This example shows how to get the parts associated with a spool.
            <code>
            'Get parts associated with a spool.
            'Create a DuctSpool object.
            Dim oDuctSpool As DuctSpool
            Dim oPartsCol As ReadOnlyCollection(Of BusinessObject) = oDuctSpool.Parts()
            </code>
            </example>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.DuctBranchFeature">
            <summary>
            Wrapper for Route DuctBranchFeature class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctBranchFeature.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the DuctBranchFeature base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctBranchFeature.#ctor">
            <summary>
            Public constructor for the DuctBranchFeature base class
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctBranchFeature.Finalize">
            <summary>
            Destructor for the DuctBranchFeature base class
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctBranchFeature.SetUserDefinedInsulation(System.Int32,System.Double)">
            <summary>
            Sets the user-defined insulation.
            </summary>
            <param name="iMaterial">Insulation material.</param>
            <param name="dThickness">Thickness of insulation.</param>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteIncorrectMaterialCodeException">The lMaterial argument is a value that is not in the InsulationMaterial codelist.</exception>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteInvalidInsulationThickessException">The value for dThickness is not defined for the given InsulationMaterial code. </exception>
            <example> This example shows how to set user-defined insulation on DuctBranchFeature.
            <code>
            'Declare the required variables. 
            Dim oDuctFeature As DuctBranchFeature = Nothing
            Dim iMaterial As Int32
            Dim dThickness As Double
            ' Set user-defined insulation on DuctBranchFeature. 
            oDuctFeature.SetUserDefinedInsulation(iMaterial, dThickness)
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctBranchFeature.WallThickness">
            <summary>
            Gets or sets the WallThickness property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctBranchFeature.CrossSectionOrientationAngle">
            <summary>
            Gets or sets the CrossSectionOrientationAngle property. 
            </summary>        
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctBranchFeature.Width">
            <summary>
            Gets or sets the Width property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctBranchFeature.Depth">
            <summary>
            Gets or sets the Depth property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctBranchFeature.CornerRadius">
            <summary>
            Gets or sets the CornerRadius property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctBranchFeature.DimensionalBaseOuter">
            <summary>
            Gets or sets the DimensionalBaseOuter property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctBranchFeature.CrossSectionShape">
            <summary>
            Gets the CrossSectionShape property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctBranchFeature.InsulationMaterial">
            <summary>
            Gets InsulationMaterial property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctBranchFeature.InsulationThickness">
            <summary>
            Gets InsulationThickness property. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.ConduitRun">
            <summary>
            ConduitRun is the .NET wrapper class for conduit run objects.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConduitRun.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private business object wrapper constructor for conduit runs.
            </summary>
            <param name="oBOP">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConduitRun.#ctor(Ingr.SP3D.Common.Middle.ISystem,Ingr.SP3D.Common.Middle.Services.NominalDiameter,System.String)">
            <summary>
            Public constructor for the conduit run wrapper class.
            </summary>
            <param name="oParentSystem">Parent of the new conduit run.</param>
            <param name="oNCD">Nominal diamter class object which contains nominal diameter units and unit type information.</param>
            <param name="strConduitSpecName">Name of the conduit specification for the new conduit run.</param>
            <exception cref="T:System.ArgumentNullException">Cannot set null value.</exception>
            <exception cref="T:System.ArgumentException">Invalid argument exception.</exception>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteInvalidSpecException">No specification exists for the given specification name.</exception>        
            <example>This example shows how to create conduit run for a given NCD, conduit spec name.
            <code>
            'Create the conduit run.
            Dim oConduitRun1 As ConduitRun
            'Create Nominal Diameter and define its Size and Units properties of the conduit run to be placed
            Dim oNCD As New NominalDiameter 
            'Create Conduit system under which the conduit run has to be created
            Dim oConduitSys As ConduitSystem = Nothing
            'Define Conduit spec name for the conduit run to be created
            Dim sConduitSpecName As String = Nothing
            'Call ConduitRun constructor which takes System parent, NCD, and conduit spec name as arguments to create conduit run
            oConduitRun1 = New ConduitRun(oConduitSys, oNCD, sConduitSpecName)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConduitRun.#ctor(Ingr.SP3D.Common.Middle.ISystem,Ingr.SP3D.Common.Middle.Services.NominalDiameter,Ingr.SP3D.ReferenceData.Middle.ConduitSpec)">
            <summary>
            Public constructor for the conduit run wrapper class.
            </summary>
            <param name="oParentSystem">Parent of the new conduit run.</param>
            <param name="oNCD">Nominal diamter class object which contains nominal diameter units and unit type information.</param>
            <param name="oConduitSpec">ConduitSpec object for the new conduit Run.</param>
            <exception cref="T:System.ArgumentNullException">Cannot set null value.</exception>
            <exception cref="T:System.ArgumentException">Invalid argument exception.</exception>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteInvalidSpecException">No specification exists for the given specification object.</exception>
            <example>This example shows how to create conduit run for a given NCD, conduit spec.
            <code>
            'Create the conduit run.
            Dim oConduitRun1 As ConduitRun
            'Create Nominal Diameter and define its Size and Units properties of the conduit run to be placed.
            Dim oNCD As New NominalDiameter 
            'Create Conduit system under which the Conduit run has to be created
            Dim oConduitSys As ConduitSystem = Nothing
            'Define Conduit spec for the conduit run to be created
            Dim oConduitSpec As ConduitSpec = Nothing
            'Call ConduitRun Constructor which takes System parent, NCD, and conduit spec as arguments to create conduit run
            oConduitRun1 = New ConduitRun(oConduitSys, oNCD, oConduitSpec)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConduitRun.#ctor(Ingr.SP3D.Route.Middle.ConduitRun)">
            <summary>
            ConduitRun copy constructor.
            </summary>
            <param name="ConduitRunToCopy">ConduitRun</param>
            <exception cref="T:System.ArgumentNullException">Cannot set null value.</exception>
            <example>This example shows how to create a copy of conduit run object.
            <code>
            'Create the conduit run.
            Dim oConduitRun As ConduitRun, oConduitRunCopy As ConduitRun = Nothing
            'To create a copy of conduit run call CopyConstructor which takes conduit run as an argument 
            oConduitRunCopy = New ConduitRun(oConduitRun)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConduitRun.Finalize">
            <summary>
            Destructor for the conduit run wrapper class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConduitRun.RouteBetweenPointAndPoint(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.ConduitEndFeature@)">
            <summary>
            Routes from a point on the current run to another point.
            </summary>
            <param name="oFromPosition">The point on the current run from which the leg is to start.</param>
            <param name="oToPosition">The point to which the leg is to be routed.</param>
            <param name="oConduitEndFeature">The new end feature at the end of the new leg.</param>
            <exception cref="T:System.ArgumentNullException">An input argument is null.</exception>
            <example>This example shows how to route a conduit between point and point.
            <code>
            'Create the conduit run.
            Dim oConduitRun1 As ConduitRun
            'Define oFromPosition, oToPosition from where the route has to start and end
            Dim oFromPosition As Position = Nothing
            Dim oToPosition As Position = Nothing
            'Using RouteBetweenPointAndPoint() route a conduit between point and point
            Dim oCEFeat As RouteFeature = Nothing
            oConduitRun1.RouteBetweenPointAndPoint(oFromPosition, oToPosition, oCEFeat)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConduitRun.RouteBetweenEndFeatureAndPoint(Ingr.SP3D.Route.Middle.ConduitEndFeature,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.ConduitEndFeature@)">
            <summary>
            Routes from an end feature on the current run to a point.
            </summary>
            <param name="oConduitEndFeature">End feature on the current run at which the leg is to start.</param>
            <param name="oPosition">Position at which the leg is to end.</param>
            <param name="oNewConduitEndFeature">Newly created end feature at given position.</param>
            <exception cref="T:System.ArgumentNullException">An input argument is null.</exception>
            <example>This example shows how to route a conduit between end feature and point.
            <code>
            'Create the conduit run.
            Dim oConduitRun1 As ConduitRun
            'Define oToPosition        
            Dim oToPosition As Position = Nothing
            'Define EndFeature
            Dim oCEFeat As ConduitEndFeature = Nothing
            'Using RouteBetweenEndFeatureAndPoint() route a conduit between end feature and point
            oConduitRun1.RouteBetweenEndFeatureAndPoint(oCEFeat, oToPosition)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConduitRun.RouteBetweenBranchAndBranch(Ingr.SP3D.Route.Middle.ConduitStraightFeature,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.ConduitStraightFeature,Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Routes between two branch features.
            </summary>
            <param name="oFromStraightFeatute">Conduit straight feature on which we are branching out.</param>
            <param name="oBranchFromPosition">Start position from the straight feature.</param>
            <param name="oToStraightFeature">Conduit straight feature on which to branch in.</param>
            <param name="oBranchToPosition">Position to end the route.</param>
            <example>This example shows how to route a conduit between branch and branch.
            <code>
            'Create the conduit run.
            Dim oConduitRun1 As ConduitRun
            'Define oBranchFromPosition, oBranchToPosition from where the route has to start and end
            Dim oBranchFromPosition As Position = Nothing
            Dim oBranchToPosition As Position = Nothing
            'Define oFromStraightFeatute, oToStraightFeature
            Dim oFromStraightFeatute As ConduitStraightFeature = Nothing
            Dim oToStraightFeature As ConduitStraightFeature = Nothing
            'Using RouteBetweenBranchAndBranch() route a conduit between branch and branch
            oConduitRun1.RouteBetweenBranchAndBranch(oFromStraightFeatute, oFromPosition, oToStraightFeature, oToPosition)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConduitRun.RouteBetweenPortAndBranch(Ingr.SP3D.Equipment.Middle.DistributionPort,Ingr.SP3D.Route.Middle.ConduitStraightFeature,Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Routes between port and branch feature.
            </summary>
            <param name="oPort">Distribution port.</param>
            <param name="oConduitStraightFeature">Conduit straight feature on which to create the branch.</param>
            <param name="oBranchPosition">Position on the conduit straight feature.</param>
            <exception cref="T:System.ArgumentNullException">An input argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">An input argument
             is of the wrong type.</exception>
            <example>This example shows how to route a conduit between port and branch.
            <code>
            'Create the conduit run.
            Dim oConduitRun1 As ConduitRun
            'Define oBranchPosition         
            Dim oBranchPosition As Position = Nothing
            'Define oConduitStraightFeature
            Dim oConduitStraightFeature As ConduitStraightFeature = Nothing 
            'Define oPort from where conduit has to be routed
            Dim oPort As DistributionPort = Nothing
            'Using RouteBetweenPortAndBranch() route a conduit between port and branch
            oConduitRun1.RouteBetweenPortAndBranch(oPort,oConduitStraightFeature, oBranchPosition)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConduitRun.RouteBetweenPortAndEndFeature(Ingr.SP3D.Equipment.Middle.DistributionPort,Ingr.SP3D.Route.Middle.ConduitEndFeature)">
            <summary>
            Routes from a port to an end feature.
            </summary>
            <param name="oPort">Port on the current run.</param>
            <param name="oConduitEndFeature">Destination end feature on another run.</param>
            <exception cref="T:System.ArgumentNullException">An input argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">An input argument
             is of the wrong type.</exception>
            <example>This example shows how to route a conduit between port and end feature.
            <code>
            'Create the conduit run.
            Dim oConduitRun1 As ConduitRun        
            'Define oConduitEndFeature
            Dim oConduitEndFeature As ConduitEndFeature = Nothing 
            'Define oPort from where conduit has to be routed
            Dim oPort As DistributionPort = Nothing
            'Using RouteBetweenPortAndEndFeature() route a conduit between port and end feature
            oConduitRun1.RouteBetweenPortAndEndFeature(oPort,oConduitEndFeature)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConduitRun.RouteBetweenBranchAndPoint(Ingr.SP3D.Route.Middle.ConduitStraightFeature,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.ConduitEndFeature@)">
            <summary>
            Routes from branch to a point.
            </summary>
            <param name="oConduitStraightFeature">Conduit straight feature on which to branch out.</param>
            <param name="oBranchPosition">Start branch position.</param>
            <param name="oPosition">Position at which the leg is to start.</param>
            <param name="oConduitEndFeature">The new conduit end feature at the end of the new leg.</param>
            <exception cref="T:System.ArgumentNullException">An input argument is null.</exception>
            <example>This example shows how to route a conduit between branch and point.
            <code>
            'Create the conduit run.
            Dim oConduitRun1 As ConduitRun
            'Define oBranchPosition, oPosition 
            Dim oBranchPosition As Position = Nothing
            Dim oPosition As Position = Nothing
            'Define oConduitStraightFeature, oConduitEndFeature
            Dim oConduitStraightFeature As ConduitStraightFeature = Nothing 
            Dim oConduitEndFeature As ConduitEndFeature = Nothing
            'Using RouteBetweenBranchAndPoint() route a conduit between branch and point
            oConduitRun1.RouteBetweenBranchAndPoint(oConduitStraightFeature, oBranchPosition, oPosition, oConduitEndFeature)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConduitRun.RouteBetweenBranchAndEndFeature(Ingr.SP3D.Route.Middle.ConduitStraightFeature,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.ConduitEndFeature)">
            <summary>
            Routes from branch to end feature.
            </summary>
            <param name="oConduitStraightFeature">Conduit straight feature on which to branch out.</param>
            <param name="oBranchPosition">Branch position from the straight feature.</param>
            <param name="oConduitEndFeature">Conduit end feature at which to route.</param>
            <exception cref="T:System.ArgumentNullException">An input argument is null.</exception>
            <example>This example shows how to route a conduit between branch and end feature.
            <code>
            'Create the conduit run.
            Dim oConduitRun1 As ConduitRun
            'Define oBranchPosition, oPosition 
            Dim oBranchPosition As Position = Nothing        
            'Define oConduitStraightFeature, oConduitEndFeature
            Dim oConduitStraightFeature As ConduitStraightFeature = Nothing 
            Dim oConduitEndFeature As ConduitEndFeature = Nothing
            'Using RouteBetweenBranchAndEndFeature() route a conduit between branch and end feature
            oConduitRun1.RouteBetweenBranchAndEndFeature(oConduitStraightFeature, oBranchPosition, oConduitEndFeature)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConduitRun.RouteBetweenEndFeatureAndEndFeature(Ingr.SP3D.Route.Middle.ConduitEndFeature,Ingr.SP3D.Route.Middle.ConduitEndFeature)">
            <summary>
            Routes between two end features.
            </summary>
            <param name="oFromConduitEndFeature">End feature on the current run at which the leg is to start.</param>
            <param name="oToConduitEndFeature">End feature on a different run at which the leg is to end.</param>
            <exception cref="T:System.ArgumentNullException">An input argument is null.</exception>
            <example>This example shows how to route a conduit between branch and end feature.
            <code>
            'Create the conduit run.
            Dim oConduitRun1 As ConduitRun              
            'Define oFromConduitEndFeature, oToConduitEndFeature
            Dim oFromConduitEndFeature As ConduitEndFeature = Nothing 
            Dim oToConduitEndFeature As ConduitEndFeature = Nothing
            'Using RouteBetweenEndFeatureAndEndFeature() route a conduit between end feature and end feature
            oConduitRun1.RouteBetweenEndFeatureAndEndFeature(oFromConduitEndFeature, oToConduitEndFeature)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConduitRun.RouteBetweenPortAndPoint(Ingr.SP3D.Equipment.Middle.DistributionPort,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.ConduitEndFeature@)">
            <summary>
            Routes the conduit from the given port to the given point.
            </summary>
            <param name="oPort">Conduit port.</param>
            <param name="oPosition">Point</param>
            <param name="oConduitEndFeature">Returns conduit end path feature.</param>
            <exception cref="T:System.ArgumentNullException">Given inputs are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Given inupts are invalid.</exception>
            <example>This example shows how to route a conduit between port and point.
            <code>
            'Create the conduit run.
            Dim oConduitRun1 As ConduitRun
            'Define oPosition         
            Dim oPosition As Position = Nothing
            'Define oConduitEndFeature
            Dim oConduitEndFeature As ConduitEndFeature = Nothing 
            'Define oPort from where conduit has to be routed
            Dim oPort As DistributionPort = Nothing
            'Using RouteBetweenPortAndPoint() route a conduit between port and point
            oConduitRun1.RouteBetweenPortAndPoint(oPort, oPosition, oConduitEndFeature)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConduitRun.RouteBetweenPortAndPort(Ingr.SP3D.Equipment.Middle.DistributionPort,Ingr.SP3D.Equipment.Middle.DistributionPort)">
            <summary>
            Routes from a port on the current run to a port on another run.
            </summary>
            <param name="oFromPort">Port on the current run.</param>
            <param name="oToPort">Port on another run.</param>
            <exception cref="T:System.ArgumentNullException">An input argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">An input argument
            is of the wrong type.</exception>
            <example>This example shows how to route a conduit between port and port.
            <code>
            'Create the conduit run.
            Dim oConduitRun1 As ConduitRun        
            'Define oFromPort, oToPort 
            Dim oFromPort As DistributionPort = Nothing
            Dim oToPort As DistributionPort = Nothing
            'Using RouteBetweenPortAndPort() to route a conduit between port and port
            oConduitRun1.RouteBetweenPortAndPort(oFromPort, oToPort)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConduitRun.InsertFeatureByShortCodeOnFeature(System.String,System.Int32,Ingr.SP3D.Route.Middle.RouteFeature,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.RouteRun,Ingr.SP3D.Route.Middle.RouteFeature@)">
            <summary>
            Inserts a feature identified by its short code.
            </summary>
            <param name="sShortCode">Short code that identifies the feature to be inserted.</param>
            <param name="iOptionCode">Option code that further identifies the feature to be inserted.</param>
            <param name="oInsertOnFeature">Target feature onto which the feature is being inserted.</param>
            <param name="oInsertAtPos">Insertion position.</param>
            <param name="oSecondaryRun">Input; secondary run, required if inserting a branch or a run change.</param>
            <param name="oInsertedFeature">Output; feature that was inserted.</param>
            <exception cref="T:System.ArgumentNullException">An input argument
            is null. </exception>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteInvalidShortCode">The short code 
            is invalid.</exception>
            <example>This example shows how to insert a feature.
            <code>
            'Create the conduit run.
            Dim oConduitRun1 As ConduitRun        
            'Define sShortCode, lOptionCode 
            Dim sShortCode As String = Nothing
            Dim iOptionCode As Integer = Nothing            
            'Define oInsertOnFeature,oInsertAtPos,oSecondaryRun
            Dim oInsertOnFeature As RouteFeature = Nothing
            Dim oInsertedFeature As RouteFeature = Nothing
            Dim oInsertAtPos As Position = Nothing
            Dim oSecondaryRun As RouteRun = Nothing        
            'Call InsertFeatureByShortCodeOnFeature() to insert feature
            oConduitRun1.InsertFeatureByShortCodeOnFeature(sShortCode, iOptionCode, oInsertOnFeature, oInsertAtPos, oSecondaryRun, oInsertedFeature)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConduitRun.InsertFeatureByShortCodeOnPort(System.String,System.Int32,Ingr.SP3D.Equipment.Middle.DistributionPort,Ingr.SP3D.Route.Middle.RouteRun,Ingr.SP3D.Route.Middle.RouteFeature@)">
            <summary>
            Inserts a feature on a port.  The feature is identified by its short code.
            </summary>
            <param name="sShortCode">Short code that identifies the feature to be inserted.</param>
            <param name="iOptionCode">Option code that further identifies the feature to be inserted.</param>
            <param name="oInsertOnPort">Port onto which the feature is to be inserted.</param>
            <param name="oSecondaryRun">Input; secondary run, required if inserting a branch or a run change.</param>
            <param name="oInsertedFeature">Output; feature that was inserted.</param>
            <exception cref="T:System.ArgumentNullException">An input argument is null. </exception>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteInvalidShortCode">The short code 
            is invalid.</exception>
            <example>This example shows how to insert a feature.
            <code>
            'Create the conduit run.
            Dim oConduitRun1 As ConduitRun        
            'Define sShortCode, lOptionCode 
            Dim sShortCode As String = Nothing
            Dim iOptionCode As Integer = Nothing            
            'Define oInsertOnPort,oSecondaryRun,oInsertedFeature
            Dim oInsertOnPort As DistributionPort = Nothing
            Dim oInsertedFeature As RouteFeature = Nothing                
            Dim oSecondaryRun As RouteRun = Nothing        
            'Call InsertFeatureByShortCodeOnPort() to insert Feature
            oConduitRun1.InsertFeatureByShortCodeOnPort(sShortCode, iOptionCode, oInsertOnPort, oSecondaryRun, oInsertedFeature)
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitRun.NCD">
            <summary>
            Gets or sets the nominal diameter of the run property.
            </summary>
            <example>This example shows how to get and set the nominal diameter of the conduit run.
            <code>
            'Create the conduit run.
            Dim oConduitRun As ConduitRun = Nothing
            'Create Nominal diameter object
            Dim oNCD As New NominalDiameter
            'Get the NCD from the Conduit run
            oNCD = oConduitRun.NCD
            'Create a new Nominal diameter object and define its properties
            Dim oNCD1 As New NominalDiameter
            'Set the NCD property on the Conduit run
            oConduitRun.NCD = oNCD1
            </code>
            </example>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.ConduitEndFeature">
            <summary>
            Wrapper for the route ConduitEndFeature class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConduitEndFeature.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the ConduitEndFeature base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConduitEndFeature.#ctor">
            <summary>
            Public constructor for the ConduitEndFeature base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConduitEndFeature.Finalize">
            <summary>
            Destructor for the ConduitEndFeature base class.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitEndFeature.ShortCode">
            <summary>
             Gets or sets the short code property on the ConduitAlongLegFeature class.
             This property is shown as "Type" in TaskHost ribbon bar.
            </summary>
             <example>This example shows how to get or set the shortcode property on ConduitAlongLegFeature.
             <code>
             Dim sShortCode As string
             'Get shortcode on ConduitAlongLegFeature
             sShortCode = oConduitAlongLegFeature.ShortCode
             'Define shortcode
             sShortCode = "TEE"
             'Set shortcode on ConduitAlongLegFeature    
             oConduitAlongLegFeature.ShortCode = sShortCode
             </code>
             </example>        
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitEndFeature.NCD">
            <summary>
            Gets or sets the NCD value. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitEndFeature.OptionCode">
            <summary>
            Gets or sets the OptionCode property. 
            This property is shown as "Option" in TaskHost ribbon bar.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitEndFeature.OuterDiameter">
            <summary>
            Gets the OuterDiameter Property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitEndFeature.DefaultShortCode">
            <summary>
            Gets the DefaultShortCode property. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.Services.CableAutoRouteVolumeRuleHelper">
            <summary>
            CableAutoRouteVolumeRuleHelper is the helper class for Cable Auto Route Volume Rule. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.Services.CableAutoRouteVolumeRuleHelper.#ctor(System.Object)">
            <summary>
            Constructor of CableAutoRouteVolumeRuleHelper.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.Services.CableAutoRouteVolumeRuleHelper.GetCommonPlaneGivenTwoVolumes(Ingr.SP3D.Common.Middle.BusinessObject,Ingr.SP3D.Common.Middle.BusinessObject,Ingr.SP3D.Common.Middle.BusinessObject@)">
            <summary>
            Gets and returns the plane (IJPlane) that is common to the two given volumes.
            </summary>
            <param name="volume1">Input volume 1.</param>
            <param name="volume2">Input Volume 2.</param>
            <param name="commonPlane">Out plane that is common to volume 1 and volume 2. </param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.Services.CableAutoRouteVolumeRuleHelper.GetPlaneCollFromVolume(Ingr.SP3D.Common.Middle.BusinessObject,Ingr.SP3D.Route.Middle.RteVolumePlanes)">
            <summary>
            Gets individual planes from a volume based on input volume type.
            </summary>
            <param name="volume">Input volume for which planes are required.</param>
            <param name="planeType">Gets the corresponding plane or planes based on this Flag.</param>
            <returns>Collection of BusinessObject planes.</returns>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.Services.CableAutoRouteVolumeRuleHelper.GetVolumesGivenAnEquipment(Ingr.SP3D.Common.Middle.BusinessObject,Ingr.SP3D.Route.Middle.RteSpaceVolumeType)">
            <summary>
            Gets a collection of volumes in which the input equipment resides.
            </summary>
            <param name="equipment">Input equipment.</param>
            <param name="spaceVolumeType">Enum to indicatewhat type of Volumes should be returned (Area, Zones, DWG volumes etc).</param>
            <returns>Collection of volumes in which the input equipment resides.</returns>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.Services.CableAutoRouteVolumeRuleHelper.GetS3DObjCollWithinRangeOfInputObj(Ingr.SP3D.Common.Middle.BusinessObject,Ingr.SP3D.Route.Middle.RteObjectTypeForVolRule)">
            <summary>
            Get collection of objects based on enum type and input.
            </summary>
            <param name="inputObject">Input Volume to get the objects lying in it .Input the object to get the collection of volumes in which it is lying.</param>
            <param name="outputObjectType">Gets the corresponding collection of SP3D objects based on enum type.</param>
            <returns>Collection of S3D object which are in the Range of input type based on input object type.</returns>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipePathFeatHelper.SetInsulationSpec(Ingr.SP3D.ReferenceData.Middle.PipeInsulationSpec)">
            <summary>
            Sets the insulation specification assigned to the feature. This method validates the InsulationTemperature on the feature  
            before setting the InsulationSpec.
            </summary>
            <param name="PipeInsulationSpec">Insulation specification object to set.</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipePathFeatHelper.SetInsulationSpec(Ingr.SP3D.ReferenceData.Middle.PipeInsulationSpec,System.Double)">
            <summary>
            Assigns the insulation specification to the feature. The InsulationTemperature will be validated and set on the feature.
            </summary>
            <param name="PipeInsulationSpec">Insulation specification object to set.</param>
            <param name="InsulationTemperature">Insulation temperature value to set.</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipePathFeatHelper.SetUserDefinedInsulation(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Sets the user-defined insulation.
            </summary>
            <param name="iPurpose">Purpose of the insulation.</param>
            <param name="iMaterial">Insulation material.</param>
            <param name="dThickness">Thickness of insulation.</param>
            <param name="dTemperature">Temperature rating of the insulation.</param>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteIncorrectPurposeCodeException">The lPurpose argument is a value that is not in the InsulationPurpose codelist.</exception>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteIncorrectMaterialCodeException">The lMaterial argument is a value that is not in the InsulationMaterial codelist.</exception>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteInvalidInsulationThickessException">The value for dThickness is not defined for the given InsulationMaterial code. </exception>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipePathFeatHelper.ShortCode">
            <summary>
            Gets or sets the short code property on the pipe feature.
            This property is shown as "Type" in TaskHost ribbon bar.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipePathFeatHelper.InsulationSpec">
            <summary>
             Gets the insulation specification.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipePathFeatHelper.MultiSizeOption">
            <summary>
            Gets or sets the MultiSizeOption. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipePathFeatHelper.InsulationPurpose">
            <summary>
            Gets the InsulationPurpose property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipePathFeatHelper.InsulationMaterial">
            <summary>
            Gets the InsulationMaterial property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipePathFeatHelper.InsulationThickness">
            <summary>
            Gets the InsulationThickness property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipePathFeatHelper.InsulationTemperature">
            <summary>
            Gets the InsulationTemperature property. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.DuctComponent">
            <summary>
            .NET wrapper class for the COM class CPRteDuctComponentOcc.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctComponent.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor for DuctComponent base class.
            </summary>
            <param name="oPBO"></param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctComponent.#ctor">
            <summary>
            Internal constuctor for DuctComponent base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctComponent.Finalize">
            <summary>
            Destructor for DuctComponent base class. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctComponent.GetNameRuleHelper">
            <summary>
            Private utility method to get and manage the name rule helper object.
            </summary>
            <returns>m_oSystemChildHelper - Occurrence to the name rule helper object.</returns>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctComponent.ActiveNameRule">
             <summary>
             Gets or sets the active name rule assigned to a DuctComponent.
             </summary>
             <returns>Active name rule as Ingr.SP3D.Common.Middle.BusinessObject.</returns>
             <exception cref="T:System.InvalidOperationException">The base object does not support this operation.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidObjectTypeException">The object is not a name rule object.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoAccessException">The user does not have access to read or modify the object.</exception>
            <example>This example explains how to get or set the active name rule.
            <code>
             'Define DuctComponent. 
             Dim oDuctComponent As DuctComponent = Nothing
             Dim oActiveNameRule As BusinessObject
             'Get the active name rule. 
             oActiveNameRule = oDuctComponent.ActiveNameRule 
             ' Set the active name rule. 
             oDuctComponent.ActiveNameRule = oActiveNameRule 
            </code>
            </example>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.ConnectionBase">
            <summary>
            ConnectionBase is an abstract class, which contains the common functionalities for route connection.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConnectionBase.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the ConnectionBase base class.
            </summary>
            <param name="oPBO">Private business object.</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConnectionBase.#ctor">
            <summary>
            Public constructor for the ConnectionBase base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConnectionBase.Finalize">
            <summary>
            Destructor for the ConnectionBase base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConnectionBase.AddConnectionPart(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Not implemented.
            </summary>
            <param name="oPart"></param>
            <compilewhen>internal</compilewhen>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConnectionBase.AddConnectionParts(System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.BusinessObject})">
            <summary>
            Not implemented.
            </summary>
            <param name="oParts"></param>
            <compilewhen>internal</compilewhen>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConnectionBase.GetOtherPort(Ingr.SP3D.Common.Middle.IDistributionPort)">
            <summary>
            Not implemented.
            </summary>
            <param name="oPort"></param>
            <returns></returns>
            <compilewhen>internal</compilewhen>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConnectionBase.RemoveConnectionPart(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Not implemented.
            </summary>
            <param name="oPart"></param>
            <compilewhen>internal</compilewhen>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConnectionBase.RemoveConnectionParts(System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.BusinessObject})">
            <summary>
            Not implemented.
            </summary>
            <param name="oParts"></param>
            <returns></returns>
            <compilewhen>internal</compilewhen>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConnectionBase.FindPort(Ingr.SP3D.Common.Middle.IConnectable)">
            <summary>
            Not implemented.
            </summary>
            <param name="oParent"></param>
            <returns></returns>
            <compilewhen>internal</compilewhen>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConnectionBase.GetPorts(Ingr.SP3D.Common.Middle.PortType)">
            <summary>
            Not implemented.
            </summary>
            <param name="eType"></param>
            <returns></returns>
            <compilewhen>internal</compilewhen>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConnectionBase.ConnectionItems">
            <summary>
            Gets the read-only collection of ConnectionItem objects, which are connected.
            </summary>
            <example>This example shows how to get the connection items of a connection object.
            <code>
            ' Set the connection base object.
            Dim oConnectionBase As ConnectionBase = Nothing
            Dim oConnectionItemColl As ReadOnlyCollection(Of ConnectionItem)
            ' Using ConnectionItems property, to get all connection items of a connection object.
            oConnectionItemColl = oConnectionBase.ConnectionItems
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConnectionBase.ConnectionParts">
            <summary>
            Gets the connection parts of a connection object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConnectionBase.Location">
            <summary>
            Gets the location of the connection object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConnectionBase.WBSItemParents">
            <summary>
            Returns the collection of WBS parents.
            </summary>
            <example>This example explains how to get WBSItemParents of a route connection.
            <code>
            'Declare route connection 
            Dim oConnection As Connection = Nothing 'This can be a CableTrayConnection also.
            'Get WBSItemParents from Connection. 
            Dim oWBSParentsCollection As ReadOnlyCollection(Of IWBSItem) = oConnection.WBSItemParents 
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConnectionBase.WBSProjects">
            <summary>
            Returns the collection of WBS projects.
            </summary>
            <example>This example explains how to get WBSProjects of a route connection.
            <code>
            'Declare route connection 
            Dim oConnection As Connection = Nothing 'This can be a CableTrayConnection also.
            'Get WBSProjects from Connection. 
            Dim oWBSProjectsCollection As ReadOnlyCollection(Of IWBSProject) = oConnection.WBSProjects
            </code>
            </example>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.Connection">
            <summary>
            Connection is a route connection object, which contains all connection information except the cable tray connection.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.Connection.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the Connection base class.
            </summary>
            <param name="oPBO">Private business object.</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.Connection.#ctor">
            <summary>
            Public constructor for the Connection base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.Connection.Finalize">
            <summary>
            Destructor for the Connection base class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.CableTrayConnection">
            <summary>
            CableTrayConnection is a Connection object, which contains all cable tray connection information.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.CableTrayConnection.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the CableTrayConnection base class.
            </summary>
            <param name="oPBO">Private business object.</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.CableTrayConnection.#ctor">
            <summary>
            Public constructor for the CableTrayConnection base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.CableTrayConnection.Finalize">
            <summary>
            Destructor for the CableTrayConnection base class.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CableTrayConnection.GapWidth">
            <summary>
            Gets or sets the GapWidth property. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.PipeSpool">
            <summary>
            Class representing PipeSpool.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeSpool.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the PipeSpool class.
            </summary>
            <param name="oBOP">Private business object.</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeSpool.Finalize">
            <summary>
            Destructor for the PipeSpool base class.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeSpool.Parts">
            <summary>
            Gets the parts under the spool.
            </summary>
            <example>This example shows how to get the parts associated with a spool.
            <code>
            'Get parts associated with a spool.
            'Create a PipeSpool object.
            Dim oPipeSpool As PipeSpool
            Dim oPartsCol As ReadOnlyCollection(Of BusinessObject) = oPipeSpool.Parts()
            </code>
            </example>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.DuctTurnFeature">
            <summary>
            Wrapper for Route Duct Turn feature class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctTurnFeature.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the DuctTurnFeature base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctTurnFeature.#ctor">
            <summary>
            Public constructor for the DuctTurnFeature base class
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctTurnFeature.Finalize">
            <summary>
            Destructor for the DuctTurnFeature base class
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.DuctTurnFeature.SetUserDefinedInsulation(System.Int32,System.Double)">
            <summary>
            Sets the user-defined insulation.
            </summary>
            <param name="iMaterial">Insulation material.</param>
            <param name="dThickness">Thickness of insulation.</param>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteIncorrectMaterialCodeException">The lMaterial argument is a value that is not in the InsulationMaterial codelist.</exception>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteInvalidInsulationThickessException">The value for dThickness is not defined for the given InsulationMaterial code. </exception>
            <example> This example shows how to set user-defined insulation on DuctTurnFeature.
            <code>
            'Declare the required variables. 
            Dim oDuctFeature As DuctTurnFeature = Nothing
            Dim iMaterial As Int32
            Dim dThickness As Double
            ' Set user-defined insulation on DuctTurnFeature. 
            oDuctFeature.SetUserDefinedInsulation(iMaterial, dThickness)
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctTurnFeature.WallThickness">
            <summary>
            Gets or sets the WallThickness property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctTurnFeature.CrossSectionOrientationAngle">
            <summary>
            Gets or sets the CrossSectionOrientationAngle property. 
            </summary>        
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctTurnFeature.Width">
            <summary>
            Gets or sets the Width property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctTurnFeature.Depth">
            <summary>
            Gets or sets the Depth property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctTurnFeature.CornerRadius">
            <summary>
            Gets or sets the CornerRadius property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctTurnFeature.DimensionalBaseOuter">
            <summary>
            Gets or sets the DimensionalBaseOuter property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctTurnFeature.CrossSectionShape">
            <summary>
            Gets the CrossSectionShape property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctTurnFeature.InsulationMaterial">
            <summary>
            Gets InsulationMaterial property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.DuctTurnFeature.InsulationThickness">
            <summary>
            Gets InsulationThickness property. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.Cableway">
            <summary>
            Cableway is the .NET wrapper class for Cableway objects.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.Cableway.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private business object wrapper constructor for cableways.
            </summary>
            <param name="oBOP">Priavate business object.</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.Cableway.#ctor(Ingr.SP3D.Common.Middle.ISystem,Ingr.SP3D.ReferenceData.Middle.CablewaySpec)">
            <summary>
            Public constructor for the cableway wrapper class that uses parent system and cableway
            specification name as an input parameters.
            </summary>
            <param name="oParentSystem">Parent system of the new cableway.</param>
            <param name="oCablewaySpec">Cableway specification object.</param>
            <exception cref="T:System.ArgumentNullException">Null arguments.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnAccessDeniedException">Access denied.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Parent system is not in working status.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid parent system.</exception>        
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteInvalidSpecException">Invalid given cableway spec object.</exception>
            <exception cref="T:System.OutOfMemoryException">Failed to create the cableway due to out-of-memory problem.</exception>        
            <example>This example shows how to create the cableway.
            <code>
            'Get the cableway spec object.
            Dim oCablewaySpec As CablewaySpec = Nothing
            'Get the Parent system for the cableway.
            Dim oSystem As ISystem = Nothing
            'Create the Cableway.
            Dim oCableway As New Cableway(oSystem, oCablewaySpec)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.Cableway.#ctor(Ingr.SP3D.Route.Middle.Cableway)">
            <summary>
            Copy constructor for the cableway wrapper class.
            </summary>
            <param name="oCablewayToCopy">Cableway to be copied.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnAccessDeniedException">Access denied exception.</exception>
            <example>This example shows how to perform copy constructor of the cableway.
            <code>
            'Get the existing cableway.
            Dim oCablewayToCopy As Cableway = Nothing
            'Using copy constructor to copy the existing cableway.
            Dim oCableway As New Cableway(oCablewayToCopy)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.Cableway.Finalize">
            <summary>
            Destructor for the cableway class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.Cableway.RouteBetweenPointAndPoint(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.Services.RouteCrossSection,System.Double,Ingr.SP3D.Route.Middle.CablewayEndFeature@)">
            <summary>
            Routes a leg between two positions.
            </summary>
            <param name="oFromPosition">Leg starting position.</param>
            <param name="oToPosition">Leg ending position.</param>
            <param name="oRteCrossSection">Leg cross section.</param>
            <param name="dOrientationAngle">Orientation angle of the leg in radians.</param>
            <param name="oCablewayEndFeature">Newly created end feature.</param>
            <exception cref="T:System.ArgumentNullException">Input arguments are null.</exception>
            <example>This example explains how to route a cableway from one point to another point.
            <code>
            'Create the cableway.
            Dim oCableway As Cableway = Nothing
            'Define oFromPosition, oToPosition from where the route must start and end.
            Dim oFromPosition As Position = Nothing
            Dim oToPosition As Position = Nothing
            'Define the Route cross section object and set its properties.
            Dim oCrossSection As New RouteCrossSection()
            oCrossSection.Width = 0.15 'Set the Width value.
            oCrossSection.Depth = 0.1 'Set the Depth value.
            oCrossSection.CornerRadius = 0.0 ' Set the corner radius value.
            'Set the CrossSectionShape value.
            oCrossSection.CrossSectionShape = CrossSectionShapeTypes.Rectangular
            Dim dOrientationAngle As Double = 0.785 'Set the orientation angle in radians.
            Dim oCablewayEndFeat As RouteFeature = Nothing
            'Using RouteBetweenPointAndPoint() route a cableway from a point to another point.
            oCableway.RouteBetweenPointAndPoint(oFromPosition, oToPosition, oCrossSection, dOrientationAngle, oCablewayEndFeat)
            </code>
            </example> 
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.Cableway.RouteBetweenEndFeatureAndPoint(Ingr.SP3D.Route.Middle.CablewayEndFeature,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.Services.RouteCrossSection,System.Double,Ingr.SP3D.Route.Middle.CablewayEndFeature@)">
            <summary>
            Routes a leg from a given end feature to a given position.
            </summary>
            <param name="oCablewayEndFeature">Cableway end feature at which the new leg will start.</param>
            <param name="oToPosition">End position of new leg.</param>
            <param name="oRteCrossSection">Cross section of the cableway.</param>
            <param name="dOrientationAngle">Orientation angle of the leg in radians.</param>
            <param name="oNewCablewayEndFeature">Newly created end feature at the position.</param>        
            <exception cref="T:System.ArgumentNullException">Input arguments are null.</exception>
            <example>This example explains how to route between an end feature and a point.
            <code>
            'Create the cableway.
            Dim oCableway As Cableway = Nothing
            'Define the CablewayEndFeature from where the route has to start.
            Dim oCablewayEndFeat As CablewayEndFeature = Nothing
            'Define ToPosition from where the route has to end.
            Dim oToPosition As Position = Nothing
            'Define the route cross section object and set its properties.
            Dim oCrossSection As New RouteCrossSection()
            oCrossSection.Width = 0.15 'Set the Width value.
            oCrossSection.Depth = 0.1 'Set the Depth value.
            oCrossSection.CornerRadius = 0.0 ' Set the corner radius value.
            'Set the CrossSectionShape value.
            oCrossSection.CrossSectionShape = CrossSectionShapeTypes.Rectangular
            Dim dOrientationAngle As Double = 0.0 'Set the orientation angle in radians.
            Dim oRouteEndFeat As RouteFeature = Nothing
            'Using RouteBetweenEndFeatureAndPoint() route a cableway from end path feature to a point.
            oCableway.RouteBetweenEndFeatureAndPoint(oCablewayEndFeat, oToPosition, oCrossSection, dOrientationAngle, oRouteEndFeat)
            </code>
            </example>  
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.Cableway.RouteBetweenBranchAndPoint(Ingr.SP3D.Route.Middle.CablewayStraightFeature,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.Services.RouteCrossSection,System.Double,Ingr.SP3D.Route.Middle.CablewayEndFeature@)">
            <summary>
            Routes the cableway from the position of a straight feature to the point in the free space.
            </summary>
            <param name="oCablewayStraightFeature">Cableway straight feature on which to branch out.</param>
            <param name="oBranchPosition">Position of the straight feature.</param>
            <param name="oToPosition">Position in the free space.</param>
            <param name="oRteCrossSection">Cross section of the leg.</param>
            <param name="dOrientationAngle">Orientation angle of the leg in radians.</param>
            <param name="oCablewayEndFeature">Return newly created cableway end feature.</param>        
            <exception cref="T:System.ArgumentNullException">One or more of input arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid input arguments.</exception>
            <example>This example explains how to route between branch and point.
            <code>
            'Create the cableway.
            Dim oCableway As Cableway = Nothing
            'Define the CablewayStraightFeature from which we are branching out.
            Dim oCablewayStraightFeat As CablewayStraightFeature = Nothing
            Dim oBranchFromPosition As Position = Nothing
            'Define ToPosition from where the route has to end.
            Dim oToPosition As Position = Nothing
            'Define the route cross section object and set its properties.
            Dim oCrossSection As New RouteCrossSection()
            oCrossSection.Width = 0.15 'Set the Width value.
            oCrossSection.Depth = 0.1 'Set the Depth value.
            oCrossSection.CornerRadius = 0.0 ' Set the corner radius value.
            'Set the CrossSectionShape value.
            oCrossSection.CrossSectionShape = CrossSectionShapeTypes.Rectangular
            Dim dOrientationAngle As Double = 0.0 'Set the orientation angle in radians.
            Dim oRouteEndFeat As RouteFeature = Nothing
            'Using RouteBetweenBranchAndPoint() route a cableway from branch feature to a point.
            oCableway.RouteBetweenBranchAndPoint(oCablewayStraightFeat, oBranchFromPosition, oToPosition, oCrossSection, dOrientationAngle, oRouteEndFeat)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.Cableway.RouteBetweenBranchAndBranch(Ingr.SP3D.Route.Middle.CablewayStraightFeature,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.CablewayStraightFeature,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.Services.RouteCrossSection,System.Double)">
            <summary>
            Routes a leg from the position of a straight feature to the position of other straight feature.
            </summary>
            <param name="oFromCablewayStraightFeature">Cableway straight feature on which to branch out.</param>
            <param name="oBranchFromPosition">Position from cableway straight feature.</param>
            <param name="oToCablewayStraightFeature">Cableway straight feature on which to branch in.</param>
            <param name="oBranchToPosition">Position of the ending cableway straight feature.</param>
            <param name="oRteCrossSection">Cross section of the leg.</param>
            <param name="dOrientationAngle">Orientation angle of the leg in radians.</param>
            <exception cref="T:System.ArgumentNullException">Input arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid input arguments.</exception>
            <example>This example explains how to route between two branches.
            <code>
            'Create the cableway.
            Dim oCableway As Cableway = Nothing
            'Define the CablewayStraightFeature from which we are branching out.
            Dim oCablewayFromStraightFeat As CablewayStraightFeature = Nothing
            Dim oBranchFromPosition As Position = Nothing
            'Define the CablewayStraightFeature to which we are branching in.
            Dim oCablewayToStraightFeat As CablewayStraightFeature = Nothing
            Dim oBranchToPosition As Position = Nothing
            'Define the route cross section object and set its properties.
            Dim oCrossSection As New RouteCrossSection()
            oCrossSection.Width = 0.15 'Set the Width value.
            oCrossSection.Depth = 0.1 'Set the Depth value.
            oCrossSection.CornerRadius = 0.0 ' Set the corner radius value.
            'Set the CrossSectionShape value.
            oCrossSection.CrossSectionShape = CrossSectionShapeTypes.Rectangular
            Dim dOrientationAngle As Double = 0.0 'Set the orientation angle in radians.
            'Using RouteBetweenBranchAndBranch() route a cableway between two branches.
            oCableway.RouteBetweenBranchAndBranch(oCablewayFromStraightFeat, oBranchFromPosition, oCablewayToStraightFeat, oBranchToPosition, oCrossSection, dOrientationAngle)
            </code>
            </example>        
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.Cableway.RouteBetweenBranchAndEndFeature(Ingr.SP3D.Route.Middle.CablewayStraightFeature,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.CablewayEndFeature,Ingr.SP3D.Route.Middle.Services.RouteCrossSection,System.Double)">
            <summary>
            Routes a leg from the position of a straight feature to the end feature. 
            </summary>
            <param name="oCablewayStraightFeature">Cableway straight feature on which to branch out.</param>
            <param name="oBranchPosition">Position of the cableway straight feature.</param>
            <param name="oCablewayEndFeature">Cableway end feature at which the routing leg ends.</param>
            <param name="oRteCrossSection">Cross section of the leg.</param>
            <param name="dOrientationAngle">Orientation angle of the leg in radians.</param>
            <exception cref="T:System.ArgumentNullException">Input arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid input arguments.</exception>
            <example>This example explains how to route from the position of a straight feature to the end feature.
            <code>
            'Create the cableway.
            Dim oCableway As Cableway = Nothing
            'Define the CablewayStraightFeature from which we are branching out.
            Dim oCablewayStraightFeature As CablewayStraightFeature = Nothing
            Dim oBranchPosition As Position = Nothing
            'Define the CablewayEndFeature to which we are branching in.
            Dim oCablewayEndFeature As CablewayEndFeature = Nothing
            'Define the route cross section object and set its properties.
            Dim oCrossSection As New RouteCrossSection()
            oCrossSection.Width = 0.15 'Set the Width value.
            oCrossSection.Depth = 0.1 'Set the Depth value.
            oCrossSection.CornerRadius = 0.0 ' Set the corner radius value.
            'Set the CrossSectionShape value.
            oCrossSection.CrossSectionShape = CrossSectionShapeTypes.Rectangular
            Dim dOrientationAngle As Double = 0.0 'Set the orientation angle in radians.
            'Using RouteBetweenBranchAndEndFeature(), to route a cableway from branch feature to end feature.
            oCableway.RouteBetweenBranchAndEndFeature(oCablewayStraightFeature, oBranchPosition, oCablewayEndFeature, oCrossSection, dOrientationAngle)
            </code>
            </example>        
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.Cableway.RouteBetweenPortAndPort(Ingr.SP3D.Equipment.Middle.DistributionPort,Ingr.SP3D.Equipment.Middle.DistributionPort,Ingr.SP3D.Route.Middle.Services.RouteCrossSection,System.Double)">
            <summary>
            Routes a leg from one port to another. 
            </summary>
            <param name="oFromPort">Port from which the leg starts.</param>
            <param name="oToPort">Port to which the leg ends.</param>
            <param name="oRteCrossSection">Leg cross section.</param>
            <param name="dOrientationAngle">Orientation angle of the leg in radians.</param>
            <exception cref="T:System.ArgumentNullException">Input arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid input arguments.</exception>
            <example>This example explains how to route from one port to another.
            <code>
            'Create the cableway.
            Dim oCableway As Cableway = Nothing
            'Define the two cableway ports, ie, oFormDistributionPort,oToDistributionPort.
            Dim oFormDistributionPort As DistributionPort
            Dim oToDistributionPort As DistributionPort
            'Define the Route cross section object and set its properties.
            Dim oCrossSection As New RouteCrossSection()
            oCrossSection.Width = 0.15 'Set the Width value.
            oCrossSection.Depth = 0.1 'Set the Depth value.
            oCrossSection.CornerRadius = 0.0 ' Set the corner radius value.
            'Set the CrossSectionShape value.
            oCrossSection.CrossSectionShape = CrossSectionShapeTypes.Rectangular
            Dim dOrientationAngle As Double = 0.0 'Set the orientation angle in radians.
            'Using RouteBetweenPortAndPort(), to route a cableway between two ports.
            oCableway.RouteBetweenPortAndPort(oFormDistributionPort, oToDistributionPort, oCrossSection, dOrientationAngle)
            </code>
            </example>  
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.Cableway.RouteBetweenPortAndBranch(Ingr.SP3D.Equipment.Middle.DistributionPort,Ingr.SP3D.Route.Middle.CablewayStraightFeature,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.Services.RouteCrossSection,System.Double)">
            <summary>
            Routes a leg from port to a branch. 
            </summary>
            <param name="oPort">Port from which the leg starts.</param>
            <param name="oCablewayStraightFeature">Cableway straight feature into which to branch in.</param>
            <param name="oBranchPosition">Position on the cableway straight feature.</param>
            <param name="oRteCrossSection">Leg cross section.</param>
            <param name="dOrientationAngle">Orientation angle of the leg in radians.</param>
            <exception cref="T:System.ArgumentNullException">Input arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid input arguments.</exception>
            <example>This example explains how to route between port and branch.
            <code>
            'Create the cableway.
            Dim oCableway As Cableway = Nothing
            'Define the fromCablewayport from which route has to start.
            Dim oFormDistributionPort As DistributionPort
            'Define the ToCablewayStraightFeature on which route has to end.
            Dim oToCablewayStraightFeat As CablewayStraightFeature
            Dim oToBranchPosition As Position
            'Define the route cross section object and set its properties.
            Dim oCrossSection As New RouteCrossSection()
            oCrossSection.Width = 0.15 'Set the Width value.
            oCrossSection.Depth = 0.1 'Set the Depth value.
            oCrossSection.CornerRadius = 0.0 ' Set the corner radius value.
            'Set the CrossSectionShape value.
            oCrossSection.CrossSectionShape = CrossSectionShapeTypes.Rectangular
            Dim dOrientationAngle As Double = 0.0 'Set the orientation angle in radians.
            'Using RouteBetweenPortAndBranch(), to route a cableway from port to branch.
            oCableway.RouteBetweenPortAndBranch(oFormDistributionPort, oToCablewayStraightFeat, oToBranchPosition, oCrossSection, dOrientationAngle)
            </code>
            </example>  
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.Cableway.RouteBetweenPortAndEndFeature(Ingr.SP3D.Equipment.Middle.DistributionPort,Ingr.SP3D.Route.Middle.CablewayEndFeature,Ingr.SP3D.Route.Middle.Services.RouteCrossSection,System.Double)">
            <summary>
            Routes a leg between port and end feature.
            </summary>
            <param name="oPort">Port from which the leg starts.</param>
            <param name="oCablewayEndFeature">Cableway end feature where the leg ends.</param>
            <param name="oRteCrossSection">Leg cross section.</param>
            <param name="dOrientationAngle">Orientation angle of the leg in radians.</param>
            <exception cref="T:System.ArgumentNullException">Input arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid input arguments.</exception>
            <example>This example explains how to route between a port and end feature.
            <code>        
            'Create the cableway.
            Dim oCableway As Cableway = Nothing
            'Define the fromCablewayport from which route has to start.
            Dim oFormDistributionPort As DistributionPort
            'Define the oToCablewayEndFeature.
            Dim oToCablewayEndFeat As CablewayEndFeature
            'Define the route cross section object and set its properties.
            Dim oCrossSection As New RouteCrossSection()
            oCrossSection.Width = 0.15 'Set the Width value.
            oCrossSection.Depth = 0.1 'Set the Depth value.
            oCrossSection.CornerRadius = 0.0 ' Set the corner radius value.
            'Set the CrossSectionShape value.
            oCrossSection.CrossSectionShape = CrossSectionShapeTypes.Rectangular
            Dim dOrientationAngle As Double = 0.0 'Set the orientation angle in radians.
            'Using RouteBetweenPortAndEndFeature(), to route a cableway from port to end feature.
            oCableway.RouteBetweenPortAndEndFeature(oFormDistributionPort, oToCablewayEndFeat, oCrossSection, dOrientationAngle)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.Cableway.RouteBetweenEndFeatureAndEndFeature(Ingr.SP3D.Route.Middle.CablewayEndFeature,Ingr.SP3D.Route.Middle.CablewayEndFeature,Ingr.SP3D.Route.Middle.Services.RouteCrossSection,System.Double)">
            <summary>
            Routes a leg between two end features.
            </summary>
            <param name="oFromEndFeature">Cableway end feature at which the new leg will start.</param>
            <param name="oToEndFeature">Cableway end feature at which the new leg will end.</param>
            <param name="oRteCrossSection">Cross section of the leg.</param>
            <param name="dOrientationAngle">Orientation angle of the leg in radians.</param>
            <exception cref="T:System.ArgumentNullException">Input arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid input arguments.</exception>
            <example>This example explains how to route between two end features.
            <code>
            'Create the cableway.
            Dim oCableway As Cableway = Nothing
            'Define the oFromCablewayEndFeat, oToCablewayEndFeat
            Dim oFromCablewayEndFeat As CablewayEndFeature
            Dim oToCablewayEndFeat As CablewayEndFeature
            'Define the route cross section object and set its properties.
            Dim oCrossSection As New RouteCrossSection()
            oCrossSection.Width = 0.15 'Set the Width value.
            oCrossSection.Depth = 0.1 'Set the Depth value.
            oCrossSection.CornerRadius = 0.0 ' Set the corner radius value.
            'Set the CrossSectionShape value.
            oCrossSection.CrossSectionShape = CrossSectionShapeTypes.Rectangular
            Dim dOrientationAngle As Double = 0.0 'Set the orientation angle in radians.
            'Using RouteBetweenEndFeatureAndEndFeature(), to route a cableway between two end features.
            oCableway.RouteBetweenEndFeatureAndEndFeature(oFromCablewayEndFeat, oToCablewayEndFeat, oCrossSection, dOrientationAngle)
            </code>
            </example>   
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.Cableway.RouteBetweenPortAndPoint(Ingr.SP3D.Equipment.Middle.DistributionPort,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.Services.RouteCrossSection,System.Double,Ingr.SP3D.Route.Middle.CablewayEndFeature@)">
            <summary>
            Routes a leg between port and point.
            </summary>
            <param name="oPort">Port from which the leg must start.</param>
            <param name="oPosition">Position at which the leg must end.</param>
            <param name="oCrossSection">Cross section of the leg.</param>
            <param name="dOrientationAngle">Orientation angle of the leg in radians.</param>
            <param name="oCablewayEndFeature">Newly created end feature at given position.</param>
            <exception cref="T:System.ArgumentNullException">Input arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid input arguments.</exception>
            <example>This example explains how to route between port and point.
            <code>
            'Create the cableway.
            Dim oCableway As Cableway = Nothing
            'Define the fromCablewayport from which route has to start.
            Dim oFormDistributionPort As DistributionPort
            'Define the ToPosition.
            Dim oToPosition As Position
            'Define the route cross section object and set its properties.
            Dim oCrossSection As New RouteCrossSection()
            oCrossSection.Width = 0.15 'Set the Width value.
            oCrossSection.Depth = 0.1 'Set the Depth value.
            oCrossSection.CornerRadius = 0.0 ' Set the corner radius value.
            'Set the CrossSectionShape value.
            oCrossSection.CrossSectionShape = CrossSectionShapeTypes.Rectangular
            Dim dOrientationAngle As Double = 0.0 'Set the orientation angle in radians.
            Dim oRouteEndFeat As RouteFeature
            'Using RouteBetweenPortAndPoint(), to route a cableway from port to point.
            oCableway.RouteBetweenPortAndPoint(oFormDistributionPort, oToPosition, oCrossSection, dOrientationAngle, oRouteEndFeat)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.Cableway.InsertFeatureByPartOnFeature(Ingr.SP3D.ReferenceData.Middle.Part,Ingr.SP3D.Route.Middle.RouteFeature,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.RouteFeature@)">
            <summary>
            Inserts a feature on a feature given part.
            </summary>
            <param name="oCatalogPart">Catalog part which will be inserted.</param>
            <param name="oInsertOnFeature">Feature on which to insert the feature.</param>
            <param name="oInsertAtPosition">Position at which the component must be inserted.</param>
            <param name="oInsertedFeature">Newly created feature at given position.</param>
            <exception cref="T:System.ArgumentNullException">Input arguments are null.</exception>
            <example>This example explains how to insert a feature on a given feature (straight/end).
            <code>
            'Create the cableway.
            Dim oCableway As Cableway = Nothing
            'Define the Part(Catalog part) which is to be inserted.
            Dim oCatalogPart As Part = Nothing
            'Define the feature on which the component has to be inserted.
            Dim oInsertOnFeature As RouteFeature = Nothing
            'Define the position on the straight feature where the component must be inserted.
            'In case of an end feature, end feature location is taken irrespective of the location here.
            Dim oInsertAtPosition As Position = Nothing
            'Declare a variable to hold the new inserted feature returned by this method.
            Dim oInsertedFeature As RouteFeature = Nothing
            'Using InsertFeatureByPartOnFeature(), to insert a component on a cableway straight feature or an end feature.
            oCableway.InsertFeatureByPartOnFeature(oCatalogPart, oInsertOnFeature, oInsertAtPosition, oInsertedFeature)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.Cableway.InsertFeatureByPartOnPort(Ingr.SP3D.ReferenceData.Middle.Part,Ingr.SP3D.Equipment.Middle.DistributionPort,Ingr.SP3D.Route.Middle.RouteFeature@)">
            <summary>
            Insert cableway feature on port by passing catalog part.
            </summary>
            <param name="oCatalogPart">Inserting catalog part.</param>
            <param name="oInsertOnPort">Equipment or component port.</param>
            <param name="oInsertedFeature">Inserted cableway feature.</param>
            <exception cref="T:System.ArgumentNullException">Input arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid input arguments.</exception>
            <example>This example explains how to insert feature on given port (component/equipment port).
            <code>
            'Create the cableway.
            Dim oCableway As Cableway = Nothing
            'Define the part (catalog part) which is to be inserted.
            Dim oCatalogPart As Part = Nothing
            'Define the port on which the component has to be inserted.
            Dim oInsertOnPort As DistributionPort = Nothing
            'Declare a variable to hold the new inserted feature returned by this method.
            Dim oInsertedFeature As RouteFeature = Nothing
            'Using InsertFeatureByPartOnPort(), to insert a component on a component port or equipment port.
            oCableway.InsertFeatureByPartOnPort(oCatalogPart, oInsertOnPort, oInsertedFeature)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.Cableway.InsertSlantedTransitionOnEndFeature(Ingr.SP3D.Route.Middle.CablewayEndFeature,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.Services.RouteCrossSection,System.Double,Ingr.SP3D.Route.Middle.RouteFeature@)">
            <summary>
            Inserts a slanted transition on a given end feature.
            </summary>
            <param name="oInsertOnFeature">Cableway end feature on which the slanted transition needs to be inserted.</param>
            <param name="oEndTransitionPos">End transition position.</param>
            <param name="oRteCrossSection">Cross section of the leg.</param>
            <param name="dOrientationAngle">Orientation angle of the leg in radians.</param>
            <param name="oInsertedTransition">Returns the inserted slanted transition.</param>
            <exception cref="T:System.ArgumentNullException">Input arguments are null.</exception>
            <example>This example explains how to insert a slanted transition on a given end feature.
            <code>
            'Create the cableway.
            Dim oCableway As Cableway = Nothing       
            Dim oInsertOnFeature As EndFeature = Nothing        
            'Define end transition position.
            Dim oEndTransitionPos As Position = Nothing
            'Define the route cross section object and set its properties.
            Dim oCrossSection As New RouteCrossSection()
            oCrossSection.Width = 0.15 'Set the Width value.
            oCrossSection.Depth = 0.1 'Set the Depth value.
            oCrossSection.CornerRadius = 0.0 ' Set the corner radius value.
            'Set the CrossSectionShape value.
            oCrossSection.CrossSectionShape = CrossSectionShapeTypes.Rectangular
            Dim dOrientationAngle As Double = 0.0 'Set the orientation angle in radians.
            'Declare a variable to hold the new inserted feature returned by this method.
            Dim oInsertedFeature As RouteFeature = Nothing
            'Using InsertSlantedTransitionOnEndFeature(), to insert a slanted transition on end feature.
            oCableway.InsertSlantedTransitionOnEndFeature(oInsertOnFeature, oEndTransitionPos, oCrossSection, dOrientationAngle, oInsertedFeature)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.Cableway.InsertTurnTransitionOnEndFeature(Ingr.SP3D.Route.Middle.CablewayEndFeature,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.Services.RouteCrossSection,System.Double,System.Double,Ingr.SP3D.Route.Middle.TurnTransAlignTypes,Ingr.SP3D.Route.Middle.RouteFeature@)">
            <summary>
            Inserts a turn transition on a given end feature.
            </summary>
            <param name="oInsertOnFeature">Cableway end feature on which the turn transition needs to be inserted.</param>
            <param name="oEndTransitionPos">End transition position.</param>
            <param name="oRteCrossSection">Cross section of the leg.</param>
            <param name="dOrientationAngle">Orientation angle of the leg in radians.</param>
            <param name="dThroatRadius">Throat radius.</param>
            <param name="eTurnAlign">Turn alignment type.</param>        
            <param name="oInsertedTransition">Returns the inserted turn transition.</param>
            <exception cref="T:System.ArgumentNullException">Input arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid input arguments.</exception>
            <example>This example explains how to insert a turn transition on a given end feature.
            <code>
            'Create the cableway.
            Dim oCableway As Cableway = Nothing
            Dim oInsertOnFeature As CablewayEndFeature = Nothing
            'Define end transition position.
            Dim oEndTransitionPos As Position = Nothing
            'Define the route cross section object and set its properties.
            Dim oCrossSection As New RouteCrossSection()
            oCrossSection.Width = 0.15 'Set the Width value.
            oCrossSection.Depth = 0.1 'Set the Depth value.
            oCrossSection.CornerRadius = 0.0 ' Set the corner radius value.
            'Set the CrossSectionShape value.
            oCrossSection.CrossSectionShape = CrossSectionShapeTypes.Rectangular
            Dim dOrientationAngle As Double = 0.0 'Set the orientation angle in radians.
            Dim dThroatRadius As Double = 1.0 'Set throat radius value.
            Dim eTurnAlign As TurnTransAlignTypes = TurnTransAlignTypes.ALIGN_CENTER 'Set the turn align type.
            'Declare a variable to hold the new inserted feature return by this method.
            Dim oInsertedFeature As RouteFeature = Nothing
            'Using InsertTurnTransitionOnEndFeature(), to insert a turn transition on end feature.
            oCableway.InsertTurnTransitionOnEndFeature(oInsertOnFeature, oEndTransitionPos, oCrossSection, dOrientationAngle, dThroatRadius, eTurnAlign, oInsertedFeature)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.Cableway.InsertStraightTransitionOnEndFeature(Ingr.SP3D.Route.Middle.CablewayEndFeature,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Route.Middle.StraightTransAlignTypes,Ingr.SP3D.Route.Middle.Services.RouteCrossSection,System.Double,Ingr.SP3D.Route.Middle.RouteFeature@)">
            <summary>
            Inserts straight transition on cableway end feature.
            </summary>
            <param name="oCablewayEndFeature">Cableway end feature.</param>
            <param name="oTransEndPosition">Transition end position.</param>
            <param name="eAlign">Alignment type.</param>
            <param name="oCrossSection">Cross section of transition end.</param>
            <param name="dOrientationAngle">Orintation angle of transition.</param>
            <param name="oInsertedTransition">Inserted transition feature.</param>
            <exception cref="T:System.ArgumentNullException">Input arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid input arguments.</exception>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteInvalidTransitionCrossSection">Invalid cross section.</exception>  
            <example>This example explains how to insert straight transition on end feature by passing end position as input.
            <code>
            'Create the cableway.
            Dim oCableway As Cableway = Nothing
            'Define cableway end feature on which transition is to be inserted.
            Dim oCablewayEndFeature As CablewayEndFeature = Nothing
            'Define end cross section of transition.
            Dim oCrossSection As RouteCrossSection = Nothing
            'Define end position of transition.
            Dim oEndPosition As Position = Nothing
            'Define straight transition alignment type.
            Dim eAlign = StraightTransAlignTypes.CENTERLINE
            'Define orientation angle of transition to be inserted.
            Dim dOrientationAngle As Double = 0.1
            'Declare a variable to hold inserted transition feature.
            Dim oInsertedFeature As RouteFeature = Nothing
            'Use InsertStraightTransitionOnEndFeature() to insert transition on cableway end feature.
            oCableway.InsertStraightTransitionOnEndFeature(oCablewayEndFeature, oEndPosition, eAlign, oCrossSection, dOrientationAngle, oInsertedFeature)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.Cableway.InsertStraightTransitionOnEndFeature(Ingr.SP3D.Route.Middle.CablewayEndFeature,System.Double,Ingr.SP3D.Route.Middle.StraightTransAlignTypes,Ingr.SP3D.Route.Middle.Services.RouteCrossSection,System.Double,Ingr.SP3D.Route.Middle.RouteFeature@)">
            <summary>
            Inserts straight transition on cableway end feature.
            </summary>
            <param name="oCablewayEndFeature">Cableway end feature.</param>
            <param name="dTransLength">Length of transition.</param>
            <param name="eAlign">Alignment type.</param>
            <param name="dOrientationAngle">Orientation angle of transition.</param>
            <param name="oCrossSection">Cross section of transistion.</param>
            <param name="oInsertedTransition">Inserted transition feature.</param>
            <exception cref="T:System.ArgumentNullException">Input arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid input arguments.</exception>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteInvalidTransitionCrossSection">Invalid cross section.</exception>  
            <example>This example explains how to insert straight transition on end feature by passing transition length as input. 
            <code>
            'Create the cableway.
            Dim oCableway As Cableway = Nothing
            'Define cableway end feature on which transition is to be inserted.
            Dim oCablewayEndFeature As CablewayEndFeature = Nothing
            'Define end cross section of transition.
            Dim oCrossSection As RouteCrossSection = Nothing
            'Define length of transition.
            Dim dTransLength As Double = 1.0
            'Define straight transition alignment type.
            Dim eAlign = StraightTransAlignTypes.CENTERLINE
            'Define orientation angle of transition to be inserted.
            Dim dOrientationAngle As Double = 0.1
            'Declare a variable to hold inserted transition feature.
            Dim oInsertedFeature As RouteFeature = Nothing
            'Use InsertStraightTransitionOnEndFeature() to insert transition on cableway end feature.
            oCableway.InsertStraightTransitionOnEndFeature(oCablewayEndFeature, dTransLength, eAlign, oCrossSection, dOrientationAngle, oInsertedFeature)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.Cableway.GetOrientationAngle(System.Double)">
            <summary>
            Converts to corresponding +ve value if we pass -ve values. 
            </summary>        
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.CablewayTurnFeature">
            <summary>
            Wrapper for Route CablewayTurnFeature class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.CablewayTurnFeature.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the CablewayTurnFeature base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.CablewayTurnFeature.#ctor">
            <summary>
            Public constructor for the CablewayTurnFeature base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.CablewayTurnFeature.Finalize">
            <summary>
            Destructor for the CablewayTurnFeature base class.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CablewayTurnFeature.CrossSectionOrientationAngle">
            <summary>
            Gets or sets the CrossSectionOrientationAngle property. 
            </summary>        
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CablewayTurnFeature.Width">
            <summary>
            Gets or sets the Width property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CablewayTurnFeature.Depth">
            <summary>
            Gets or sets the Depth property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CablewayTurnFeature.CornerRadius">
            <summary>
            Gets or sets the CornerRadius property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CablewayTurnFeature.DimensionalBaseOuter">
            <summary>
            Gets or sets the DimensionalBaseOuter property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CablewayTurnFeature.CrossSectionShape">
            <summary>
            Gets the CrossSectionShape property. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.ConduitBranchFeature">
            <summary>
            Wrapper for the route ConduitBranchFeature class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConduitBranchFeature.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the ConduitBranchFeature base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConduitBranchFeature.#ctor">
            <summary>
            Public constructor for the ConduitBranchFeature base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.ConduitBranchFeature.Finalize">
            <summary>
            Destructor for the ConduitBranchFeature base class.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitBranchFeature.ShortCode">
            <summary>
             Gets or sets the short code property on the ConduitAlongLegFeature class.
             This property is shown as "Type" in TaskHost ribbon bar.
            </summary>
             <example>This example shows how to get or set the shortcode property on ConduitAlongLegFeature.
             <code>
             Dim sShortCode As string
             'Get shortcode on ConduitAlongLegFeature
             sShortCode = oConduitAlongLegFeature.ShortCode
             'Define shortcode
             sShortCode = "TEE"
             'Set shortcode on ConduitAlongLegFeature    
             oConduitAlongLegFeature.ShortCode = sShortCode
             </code>
             </example>        
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitBranchFeature.NCD">
            <summary>
            Gets or sets the NCD value. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitBranchFeature.OptionCode">
            <summary>
            Gets or sets the OptionCode property. 
            This property is shown as "Option" in TaskHost ribbon bar.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitBranchFeature.OuterDiameter">
            <summary>
            Gets the OuterDiameter Property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.ConduitBranchFeature.DefaultShortCode">
            <summary>
            Gets the DefaultShortCode property. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.PipeSurfaceMountFeature">
            <summary>
            Defines the properties and methods on a PipeSurfaceMount feature.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeSurfaceMountFeature.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the PipeSurfaceMountFeature base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeSurfaceMountFeature.#ctor">
            <summary>
            Public constructor for the PipeSurfaceMountFeature base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeSurfaceMountFeature.Finalize">
            <summary>
            Destructor for the PipeSurfaceMountFeature base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeSurfaceMountFeature.SetInsulationSpec(Ingr.SP3D.ReferenceData.Middle.PipeInsulationSpec)">
            <summary>
            Sets the insulation specification assigned to the feature. This method validates the insulation temperature on the feature  
            before setting the insulation specification on the feature.
            </summary>
            <param name="PipeInsulationSpec">Insulation specification object to set.</param>
            <example>Explains how to call the SetInsulationSpec method.
            <code>
             'Define pipe surface mount feature.
             Dim oPipeSurMountFeat As PipeSurfaceMountFeature = Nothing
             'Define input arguments.
             Dim oInsulationSpec As PipeInsulationSpec = Nothing        
             'Call SetInsulationSpec method.
             oPipeSurMountFeat.SetInsulationSpec(oInsulationSpec)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeSurfaceMountFeature.SetInsulationSpec(Ingr.SP3D.ReferenceData.Middle.PipeInsulationSpec,System.Double)">
            <summary>
            Assigns the insulation specification to the feature. The insulation temperature will be validated and set on the feature.
            </summary>
            <param name="PipeInsulationSpec">Insulation specification object to set.</param>
            <param name="InsulationTemperature">Insulation temperature value to set.</param>
            <example>Explains how to call the SetInsulationSpec method.
            <code>
             'Define pipe surface mount feature.
             Dim oPipeSurMountFeat As PipeSurfaceMountFeature = Nothing
             'Define input arguments.
             Dim oInsulationSpec As PipeInsulationSpec = Nothing
             Dim dTemperature As Double = 290
             'Call SetInsulationSpec method.
             oPipeSurMountFeat.SetInsulationSpec(oInsulationSpec, dTemperature)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeSurfaceMountFeature.SetUserDefinedInsulation(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Sets the user-defined insulation.
            </summary>
            <param name="iPurpose">Purpose of the insulation.</param>
            <param name="iMaterial">Insulation material.</param>
            <param name="dThickness">Thickness of insulation.</param>
            <param name="dTemperature">Temperature rating of the insulation.</param>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteIncorrectPurposeCodeException">The lPurpose argument is a value that is not in the InsulationPurpose codelist.</exception>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteIncorrectMaterialCodeException">The lMaterial argument is a value that is not in the InsulationMaterial codelist.</exception>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteInvalidInsulationThickessException">The value for dThickness is not defined for the given InsulationMaterial code. </exception>
            <example> This example shows how to set user-defined insulation on PipeTurnFeature.
            <code>
            'Declare the required variables. 
            Dim oPipeFeature As PipeTurnFeature = Nothing
            Dim iPurpose As Int32
            Dim iMaterial As Int32
            Dim dThickness As Double
            Dim dTemperature As Double
            ' Set user-defined insulation on PipeTurnFeature. 
            oPipeFeature.SetUserDefinedInsulation(iPurpose, iMaterial, dThickness, dTemperature)
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeSurfaceMountFeature.ShortCode">
            <summary>
             Gets or sets the Short Code property.
             This property is shown as "Type" in TaskHost ribbon bar.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeSurfaceMountFeature.InsulationSpec">
            <summary>
             Gets the Insulation Specification property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeSurfaceMountFeature.MultiSizeOption">
            <summary>
            Gets or sets the MultiSizeOption property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeSurfaceMountFeature.Tag">
            <summary>
            Gets or sets the Tag property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeSurfaceMountFeature.NPD">
            <summary>
            Gets or sets the NPD (nominal pipe diameter) property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeSurfaceMountFeature.OptionCode">
            <summary>
            Gets or sets the Option Code property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeSurfaceMountFeature.OuterDiameter">
            <summary>
            Gets or sets the Outer Diameter property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeSurfaceMountFeature.DefaultShortCode">
            <summary>
            Gets or sets the Default Short Code property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeSurfaceMountFeature.InsulationPurpose">
            <summary>
            Gets the Insulation Purpose property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeSurfaceMountFeature.InsulationMaterial">
            <summary>
            Gets the Insulation Material property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeSurfaceMountFeature.InsulationThickness">
            <summary>
            Gets the Insulation Thickness property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeSurfaceMountFeature.InsulationTemperature">
            <summary>
            Gets the Insulation Temperature property. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.PipeSpecialty">
            <summary>
            PipeSpecialty is the .NET wrapper class for Pipe Specialty objects.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeSpecialty.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the PipeSpecialty base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeSpecialty.#ctor">
            <summary>
            Public constructor for the PipeSpecialty base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeSpecialty.Finalize">
            <summary>
            Destructor for the PipeSpecialty base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.PipeSpecialty.GetNameRuleHelper">
            <summary>
            Private utility method to get and manage the name rule helper object.
            </summary>
            <returns>m_oSystemChildHelper - Occurrence to the name rule helper object.</returns>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.PipeSpecialty.ActiveNameRule">
             <summary>
             Gets or sets the active name rule assigned to a PipeSpecialty.
             </summary>
             <returns>Active name rule as Ingr.SP3D.Common.Middle.BusinessObject.</returns>
             <exception cref="T:System.InvalidOperationException">The base object does not support this operation.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidObjectTypeException">The object is not a name rule object.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoAccessException">The user does not have access to read or modify the object.</exception>
            <example>This example explains how to get or set the active name rule.
            <code>
             'Define PipeSpecialty. 
             Dim oPipeSpecialty As PipeSpecialty = Nothing
             Dim oActiveNameRule As BusinessObject
             'Get the active name rule. 
             oActiveNameRule = oPipeSpecialty.ActiveNameRule 
             ' Set the active name rule. 
             oPipeSpecialty.ActiveNameRule = oActiveNameRule 
            </code>
            </example>
        </member>
        <member name="T:Ingr.SP3D.Route.Middle.CableRun">
            <summary>
            CableRun is the .Net wrapper class for CableRun objects.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.CableRun.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private business object wrapper constructor for cablerun.
            </summary>
            <param name="oPBO">Private business object.</param>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.CableRun.#ctor(Ingr.SP3D.Common.Middle.ISystem,Ingr.SP3D.ReferenceData.Middle.Part,Ingr.SP3D.Common.Middle.IConnectable,Ingr.SP3D.Common.Middle.IConnectable)">
             <summary>
             Constructor for cable run class.
             </summary>
             <param name="oParentSystem">Parent system of cable.</param>
             <param name="oCableCatalogPart">Catalog part of the cable.</param>
             <param name="oOriginatingDevice">Originating device.</param>
             <param name="oTerminatingDevice">Terminating device.</param>
             <exception cref="T:System.ArgumentNullException">Null arguments.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid input arguments.</exception>        
            <example>This example explains about how to create cable run.
            <code>
            'Get parent system for cablerun.
            Dim oSystem As ISystem = Nothing
            'Define terminal device.
            Dim oTerminal1 As IConnectable = Nothing
            'Define terminal device.
            Dim oTerminal2 As IConnectable = Nothing
            'Define cable part.
            Dim oCablePart As Part = Nothing
            'Create cable.
            Dim oCablerun As New CableRun(oSystem, oCablePart, oTerminal1, oTerminal2)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.CableRun.Finalize">
            <summary>
            Destructor for the cable run wrapper class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.CableRun.ConnectToPortOnOriginatingDevice(Ingr.SP3D.Common.Middle.IPort)">
             <summary>
             Connects cable to specified port on an originating device.
             </summary>
             <param name="oCablePortOnOriginatingDevice">Cable port on originating device.</param>
             <exception cref="T:System.ArgumentNullException">Null arguments.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid port.</exception>
            <example>
            <code>
            'Create run 
             Dim oCableRun As CableRun = Nothing 
            'Get port on originating device. 
             Dim oCablePort As IPort = Nothing 
            'Connect cable to specified port on originating device. 
             oCableRun.ConnectToPortOnOriginatingDevice(oCablePort)         
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.CableRun.ConnectToPortOnTerminatingDevice(Ingr.SP3D.Common.Middle.IPort)">
             <summary>
             Connects cable to specified port on terminating device.
             </summary>
             <param name="oCablePortOnTerminatingDevice">Cable port on terminating device.</param>
             <exception cref="T:System.ArgumentNullException">Null arguments.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid port.</exception>
             <example>
             <code>
            'Create run. 
             Dim oCableRun As CableRun = Nothing 
            'Get port on terminating device. 
             Dim oCablePort As IPort = Nothing 
            'Connect cable to specified port on terminating device. 
             oCableRun.ConnectToPortOnOriginatingDevice(oCablePort) 
             </code>
             </example>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.CableRun.GetRouteAsFeatures">
            <summary>
            Returns all the features of a cable route in order if the cable route is completed.
            </summary>
            <returns>Collection of route features in order.</returns>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteCableRouteUndefinedOrIncomplete">Thrown when the cable route is incomplete or undefined.</exception>
            <example>
            <code>
            'Define cable run.
            Dim oCablerun As CableRun = Nothing
            'Call GetRouteAsFeature' to get cable route as ordered features.
            Dim oCableRouteFeatures = oCablerun.GetRouteAsFeatures
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CableRun.OriginatingDevice">
             <summary>
             Gets or sets originating device of cable run.
             </summary>
             <exception cref="T:System.ArgumentNullException">Null arguments.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid originating device.</exception>
             <example>Example explains how to get or set originating device of cable run.
             <code>
             'Define cable run. 
            Dim oCableRun As CableRun = Nothing 
            'Get originating device of cable run. 
            Dim oOriginatingDevice As IConnectable = oCableRun.OriginatingDevice 
            'Set originating device of cable run. 
            Dim oNewdevice As IConnectable = Nothing 
            oCableRun.OriginatingDevice = oNewdevice 
             </code>
             </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CableRun.TerminatingDevice">
             <summary>
             Gets or sets terminating device of cable run.
             </summary>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid terminating device.</exception>
            <example>Example explains how to get or set terminating device of cable run.
            <code>
             'Define cable run. 
            Dim oCableRun As CableRun = Nothing 
            'Get terminating device of cable run. 
            Dim oTerminatingDevice As IConnectable = oCableRun.TerminatingDevice 
            'Set terminating device of cable run. 
            Dim oNewdevice As IConnectable = Nothing 
            oCableRun.TerminatingDevice = oNewdevice 
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CableRun.Cable">
             <summary>
             Gets or sets cable part of this run.
             </summary>
            <example>This example explains how to get or set cable part of cable run.
            <code>
            'Define cable run. 
            Dim oCableRun As CableRun = Nothing 
            'Define cable part. 
            Dim oCable As CablePart = Nothing 
            'Get cable. 
            oCable = oCablerun.Cable 
            'Change cable part. 
            Dim oNewCable As CablePart = Nothing 
            'Set cable on this run. 
            oCablerun.Cable = oNewCable         
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CableRun.SignalType">
             <summary>
             Gets or sets signal type of cable run.
             </summary>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid signal type.</exception>
            <example>Example explains how to get or set signal type of cable run.
            <code>
            'Define cable run. 
            Dim oCableRun As CableRun = Nothing 
            'Get signal type of cable run. 
            Dim iSignalType As Integer = oCableRun.SignalType 
            'Set signal type of cable run. 
            iSignalType = 5 
            oCableRun.SignalType = iSignalType 
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CableRun.Stackable">
            <summary>
            Gets the Stackable property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CableRun.EMICode">
            <summary>
            Gets or sets the EMICode property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CableRun.RouteStatus">
            <summary>
            Gets the RouteStatus property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.CableRun.OperatingVoltage">
            <summary>
            Gets or sets the EMICode property. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Route.Middle.Services.Hidden.DuctPathFeatHelper.SetUserDefinedInsulation(System.Int32,System.Double)">
            <summary>
            Sets the user-defined insulation.
            </summary>
            <param name="iMaterial">Insulation material.</param>
            <param name="dThickness">Thickness of insulation.</param>        
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteIncorrectMaterialCodeException">The lMaterial argument is a value that is not in the InsulationMaterial codelist.</exception>
            <exception cref="T:Ingr.SP3D.Route.Exceptions.RteInvalidInsulationThickessException">The value for dThickness is not defined for the given InsulationMaterial code. </exception>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.Services.Hidden.DuctPathFeatHelper.WallThickness">
            <summary>
            Gets or sets the WallThickness property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.Services.Hidden.DuctPathFeatHelper.InsulationMaterial">
            <summary>
            Gets the InsulationMaterial property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Route.Middle.Services.Hidden.DuctPathFeatHelper.InsulationThickness">
            <summary>
            Gets the InsulationThickness property. 
            </summary>
        </member>
    </members>
</doc>
