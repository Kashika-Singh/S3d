<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EquipmentMiddle</name>
    </assembly>
    <members>
        <member name="T:Ingr.SP3D.Equipment.Middle.WCGType">
            <summary>
            WCGTypes used to differentiate dry and wet weights.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.WCGType.DRY">
            <summary>
            Dry weight type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.WCGType.WET">
            <summary>
            Wet weight type.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Middle.WCGProperties">
            <summary>
            WCGProperties is for defining weight and center of gravity types.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.WCGProperties.WCG_PROVIDED">
            <summary>
            Provided = 1; Weight is provided either by catalog part or a symbol.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.WCGProperties.WCG_COMPUTED">
            <summary>
            Computed = 2
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.WCGProperties.WCG_DEFINED">
            <summary>
            Defined = 4
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.WCGProperties.WCG_ESTIMATED">
            <summary>
            Estimated = 8
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.WCGProperties.WCG_UNDEFINED">
            <summary>
            Undefined = 256
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.WCGProperties.WCG_OUT_OF_DATE">
            <summary>
            Out-of-date = 512
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.WCGProperties.WCG_ERROR">
            <summary>
            Error = 1024
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Middle.Equipment">
            <summary>
            Equipment class represents a standard Equipment object. 
            Refer to the catalog data documentation for further details on its properties.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.Equipment.#ctor(System.String,Ingr.SP3D.Common.Middle.ISystem)">
            <summary>
            Creates equipment under a given system and of the provided type part number.
            </summary>
            <param name="strPartNumber">Catalog part number from which the equipment is created.</param>
            <param name="oParentSystem">Parent system under which the equipment is created.</param>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.InvalidPartNumberException">Part number is null or not valid.</exception>
            <example>This example explains how to create Equipment given a part number and the parent system.
            <code>
            'Create Equipment.
            Dim sPartNumber as String = Nothing 'e.g., :- "E205_1-E"
            Dim oParentSystem as ISystem = Nothing 'Update it with the parent system. In the case of design equipment, if the parent system is NULL, equipment is created under the project root.
            Dim oEquip1 As Equipment = Nothing
            oEquip1 = New Equipment(sPartNumber, oParentSystem)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.Equipment.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor for .NET to access this class.
            </summary>
            <param name="oPB">Private Business object</param>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.Equipment.#ctor(Ingr.SP3D.ReferenceData.Middle.EquipmentPart,Ingr.SP3D.Common.Middle.ISystem)">
            <summary>
            Constructs a smart equipment given an equipment part from the catalog and a system parent.
            </summary>
            <param name="oEquipPart">Catalog part object from which the equipment is created.</param>         
            <param name="oParentSystem">Parent system under which the equipment is created.</param>
            <exception cref="T:System.ArgumentNullException">Catalog part used is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure trying to create equipment.</exception>
            <example>This example explains how to create equipment given a part and the parent system.
            <code>
            'Create Equipment.
            Dim oEquipmentPart as EquipmentPart = Nothing 'Initialize with the part. Part property on an existing equipment will return the part.
            Dim oParentSystem as ISystem = Nothing 'Update it with the parent system. If the parent system is NULL, equipment is created under the project root.
            Dim oEquip1 As Equipment = Nothing
            oEquip1 = New Equipment(oEquipmentPart, oParentSystem)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.Equipment.#ctor(Ingr.SP3D.ReferenceData.Middle.PartClass,Ingr.SP3D.Common.Middle.ISystem)">
            <summary>
            Constructs a smart design equipment given a part class from the catalog and a system parent.
            </summary>
            <param name="oPartClass">Catalog part class object from which a design equipment is created.</param>
            <param name="oParentSystem">Parent system under which the design equipment is created.</param>
            <exception cref="T:System.ArgumentNullException">Part class or parent system argument is null.</exception>
            <example>This example explains how to create equipment given a part class and the parent system.
            <code>
            'Create Equipment.
            Dim oPartClass as  PartClass = Nothing 'Get the PartClass using GetPartClass method on CatalogBaseHelper class.
            Dim oParentSystem as ISystem = Nothing 'Update it with the parent system. In the case of design equipment, if the parent system is NULL, equipment is created under the project root.
            Dim oEquip1 As Equipment = Nothing
            oEquip1 = New Equipment(oPartClass, oParentSystem)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.Equipment.#ctor(Ingr.SP3D.Equipment.Middle.Equipment)">
            <summary>
            Copy constructor for equipment.
            </summary>
            <param name="oEquipmentToCopy">Equipment object to be copied.</param>
            <exception cref="T:System.ArgumentNullException">Equipment used is null.</exception>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.FailedToExecuteTheSymbol">Failed to execute the symbol.</exception>
            <example>This example explains how to use the copy constructor.
            <code>
            'Create Equipment.
            Dim oEquip As Equipment = Nothing
            Dim oEquip1 As Equipment = Nothing
            'Call copy constructor.
            oEquip1 = New Equipment(oEquip)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.Equipment.AddSystemChild(Ingr.SP3D.Common.Middle.ISystemChild)">
            <summary>
            Adds the given object as a child to the equipment.
            </summary>
            <param name="oChild">Objects implementing the ISystemChild interface.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <example>This example explains how to use AddSystemChild on an Equipment object.
            <code>
            Dim oSystemChild as ISystemChild = Nothing 'Get the SystemChild object; e.g., Shape object.
            Dim oEquip1 As Equipment = Nothing 'Get the equipment object to which shape is to be added as SystemChild.
            oEquip1.AddSystemChild(oSystemChild)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.Equipment.GetConnectablePorts(Ingr.SP3D.Common.Middle.PortType)">
            <summary>
            Gets the collection of ports given a port type that are free to be connected.
            </summary>
            <param name="eType">PortType enumerator.</param>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.InvalidArgumentException">Invalid PortType argument.</exception>
            <returns>Connectable ports collection.</returns>
            <remarks>
            <list type="table">
               <listheader>
                   <term>PortType</term>
                   <description>Description</description>
               </listheader>
               <item>
                   <term>All = 1</term>
                   <description>All port type.</description>
               </item>    
               <item>
                   <term>Piping = 2</term>
                   <description>Piping port type.</description>
               </item>
               <item>
                   <term>Duct = 3</term>
                   <description>Duct port type.</description>
               </item>
               <item>
                   <term>Cable = 4</term>
                   <description>Cable port type.</description>
               </item>
               <item>
                   <term>Foundation = 5</term>
                   <description>Foundation port type.</description>
               </item>
               <item>
                   <term>Cabletray = 6</term>
                   <description>Cabletray port type.</description>
               </item>
               <item>
                   <term>Conduit = 7</term>
                   <description>Conduit port type.</description>
               </item>
               <item>
                   <term>Edge = 8</term>
                   <description>Edge port type.</description>
               </item>
               <item>
                   <term>Face = 9</term>
                   <description>Face port type.</description>
               </item>
               <item>
                   <term>End = 10</term>
                   <description>End port type.</description>
               </item>
               <item>
                   <term>Centerline = 11</term>
                   <description>Centerline port type.</description>
               </item>
            </list>
            </remarks>
            <example>This example explains how to get the connectable ports of an Equipment object.
            <code>
            Dim oConnectablePortsCol As ReadOnlyCollection(Of IPort)
            Dim oEquip1 As Equipment = Nothing 'Get the equipment object.
            Dim ePortType As PortType = PortType.All 'Can be any PortType. 
            oConnectablePortsCol = oEquip1.GetConnectablePorts(ePortType)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.Equipment.GetConnectedPorts(Ingr.SP3D.Common.Middle.PortType)">
            <summary>
            Gets the collection of ports given a port type that is already connected to other
            objects.
            </summary>
            <param name="eType">PortType enumerator.</param>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.InvalidArgumentException">Invalid PortType argument.</exception>
            <returns>The collection of ports given a port type that are already connected.</returns>
            <remarks>
            <list type="table">
               <listheader>
                   <term>PortType</term>
                   <description>Description</description>
               </listheader>
               <item>
                   <term>All = 1</term>
                   <description>All port type.</description>
               </item>    
               <item>
                   <term>Piping = 2</term>
                   <description>Piping port type.</description>
               </item>
               <item>
                   <term>Duct = 3</term>
                   <description>Duct port type.</description>
               </item>
               <item>
                   <term>Cable = 4</term>
                   <description>Cable port type.</description>
               </item>
               <item>
                   <term>Foundation = 5</term>
                   <description>Foundation port type.</description>
               </item>
               <item>
                   <term>Cabletray = 6</term>
                   <description>Cabletray port type.</description>
               </item>
               <item>
                   <term>Conduit = 7</term>
                   <description>Conduit port type.</description>
               </item>
               <item>
                   <term>Edge = 8</term>
                   <description>Edge port type.</description>
               </item>
               <item>
                   <term>Face = 9</term>
                   <description>Face port type.</description>
               </item>
               <item>
                   <term>End = 10</term>
                   <description>End port type.</description>
               </item>
               <item>
                   <term>Centerline = 11</term>
                   <description>Centerline port type.</description>
               </item>
            </list>
            </remarks>
            <example>This example explains how to get the connected ports of an Equipment object.
            <code>
            Dim oConnectedPortsCol As ReadOnlyCollection(Of IPort)
            Dim oEquip1 As Equipment = Nothing 'Get the equipment object.
            Dim ePortType As PortType = PortType.All 'Can be any PortType. 
            oConnectedPortsCol = oEquip1.GetConnectablePorts(ePortType)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.Equipment.GetPorts(Ingr.SP3D.Common.Middle.PortType)">
            <summary>
            Gets the collection of ports given a port type that is associated to the equipment.
            All including connectable and connected ports are returned.
            </summary>
            <param name="eType">PortType enumerator.</param>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.InvalidArgumentException">Invalid PortType argument.</exception>
            <returns>The collection of ports given a port type.</returns>
            <remarks>
            <list type="table">
               <listheader>
                   <term>PortType</term>
                   <description>Description</description>
               </listheader>
               <item>
                   <term>All = 1</term>
                   <description>All port type.</description>
               </item>    
               <item>
                   <term>Piping = 2</term>
                   <description>Piping port type.</description>
               </item>
               <item>
                   <term>Duct = 3</term>
                   <description>Duct port type.</description>
               </item>
               <item>
                   <term>Cable = 4</term>
                   <description>Cable port type.</description>
               </item>
               <item>
                   <term>Foundation = 5</term>
                   <description>Foundation port type.</description>
               </item>
               <item>
                   <term>Cabletray = 6</term>
                   <description>Cabletray port type.</description>
               </item>
               <item>
                   <term>Conduit = 7</term>
                   <description>Conduit port type.</description>
               </item>
               <item>
                   <term>Edge = 8</term>
                   <description>Edge port type.</description>
               </item>
               <item>
                   <term>Face = 9</term>
                   <description>Face port type.</description>
               </item>
               <item>
                   <term>End = 10</term>
                   <description>End port type.</description>
               </item>
               <item>
                   <term>Centerline = 11</term>
                   <description>Centerline port type.</description>
               </item>
            </list>
            </remarks>
            <example>This example explains how to get the ports of an Equipment object.
            <code>
            Dim oPortsCol As ReadOnlyCollection(Of IPort)
            Dim oEquip1 As Equipment = Nothing 'Get the equipment object.
            Dim ePortType As PortType = PortType.All 'Can be any PortType. 
            oPortsCol = oEquip1.GetPorts(ePortType)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.Equipment.IsConnectedTo(Ingr.SP3D.Common.Middle.IConnectable,System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.IConnection}@)">
            <summary>
            Gets the collection of connection objects given the other side of the connectable object.
            </summary>
            <param name="oConnectable">Connectable object.</param>
            <param name="oConnectionEnum">List of objects connected to the given equipment through any of its ports.</param>
            <exception cref="T:System.ArgumentNullException">Connectable argument is null.</exception>
            <returns>Boolean to represent whether the equipment is connected.</returns>
            <example>This example explains how to check whether an object is connected to an equipment.
            <code>
            Dim oConnectable As IConnectable = Nothing 'Connectable can be obtained using the Connectable property on a RouteStockPort.
            Dim oConnectionCol as ReadOnlyCollection(Of IConnection) = Nothing
            Dim oEquip1 As Equipment = Nothing 'Get the equipment object.
            Dim bIsConnected as Boolean
            bIsConnected = oEquip1.IsConnectedTo(oConnectable, oConnectionCol)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.Equipment.GetConnectedObjects">
            <summary>
            Gets the connected objects.
            This method was not implemented.
            </summary>
            <returns>Read-only collection of the connected objects.</returns>
            <compilewhen>not implemented</compilewhen>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.Equipment.GetConnectedObjects(System.Type)">
            <summary>
            Gets the connected objects of specific object type.
            This method was not implemented.
            </summary>
            <param name="connectedObjectType">Type of the connected object.</param>
            <returns>Read-only collection of specific object type of the connected objects.</returns>
            <compilewhen>not implemented</compilewhen>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.Equipment.SetOrientation(Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Sets the orientation of the equipment.
            </summary>
            <param name="xAxisNew">X-axis of the equipment to be set.</param>
            <param name="yAxisNew">Y-axis of the equipment to be set.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <exception cref="T:System.ArgumentException">Input argument length is less than the DistanceTolerance value, or input vectors are not perpendicular to each other.</exception>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure trying to modify the object.</exception>
            <example>This example explains how to set orientation of an equipment.
            <code>
            Dim oXVector As Vector = New Vector(0, 0, 0) 'Initialize with proper values.
            Dim oYVector As Vector = New Vector(0, 0, 0) 'Initialize with proper values.
            Dim oEquip1 As Equipment = Nothing 'Get the equipment object.
            oEquip1.SetOrientation(oXVector, oYVector)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.Equipment.CanPortbeDeleted(Ingr.SP3D.Common.Middle.IDistributionPort)">
            <summary>
            Checks whether the given port can be deleted.
            </summary>
            <param name="oPort">The port object on which the check must be done for delete permission.</param>
            <exception cref="T:System.ArgumentNullException"> Port argument is null.</exception>
            <returns>Whether the port can be deleted.</returns>
            <example>This example explains how to check whether a port can be deleted.
            <code>
            Dim oEquip1 As Equipment = Nothing 'Get the equipment object.
            Dim oPort as IDistributionPort = Nothing 'Update with the port to be checked.
            Dim bCanPortbeDeleted As Boolean 
            bCanPortbeDeleted = oEquip1.CanPortbeDeleted(oPort)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.Equipment.Transform(Ingr.SP3D.Common.Middle.Matrix4X4)">
            <summary>
            Transforms the equipment with the given matrix.
            </summary>
            <param name="oT4X4">Transformation matrix by which the equipment will be transformed.</param>
            <exception cref="T:System.ArgumentNullException">Input matrix argument is null.</exception>
            <example>This example explains how to transform an equipment given a matrix.
            <code>
            Dim oTransformMatrix As Matrix4X4 = New Matrix4X4 'Initialize with proper values.
            Dim oEquip1 As Equipment = Nothing 'Get the equipment object.
            oEquip1.Transform(oTransformMatrix)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.Equipment.Children(Ingr.SP3D.Equipment.Middle.EquipmentChildrenCategory)">
            <summary>
            Gets the children associated with the equipment.
            </summary>
            <param name="eCategory">EquipmentChildrenCategory enumerator.</param>
            <returns>List of objects that implement the ISystemChild interface.</returns>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.Equipment.SetWeightAndCOG(Ingr.SP3D.Equipment.Middle.WCGType,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the weight and center of gravity (COG) on the equipment. COG values should be set according to the symbol coordinate system.
            This method takes converts the COG to global and persists it on the Equipment component.
            <param name="eWcgType">WCGType of the equipment component to be set.</param>
            <param name="dWeight">Weight of the equipment component that needs to be set.</param>
            <param name="dLocalCOGX">COG X-value with respect to the symbol coordinate system.</param>
            <param name="dLocalCOGY">COG Y-value with respect to the symbol coordinate system.</param>
            <param name="dLocalCOGZ">COG Z-value with respect to the symbol coordinate system.</param>
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.Equipment.GetWeightAndCOG(Ingr.SP3D.Equipment.Middle.WCGType,System.Double@,System.Double@,System.Double@,System.Double@,Ingr.SP3D.Equipment.Middle.WCGProperties@)">
            <summary>
            Gets the weight and center of gravity (COG) on the equipment.
            <param name="eWcgType">WCGType of the equipment component to be returned.</param>
            <param name="dWeight">Weight of the equipment. </param>
            <param name="dGlobalCOGX">COG X-value with respect to the global coordinate system.</param>
            <param name="dGlobalCOGY">COG Y-value with respect to the global coordinate system.</param>
            <param name="dGlobalCOGZ">COG Z-value with respect to the global coordinate system.</param>
            <param name="eWcgProperties">WCGProperties on the Equipment component.</param>
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.Equipment.MergeCollections(System.Collections.Generic.List{Ingr.SP3D.Common.Middle.RelationCollection})">
            <summary>
            Given a List of relation Collections this method merges all of them and returns
            One Collection of ISystemChild in the form a list.
            </summary>
            <param name="oList"></param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.Equipment.MergeAllConstraints(System.Collections.Generic.List{Ingr.SP3D.Common.Middle.RelationCollection})">
            <summary>
            Given list of relation collections this method merges all of them into one list
            of constraint types.
            </summary>
            <param name="oList"></param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.Equipment.SetUserDefinedName(System.String)">
            <summary>
            Sets the user-defined name of an object.
            </summary>
            <param name="Name">The new name.</param>
            <example>This example explains how to set a user-defined name.
            <code>
            Dim sName As String = Nothing 'Initialize this with a proper name.
            Dim oEquip1 As Equipment = Nothing 'Get the equipment object.
            oEquip1.SetUserDefinedName(sName)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.Equipment.RemoveCOMObject(System.Object)">
            <summary>
            Private utility method for removing the existance of the COM object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.Equipment.SystemParent">
            <summary>
            Gets or sets the system parent associated with an equipment.
            </summary>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.InvalidParentException"> Parent is not found for this equipment, or it is associated with more than one parent.</exception>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.Equipment.AssemblyParent">
            <summary>
            Gets or sets the assembly parent of the equipment.
            </summary>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.InvalidParentException"> Parent is not found for this equipment, or it is associated with more than one parent.</exception>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.Equipment.WBSItemParents">
            <summary>
            Gets the WBSItem parents for this item.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.Equipment.WBSProjects">
            <summary>
            Gets the projects that have claimed the object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.Equipment.SystemChildren">
            <summary>
            Gets the children under the equipment.
            </summary>
            <returns>List of objects that implement the ISystemChild interface.</returns>
            <example>This example explains how to get the SystemChildren of an Equipment object.
            <code>
            Dim oSystemChildCol As ReadOnlyCollection(Of ISystemChild)
            Dim oEquip1 As Equipment = Nothing 'Get the equipment object to which shape is to be added as SystemChild.
            oSystemChildCol = oEquip1.SystemChildren
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.Equipment.XAxis">
            <summary>
            Gets the X-axis of the equipment local coordinate system.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.Equipment.YAxis">
            <summary>
            Gets the Y-axis of the equipment local coordinate system.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.Equipment.ZAxis">
            <summary>
            Gets the Z-axis of the equipment local coordinate system.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.Equipment.Origin">
            <summary>
            Gets or sets the position of the equipment.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.Equipment.Matrix">
            <summary>
            Gets or sets the equipment matrix.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.Equipment.Range">
            <summary>
            Gets the range of the equipment.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.Equipment.CoordinateSystem">
            <summary>
            Gets the soft coordinate system object associated with the equipment.
            </summary>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.LocalCoordinateSystemMissingException">No coordinate system is associated with this equipment.</exception>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.Equipment.Constraints">
            <summary>
            Gets the list of constraints associated with this equipment.
            </summary>
            <returns> List of constraint objects. </returns>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.Equipment.Part">
            <summary>
            Gets the part.
            </summary>
            <example>This example explains how to get or set the part.
            <code>
            'Define Equipment.
            Dim oEquip As Equipment = Nothing
            Dim oEquipmentPart As EquipmentPart
            'Get part from Equipment.
            oEquipmentPart = oEquip.Part
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.Equipment.Description">
            <summary>
            Gets or sets the description on the equipment.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.Equipment.ActiveNameRule">
            <summary>
            Gets or sets the active name rule associated with the equipment.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.Equipment.NamedItemHelperObj">
            <summary>
            Private utility method for managing the existance of the NamedItemHelper object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.Equipment.Name">
            <summary>
            Gets the name of the object.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Middle.ShapePrivate">
            <summary>
            ShapePrivate is a wrapper on Shape COM business object
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.ShapePrivate.#ctor">
            <summary>
            Default constructor with no arguments
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.ShapePrivate.#ctor(System.Object,Ingr.SP3D.Common.Middle.Services.SP3DConnection)">
            <summary>
            Constructor for the SOM to construct the private object of the component 
            </summary>
            <param name="oMoniker">Object Moniker to wrap</param> 
            <param name="oConnection">SP3DConnection to wrap the business object with respective Private business object</param>  
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.ShapePrivate.CreateShape(Ingr.SP3D.Common.Middle.Services.SP3DConnection,Ingr.SP3D.Common.Middle.BusinessObject,Ingr.SP3D.Common.Middle.ISystem)">
            <summary>
            Creates the Shape from the Part, adds it under the Parent and returns the Created Object
            </summary>
            <param name="oSp3dConn">Connection Object to the database where the shape needs to be created</param> 
            <param name="oPart">Catalog part object from which Shape is created</param> 
            <param name="oParent">Parent system under which the equipment is created</param> 
            <returns>Created Shape Object</returns>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.ShapePrivate.CreateShape(System.String,Ingr.SP3D.Common.Middle.ISystem)">
            <summary>
            Create shape for a given part number (string) and system parent.
            </summary>
            <param name="strPartNumber">Catalog part number from which shape is created</param> 
            <param name="oParentSys">Parent system under which the shape is created</param> 
            <returns>Created Shape Object</returns> 
            <exception cref="F:Ingr.SP3D.Equipment.Middle.EquipErrorResults.E_NOPARTFOUND">Part not found in the catalog database</exception>
            <exception cref="F:Ingr.SP3D.Equipment.Middle.EquipErrorResults.E_INVALIDPARENT">Could not interpret the System Parent passed</exception>
            <exception cref="F:Ingr.SP3D.Equipment.Middle.EquipErrorResults.E_ACCESSDENIED">Don't have permissions to create shape</exception>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.ShapePrivate.CreateImportedShape(Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.String,Ingr.SP3D.Common.Middle.ISystem)">
            <summary>
            Internal method to create an imported shape
            </summary>
            <param name="oSp3dConn"></param>Model connection to create shape.
            <param name="importFilename"></param>name of the import file name.
            <param name="oParent"></param>Shape system parent.
            <returns>Create GenericShape object for provided import data file.</returns>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.ShapePrivate.Transform(Ingr.SP3D.Common.Middle.Matrix4X4)">
            <summary>
            Transforms the Shape with the given T4X4
            </summary>
            <param name="oT4X4"> Tranformation matrix by which the Shape has to be tranformed</param>
            <exception cref="T:System.ArgumentNullException">The Tranformation Matrix should not be null</exception>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.ShapePrivate.GetRange">
            <summary>
            Returns the RangeBox of the Shape.
            </summary>
            <returns>RangeBox of the Shape</returns>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.ShapePrivate.GetDefaultNameRule(System.String)">
            <summary>
            Gets the default name rule
            </summary>
            <param name="strEntityName">Entity name</param>
            <returns>IJDNameRuleHolder Object</returns>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.ShapePrivate.IsAssemblyMember">
            <summary>
            Checks if the Shape is an assembly member of an Equipment
            </summary>
            <returns>Boolean</returns>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.ShapePrivate.Representation">
            <summary>
            To get / set the Shape's Representation ID.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.ShapePrivate.Origin">
            <summary>
            Returns or sets the origin of the Shape.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.ShapePrivate.XAxis">
            <summary>
            Returns or sets the X-Axis of the Shape coordinate system.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.ShapePrivate.YAxis">
            <summary>
            Returns or sets the Y-Axis of the Shape coordinate system.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.ShapePrivate.ZAxis">
            <summary>
            Returns or sets the Z-Axis of the Shape coordinate system.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.ShapePrivate.CrossSetion">
            <summary>
            To Sets / Gets Returns or sets the CrossSetion of the PrismaticShape.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.ShapePrivate.Path">
            <summary>
            To Sets / Gets the Path of the PrismaticShape.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.ShapePrivate.Matrix">
            <summary>
            Returns or sets the matrix of the shape.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Middle.PortPlacementType">
            <summary>
            Enumerator for possible placement types of ports.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.PortPlacementType.Radial">
            <summary>
            Radial placement type; the default placement, if not specified.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.PortPlacementType.Tangential">
            <summary>
            Tangential placement type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.PortPlacementType.Axial">
            <summary>
            Axial placement type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.PortPlacementType.Skew">
            <summary>
            Skew placement type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.PortPlacementType.Offset_Skew">
            <summary>
            Skew with offset.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.PortPlacementType.Axial_Elbow">
            <summary>
            Axial placement for ports having an elbow.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.PortPlacementType.Radial_Elbow">
            <summary>
            Radial placement for ports having an elbow.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.PortPlacementType.Offset_Radial_Elbow">
            <summary>
            Combination of offset and radial for ports having an elbow.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.PortPlacementType.Position_By_Plane_Axis">
            <summary>
            Placement type by position and axis.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.PortPlacementType.Position_By_Point">
            <summary>
            Placement type by a free 3D point.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Middle.PortConstraint">
            <summary>
            Class to create constraints of ports with a reference geometry. Reference geometry can be
            a parent equipment, equipment component, or any shape under the equipment for which a port is being
            placed.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.PortConstraint.#ctor">
            <summary>
            Internal constructor hidden to client.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.PortConstraint.#ctor(Ingr.SP3D.Common.Middle.IPort,Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Public constructor for creating the port constraint.
            </summary>
            <param name="oPort">IPort interface.</param>
            <param name="oRefGeom">BusinessObject</param>
            <exception cref="T:System.ArgumentNullException">Argument null exception in case of null arguments.</exception>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.InvalidHierarchyException">Port or Nozzle does not have any parent.</exception>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.InvalidHierarchyException"> PortConstraint can only be created for the Nozzles that are chidlren of either Equipment or EquipmentComponent.</exception>
            <example>This example shows how to create a port constraint given port and reference geometry.
            <code>
            'Get the port object.
            Dim oPort1 As IPort = Nothing 'Port can be any port; e.g., :- PipeNozzle ,HvacPort, CablePort etc. These can be created using the respective constructors.
            'Get the Reference Geometry object.
            Dim oRefGeom As BusinessObject = Nothing 'This can be a GenericShape object.
            'Create the port constraint.
            Dim oPortConstraint As New PortConstraint(oPort1, oRefGeom)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.PortConstraint.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor that is needed for .NET to instantiate this object.
            </summary>
            <param name="oPB">PrivateBusinessObject</param>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.PortConstraint.PortPlacementType">
            <summary>
            Gets the port placement type of the given nozzle.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.PortConstraint.Port">
            <summary>
            Gets the Port object from the port constraint. The port constraint object ties the Port object according
            to the given properties on the port constraint.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.PortConstraint.ReferenceGeometry">
            <summary>
            Gets or sets the reference geometry to be used for the port constraint object.
            The reference geometry can be Equipment, Equipment Component, or Shape.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.PortConstraint.N1">
            <summary>
            Gets or sets the N1 value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.PortConstraint.N2">
            <summary>
            Gets or sets the N2 value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.PortConstraint.N3">
            <summary>
            Gets or sets the N3 value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.PortConstraint.N4">
            <summary>
            Gets or sets the N4 value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.PortConstraint.N5">
            <summary>
            Gets or sets the N5 value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.PortConstraint.OR1">
            <summary>
            Gets or sets the OR1 value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.PortConstraint.OR2">
            <summary>
            Gets or sets the OR2 value.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Middle.CableTrayPort">
            <summary>
            CableTrayPort class represents the standard CableTrayPort object. 
            Refer to the catalog data documentation for further details on the properties.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Middle.DistributionPort">
            <summary>
            DistributionPort class represents a Smart3D DistributionPort object. 
            Refer to the catalogdata documentation for further details on the properties.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Middle.GenericPort">
            <summary>
            GenericPort class is the base implementation class from which all the Smart3D port objects are derived.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.GenericPort.#ctor">
            <summary>
            Internal use only --> Hidden default constructor.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.GenericPort.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor for .NET to access this class.
            </summary>
            <param name="oPb">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.GenericPort.IsAssemblyMember">
            <summary>
            Returns whether its a AssemblyMember or not
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.GenericPort.SystemParent">
            <summary>
            Gets the system parent of the port.
            </summary>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.InvalidParentException"> "Parent is not found for this port, or it has more than one parent associated."</exception>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.GenericPort.WBSItemParents">
            <summary>
            Gets the WBSItem parents for this item.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.GenericPort.WBSProjects">
            <summary>
            Gets the projects that object is claimed to.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.GenericPort.Connectable">
            <summary>
            Gets the IConnectable of the Port.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.GenericPort.Connections">
            <summary>
            Gets the collection of connections on the port.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.GenericPort.PortType">
            <summary>
            Gets the port type of the port.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.GenericPort.PortConstraint">
            <summary>
            Gets the PortConstraint object associated to the port.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.DistributionPort.#ctor">
            <summary>
            Internal use only --> Hidden default constructor.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.DistributionPort.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor for .NET to access this class.
            </summary>
            <param name="oPb">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.DistributionPort.DisconnectLogicalConnection">
            <summary>
            Disconnects the logical connection between nozzle and route feature.
            </summary>
            <example>
            <code>
             'Declare Distribport
             Dim oDistribPort As DistributionPort = Nothing 
             'Call 'DisconnectLogicalConnection' method to disconnect logical connection.
             oDistribPort.DisconnectLogicalConnection()
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.DistributionPort.IsConnected">
            <summary>
            Checks whether the distribution port is connected.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.DistributionPort.Location">
            <summary>
            Gets or sets the location of the distribution port.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.DistributionPort.NormalVector">
            <summary>
            Gets or sets the normal vector of the distribution port.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.DistributionPort.RadialVector">
            <summary>
            Gets or sets the radial vector of the distribution port.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.DistributionPort.PortStatus">
            <summary>
            Gets the distribution port status.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.CableTrayPort.#ctor">
            <summary>
            Internal use only --> Hidden default constructor
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.CableTrayPort.#ctor(System.String,System.Int32,Ingr.SP3D.Common.Middle.ISystem)">
            <summary>
            Creates a cable tray nozzle for a given part number.
            </summary>        
            <param name="strPartNumber">Part number of the nozzle to be created.</param>        
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="oParent">Parent system under which the nozzle must be created.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <example>This example shows how to create a cabletray port given part number, port index and system parent.
            <code>
            'Get the part number on which nozzle has to be created.
            Dim sPartNumber As String = Nothing ' For e.g., :- "156G06-30-144"
            Dim iPortIndex as Int32
            Dim oParent as ISystem = Nothing 'It can be Equipment object.
            'Create the oCableTrayPort.
            Dim oCableTrayPort As New CableTrayPort(sPartNumber, iPortIndex, oParent)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.CableTrayPort.#ctor(System.String,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Int32)">
            <summary>
            Creates a cable tray nozzle for a given part number.
            </summary>        
            <param name="strPartNumber">Part number of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <example>This example shows how to create a cabletray port given part number, connection, and port index.
            <code>
            'Get the part number. 
            Dim sPartNumber As String = Nothing 'For e.g., "156G06-30-144"
            Dim oConnection As SP3DConnection = Nothing 'One way to get the connection is using DBConnection property on Equipment.
            Dim iPortIndex as Int32
            'Create the CableTrayPort.
            Dim oCableTrayPort As New CableTrayPort(sPartNumber, oConnection, iPortIndex)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.CableTrayPort.#ctor(System.String,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Int32,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Creates a cable tray port for a given part number at the specified location and orientation.
            </summary>
            <param name="strPartNumber">Part number of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="oPos">Position of the nozzle.</param>
            <param name="oNormal">Normal of the nozzle.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <example>This example shows how to create a cable tray port given part number, connection, port index, position, and normal.
            <code>
            'Get the part number. 
            Dim sPartNumber As String = Nothing ' For e.g., "156G06-30-144"
            Dim oConnection As SP3DConnection = Nothing 'One way to get the connection is using DBConnection property on Equipment.
            Dim iPortIndex as Int32
            Dim oPosition as new Position(0.0,0.0, 0.0) 'Initialize the position to appropriate value.
            Dim oNormalVector as new Vector(0.0, 0.0, 0.0) 'Initialize the vector to the required value.
            'Create the cable tray port.
            Dim oCableTrayPort As New CableTrayPort(sPartNumber, oConnection, iPortIndex, oPosition, oNormalVector)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.CableTrayPort.#ctor(Ingr.SP3D.ReferenceData.Middle.Part,System.Int32,Ingr.SP3D.Common.Middle.ISystem)">
            <summary>
            Creates a cable tray nozzle for a given part.
            </summary>        
            <param name="oPart">Part of the nozzle to be created.</param>        
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="oParent">Parent system under which the nozzle must be created.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <example>This example shows how to create a cable tray port given part, port index and system parent.
            <code>
            'Get the part on which nozzle has to be created.
            Dim oPart As Part = Nothing ' Can get the part using GetPart method on CatalogBaseHelper class.
            Dim iPortIndex as Int32
            Dim oParent as ISystem = Nothing 'It can be Equipment object.
            'Create the oCableTrayPort.
            Dim oCableTrayPort As New CableTrayPort(oPart, iPortIndex, oParent)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.CableTrayPort.#ctor(Ingr.SP3D.ReferenceData.Middle.Part,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Int32)">
            <summary>
            Creates a cable tray nozzle for a given part.
            </summary>        
            <param name="oPart">Part of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <example>This example shows how to create a cable tray port given part, connection, port index.
            <code>
            'Get the part on which nozzle has to be created.
            Dim oPart As Part = Nothing ' Can get the part using GetPart method on CatalogBaseHelper class.
            Dim oConnection As SP3DConnection = Nothing 'One way to get the connection is using DBConnection property on Equipment.
            Dim iPortIndex as Int32
            'Create the cable tray port.
            Dim oCableTrayPort As New CableTrayPort(oPart, oConnection, iPortIndex)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.CableTrayPort.#ctor(Ingr.SP3D.ReferenceData.Middle.Part,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Int32,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Creates a cable tray port for a given part at the specified location and orientation.
            </summary>
            <param name="oPart">Part of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="oPos">Position of the nozzle.</param>
            <param name="oNormal">Normal of the nozzle.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <example>This example shows how to create a cable tray port given part, connection, port index, position and normal.
            <code>
            'Get the part on which nozzle has to be created.
            Dim oPart As Part = Nothing ' Can get the part using GetPart method on CatalogBaseHelper class.
            Dim oConnection As SP3DConnection = Nothing 'One way to get the connection is using DBConnection property on Equipment.
            Dim iPortIndex as Int32
            Dim oPosition as new Position(0.0,0.0, 0.0) 'Initialize the position to appropriate value.
            Dim oNormalVector as new Vector(0.0, 0.0, 0.0) 'Initialize the vector to the required value.
            'Create the cable tray port.
            Dim oCableTrayPort As New CableTrayPort(oPart, oConnection, iPortIndex, oPosition, oNormalVector)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.CableTrayPort.#ctor(Ingr.SP3D.ReferenceData.Middle.CableTrayPortDef,Ingr.SP3D.Common.Middle.Services.SP3DConnection)">
            <summary>
            Creates a cable tray nozzle for a given port definition.
            </summary>
            <param name="oCableTrayPortDef">Cable tray port definition of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <exception cref="T:System.ArgumentException">Input argument is null.</exception>
            <example>This example shows how to create a cable tray port given port definition and a connection.
            <code>
            'Get the Cabletrayportdef of the nozzle to be created.
            Dim oCableTrayPortDef As CableTrayPortDef = Nothing ' For e.g., :- Can get the port definition using methods on CatalogBaseHelper class.
            Dim oConnection As SP3DConnection = Nothing 'One way to get the connection is using DBConnection property on Equipment.
            'Create the cable tray port.
            Dim oCableTrayPort As New CableTrayPort(oCableTrayPortDef, oConnection)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.CableTrayPort.#ctor(System.String,System.Int32,Ingr.SP3D.Common.Middle.ISystem,System.Boolean)">
            <summary>
            Creates a cable tray nozzle for a given part number.
            </summary>        
            <param name="strPartNumber">Part number of the nozzle to be created.</param>        
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="oParent">Parent system under which the nozzle must be created.</param>
            <param name="bBehaviourControlledByUser">Behavior Ccntrolled by user flag. True if the user can modify the orientation properties from property page and vice versa.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <example>This example shows how to create a cabletray port given part number, port index, and system parent.
            <code>
            'Get the part number on which nozzle has to be created.
            Dim sPartNumber As String = Nothing ' e.g., :- "156G06-30-144"
            Dim iPortIndex as Int32
            Dim oParent as ISystem = Nothing 'It can be Equipment object.
            'Set the behavior controlled by user flag.
            Dim bBehaviourControlledByUser As Boolean = False
            'Create the oCableTrayPort.
            Dim oCableTrayPort As New CableTrayPort(sPartNumber, iPortIndex, oParent, bBehaviourControlledByUser)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.CableTrayPort.#ctor(System.String,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Int32,System.Boolean)">
            <summary>
            Creates a cable tray nozzle for a given part number.
            </summary>        
            <param name="strPartNumber">Part number of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
             <param name="bBehaviourControlledByUser">Behavior Controled by user flag. True if the user can modify the orientation properties from property page and vice versa.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <example>This example shows how to create a cabletray port given part number, connection, and port index.
            <code>
            'Get the part number. 
            Dim sPartNumber As String = Nothing 'For e.g., "156G06-30-144"
            Dim oConnection As SP3DConnection = Nothing 'One way to get the connection is using DBConnection property on Equipment.
            Dim iPortIndex as Int32
            'Set the behavior controlled by user flag.
            Dim bBehaviourControlledByUser As Boolean = False
            'Create the CableTrayPort.
            Dim oCableTrayPort As New CableTrayPort(sPartNumber, oConnection, iPortIndex, bBehaviourControlledByUser)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.CableTrayPort.#ctor(System.String,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Int32,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector,System.Boolean)">
            <summary>
            Creates a cable tray port for a given part number at the specified location and orientation.
            </summary>
            <param name="strPartNumber">Part number of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="oPos">Position of the nozzle.</param>
            <param name="oNormal">Normal of the nozzle.</param>
             <param name="bBehaviourControlledByUser">Behavior controlled by user flag. True if the user can modify the orientation properties from property page and vice versa.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <example>This example shows how to create a cable tray port given part number, connection, port index, position, and normal.
            <code>
            'Get the part number. 
            Dim sPartNumber As String = Nothing ' For e.g. "156G06-30-144"
            Dim oConnection As SP3DConnection = Nothing 'One way to get the connection is using DBConnection property on Equipment.
            Dim iPortIndex as Int32
            Dim oPosition as new Position(0.0,0.0, 0.0) 'Initialize the position to appropriate value.
            Dim oNormalVector as new Vector(0.0, 0.0, 0.0) 'Initialize the vector to the required value.
            'Set the behaviour controlled by user flag.
            Dim bBehaviourControlledByUser As Boolean = False
            'Create the cable tray port.
            Dim oCableTrayPort As New CableTrayPort(sPartNumber, oConnection, iPortIndex, oPosition, oNormalVector, bBehaviourControlledByUser)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.CableTrayPort.#ctor(Ingr.SP3D.ReferenceData.Middle.Part,System.Int32,Ingr.SP3D.Common.Middle.ISystem,System.Boolean)">
            <summary>
            Creates a cable tray nozzle for a given part.
            </summary>        
            <param name="oPart">Part of the nozzle to be created.</param>        
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="oParent">Parent system under which the nozzle must be created.</param>
             <param name="bBehaviourControlledByUser">Behavior controlled by user flag. True if the user can modify the orientation properties from property page and vice versa.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <example>This example shows how to create a cable tray port given part, port index, and system parent.
            <code>
            'Get the part on which nozzle has to be created.
            Dim oPart As Part = Nothing ' Can get the part using GetPart method on CatalogBaseHelper class.
            Dim iPortIndex as Int32
            Dim oParent as ISystem = Nothing 'It can be Equipment object.
            'Set the behaviour controlled by user flag.
            Dim bBehaviourControlledByUser As Boolean = False
            'Create the oCableTrayPort.
            Dim oCableTrayPort As New CableTrayPort(oPart, iPortIndex, oParent, bBehaviourControlledByUser)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.CableTrayPort.#ctor(Ingr.SP3D.ReferenceData.Middle.Part,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Int32,System.Boolean)">
            <summary>
            Creates a cable tray nozzle for a given part.
            </summary>        
            <param name="oPart">Part of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="bBehaviourControlledByUser">Behavior controlled by user flag. True if the user can modify the orientation properties from property page and vice versa.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <example>This example shows how to create a cable tray port given part, connection, port index.
            <code>
            'Get the part on which nozzle has to be created
            Dim oPart As Part = Nothing ' Can get the part using GetPart method on CatalogBaseHelper class.
            Dim oConnection As SP3DConnection = Nothing 'One way to get the connection is using DBConnection property on Equipment.
            Dim iPortIndex as Int32
            'Set the behavior controlled by user flag.
            Dim bBehaviourControlledByUser As Boolean = False
            'Create the cable tray port.
            Dim oCableTrayPort As New CableTrayPort(oPart, oConnection, iPortIndex, bBehaviourControlledByUser)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.CableTrayPort.#ctor(Ingr.SP3D.ReferenceData.Middle.Part,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Int32,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector,System.Boolean)">
            <summary>
            Creates a cable tray port for a given part at the specified location and orientation.
            </summary>
            <param name="oPart">Part of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="oPos">Position of the nozzle.</param>
            <param name="oNormal">Normal of the nozzle.</param>
            <param name="bBehaviourControlledByUser">Behavior controlled by user flag. True if the user can modify the orientation properties from property page and vice versa.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <example>This example shows how to create a cable tray port given part, connection, port index, position, and normal.
            <code>
            'Get the part on which nozzle has to be created.
            Dim oPart As Part = Nothing ' Can get the part using GetPart method on CatalogBaseHelper class.
            Dim oConnection As SP3DConnection = Nothing 'One way to get the connection is using DBConnection property on Equipment.
            Dim iPortIndex as Int32
            Dim oPosition as new Position(0.0,0.0, 0.0) 'Initialize the position to appropriate value.
            Dim oNormalVector as new Vector(0.0, 0.0, 0.0) 'Initialize the vector to the required value.
            'Set the behaviour controlled by user flag.
            Dim bBehaviourControlledByUser As Boolean = False
            'Create the cable tray port.
            Dim oCableTrayPort As New CableTrayPort(oPart, oConnection, iPortIndex, oPosition, oNormalVector, bBehaviourControlledByUser)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.CableTrayPort.#ctor(Ingr.SP3D.ReferenceData.Middle.CableTrayPortDef,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Boolean)">
            <summary>
            Creates a cable tray nozzle for a given port definition.
            </summary>
            <param name="oCableTrayPortDef">Cable tray port definition of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="bBehaviourControlledByUser">Behavior controlled by user flag. True if the user can modify the orientation properties from property page and vice versa.</param>
            <exception cref="T:System.ArgumentException">Input argument is null.</exception>
            <example>This example shows how to create a cable tray port given port definition and a connection.
            <code>
            'Get the Cabletrayportdef of the nozzle to be created.
            Dim oCableTrayPortDef As CableTrayPortDef = Nothing 'e.g., :- Can get the port definition using methods on CatalogBaseHelper class.
            Dim oConnection As SP3DConnection = Nothing 'One way to get the connection is using DBConnection property on Equipment.
            'Set the behavior controlled by user flag.
            Dim bBehaviourControlledByUser As Boolean = False
            'Create the cable tray port.
            Dim oCableTrayPort As New CableTrayPort(oCableTrayPortDef, oConnection, bBehaviourControlledByUser)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.CableTrayPort.#ctor(Ingr.SP3D.Equipment.Middle.CableTrayPort)">
            <summary>
            Copy constructor for cable tray port.
            </summary>
            <param name="oNozzleToCopy">Nozzle object to be copied.</param>
            <exception cref="T:System.ArgumentNullException">Nozzle passed is null.</exception>
            <example>This example explains how to use the copy constructor.
            <code>
            'Create cable tray nozzle.
            Dim oNozzle As CableTrayPort = Nothing        
            'Call copy constructor.
            Dim oNozzle1 As CableTrayPort = Nothing
            oNozzle1 = New CableTrayPort(oNozzle)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.CableTrayPort.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor for .NET to access this class.
            </summary>
            <param name="oPb">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.CableTrayPort.SetUserDefinedName(System.String)">
            <summary>
            Sets the user-defined name of the CableTrayPort object.
            </summary>
            <param name="Name">The new name.</param>
            <example>This is an example of the SetUserDefinedName method.
            <code>
            'Create CableTrayPort object with its constructor.
            oCableTrayPort.SetUserDefinedName("Top CableTrayPort")
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.CableTrayPort.Range">
            <summary>
            Gets the range box representing the range of the CableTrayPort.
            </summary>
            <returns>The objects range box.</returns>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.GetRangeException">Unexpected failure while getting the range.</exception>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.CableTrayPort.Name">
            <summary>
            Gets the name of the object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.CableTrayPort.PortIndex">
            <summary>
            Gets or sets the port index property of the cable tray port.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.CableTrayPort.NominalWidth">
            <summary>
            Gets or sets the nominal width of the cable tray port.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.CableTrayPort.NominalDepth">
            <summary>
            Gets or sets the nominal depth of the cable tray port.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.CableTrayPort.ActualDepth">
            <summary>
            Gets or sets the actual depth of the cable tray port.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.CableTrayPort.ActualWidth">
            <summary>
            Gets or sets the actual width of the cable tray port.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.CableTrayPort.LoadWidth">
            <summary>
            Gets or sets the load width of the cable tray port.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.CableTrayPort.LoadDepth">
            <summary>
            Gets or sets the load depth of the cable tray port.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Middle.PortImplHelper">
            <summary>
            Helper class that contains the common implementation of the IPort interface.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.PortImplHelper.#ctor(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Constructs a PortImplHelper class for the wrapper.
            </summary>
            <param name="oWrapper">Business Object of the wrapper class that implements the IPort interface.</param>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.PortImplHelper.Connectable">
            <summary>
            Gets the IConnectable of the port.
            </summary>
            <returns>Connectable object.</returns>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.PortImplHelper.Connections">
            <summary>
            Gets the collection of connections to the port.
            </summary>
            <returns>Collection of Connections objects.</returns>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.PortImplHelper.PortType">
            <summary>
            Gets the port type of the port.
            </summary>
            <returns>Port type of the given port.</returns>
            <remarks>
            <list type="table">
               <listheader>
                   <term>PortType</term>
                   <description>Description</description>
               </listheader>
               <item>
                   <term>All = 1</term>
                   <description>All port type.</description>
               </item>    
               <item>
                   <term>Piping = 2</term>
                   <description>Piping port type.</description>
               </item>
               <item>
                   <term>Duct = 3</term>
                   <description>Duct port type.</description>
               </item>
               <item>
                   <term>Cable = 4</term>
                   <description>Cable port type.</description>
               </item>
               <item>
                   <term>Foundation = 5</term>
                   <description>Foundation port type.</description>
               </item>
               <item>
                   <term>Cabletray = 6</term>
                   <description>Cabletray port type.</description>
               </item>
               <item>
                   <term>Conduit = 7</term>
                   <description>Conduit port type.</description>
               </item>
               <item>
                   <term>Edge = 8</term>
                   <description>Edge port type.</description>
               </item>
               <item>
                   <term>Face = 9</term>
                   <description>Face port type.</description>
               </item>
               <item>
                   <term>End = 10</term>
                   <description>End port type.</description>
               </item>
               <item>
                   <term>Centerline = 11</term>
                   <description>Centerline port type.</description>
               </item>
            </list>
            </remarks>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Middle.DesignSolid">
            <summary>
            DesignSolid business object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.DesignSolid.#ctor(Ingr.SP3D.Common.Middle.ISystem)">
            <summary>
            Constructor for a DesignSolid.
            </summary>
            <param name="systemParent">DesignSolid parent Equipment or EquipmentCommponent.</param>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.InvalidParentException">Raised when the provided system parent is not an Equipment or EquipmentComponent.</exception>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.DesignSolid.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Public constructor used internally when binding a DesignSolid object.
            </summary>
            <param name="privateBO">DesignSolid's private business object.</param>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.DesignSolid.SetOperation(Ingr.SP3D.Common.Middle.BusinessObject,Ingr.SP3D.Equipment.Middle.DesignSolidOperationType)">
            <summary>
            Internal method to change the operation associated to a shape.
            </summary>
            <param name="oShape"></param>
            <param name="operation"></param>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.DesignSolid.GetDefaultNameRule">
            <summary>
            Returns the default name rule.
            </summary>
            <returns>Default name rule business object.</returns>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.DesignSolid.SetOrientation(Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Sets the orientation of the DesignSolid given two perpendicular vectors.
            </summary>
            <param name="xAxisNew">New X-axis for the DesignSolid.</param>
            <param name="yAxisNew">New Y-axis for the DesignSolid.</param>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.NullArgumentException">xAxisNew or yAxisNew argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.ZeroLengthVectorException">xAxisNew or yAxisNew vectors are zero length.</exception>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.VectorArgumentsNotPerpendicularException">Input vectors are not perpendicular to each other.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">DesignSolid not in a working status.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnAccessDeniedException">Access has been denied to change the orientation of the DesignSolid.</exception>
            <example>This example shows how to set the orientation of a DesignSolid when the X-axis is vertical.
            <code>
            Dim oXVector As Vector = New Vector(0.0, 0.0, 1.0)
            Dim oYVector As Vector = New Vector(0.0, 1.0, 0.0)
            oShape.SetOrientation(oXVector, oYVector)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.DesignSolid.Transform(Ingr.SP3D.Common.Middle.Matrix4X4)">
            <summary>
            Transforms the DesignSolid by the given transformation matrix.
            </summary>
            <param name="oT4X4">Transformation matrix.</param>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.NullArgumentException">Input matrix argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">DesignSolid not in a working status.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnAccessDeniedException">Access has been denied to transform the DesignSolid.</exception>
            <example>Example of transforming a DesignSolid by transformation matrix.
            <code>
            Dim oTransformMatrix As Matrix4X4 = New Matrix4X4() 'Initialize with identity matrix.
            oTransformMatrix = oTransformMatrix.Matrix ' Get current transformation matrix.
            oTransformMatrix.Translate(new Vector(0.0, 15.0, 0.0)) ' Set translation of the DesignSolid to 15 meters in the Y direction
            oSolid.Transform(oTransformMatrix) ' Perform the translation.
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.DesignSolid.SetUserDefinedName(System.String)">
            <summary>
            Sets the DesignSolid's user-defined name.
            </summary>
            <param name="Name">The new name.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">DesignSolid is not in a working status.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnAccessDeniedException">Access has been denied to change the origin of the DesignSolid.</exception>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.DesignSolid.AddSystemChild(Ingr.SP3D.Common.Middle.ISystemChild)">
            <summary>
            Adds a child shape to the DesignSolid as the last add operation.
            </summary>
            <param name="child">Child shape to add to the DesignSolid.</param>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.NullArgumentException">The child argument cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidChildTypeException">The input child argument must be a GenericShape.</exception>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.AddSystemChildException">Unexpected failure occurred while adding the shape as a child of the DesignSolid.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">DesignSolid is not in a working status for shapes to be added.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnAccessDeniedException">Access has been denied to add shapes to the DesignSolid.</exception>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.DesignSolid.Representations">
            <summary>
            Gets or sets the collection of representations for the DesignSolid.
            </summary>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.InvalidAspectException">Invalid aspect defined.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">DesignSolid not in a working status.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnAccessDeniedException">Access denied to change aspects.</exception>
            <example>An example of setting the representations.
            <code>
            Dim coll as New Collection<![CDATA[<]]>int<![CDATA[>]]>
            coll.Add PhysicalAspect
            coll.Add MaintenanceAspect
            coll.Add InsulationAspect
            designSolid.Representations = coll
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.DesignSolid.DesignSolidChildren">
            <summary>
            Gets or sets the ordered list of DesignSolid child shapes that compose the solid.
            </summary>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.RetrieveDesignChildrenException">Unexpected COM failure occurred while attempting to retrieve the DesignSolid children.</exception>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.ChildAlreadyExistsException">Child shape in the list of child shapes was added twice.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">DesignSolid not in a working status.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnAccessDeniedException">Access denied to change the order of child shapes.</exception>
            <example>An example of getting the child shapes from a solid and transferring a new shape to the
            end of the solid.
            <code>
            Dim oSolidChildren As New List(Of DesignSolidChild)()
            oSolidChildren = oSolid.DesignSolidChildren
            ' Add the new shape to the end of the list. The shape could be added anywhere
            ' in the list but in this example we are adding it to the end.
            oSolidChildren.Add( New DesignSolidChild( oNewShape, DesignSolidOperationType.Add ) )
            ' Add new children and set the order of the shapes for the solid construction.
            oSolid.DesignSolidChildren = oSolidChildren
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.DesignSolid.Constraints">
            <summary>
            Returns a read-only collection containing the constraints associated with the DesignSolid.
            </summary>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.ConstraintAccessException">Unexpected COM failure while accessing the associated constraints.</exception>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.DesignSolid.Volume">
            <summary>
            Returns the volume of the DesginSolid.
            
            Note: The volume will not be computed until a transaction manager commit occurs; hence,
            adding shapes to a DesignSolid and calling a compute will not update the volume.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.DesignSolid.SurfaceArea">
            <summary>
            Returns the surface area of the DesignSolid.
            
            Note: The surface area will not be computed until a transaction manager commit occurs; hence,
            adding shapes to a DesignSolid and calling a compute will not update the surface area.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.DesignSolid.Material">
            <summary>
            Gets or sets the material associated with the DesingSolid.
            
            Note: Get returns a material object proxy and returns null if material is not assigned.
            Set may be given a direct reference to the catalog material or a proxy.
            </summary>
            <example>Example of setting and getting the DesignSolid material.
            <code>
            Dim oCatStructHelper As CatalogStructHelper = New CatalogStructHelper(oCatalogConnection)
            oSolid.Material = oCatStructHelper.GetMaterial("Concrete", "Fc 3000")
            Dim oMaterial As Ingr.SP3D.ReferenceData.Middle.Material = oSolid.Material
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.DesignSolid.WBSItemChildHelper">
            <summary>
            Private method to get the WBS helper.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.DesignSolid.LocalCSImplHelper">
            <summary>
            Private property to access the LocalCoordinateSystem helper object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.DesignSolid.SystemParent">
            <summary>
            Gets or sets the DesignSolid's system parent.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.NoSystemParentException">System parent was not found for this DesignSolid.</exception>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.CannotChangeSystemParentException">Cannot change the parent of DesignSolid - it is an output of a CustomAssembly.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">DesignSolid is not in a working status.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnAccessDeniedException">Access was denied to change the system parent.</exception>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.DesignSolid.WBSItemParents">
            <summary>
            Returns the WBSItem parents for this DesignSolid.
            </summary>
            <exception cref="T:System.InvalidOperationException">Base object does not support this operation (i.e., does not support the necessary interface).</exception>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.DesignSolid.WBSProjects">
            <summary>
            Returns the collection of WBS projects that have claimed this DesignSolid object.
            </summary>
            <exception cref="T:System.InvalidOperationException">Base object does not support this operation (i.e., does not support the necessary interface).</exception>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.DesignSolid.XAxis">
            <summary>
            Returns a copy of the X-axis vector for the DesignSolid's local coordinate system.
             It is only a copy; hence, changing any data on this vector has no affect on the
             actual coordinate system.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.DesignSolid.YAxis">
            <summary>
            Returns a copy of the Y-axis vector for the DesignSolid's local coordinate system.
             It is only a copy; hence, changing any data on this vector has no affect on the
             actual coordinate system.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.DesignSolid.ZAxis">
            <summary>
            Returns a copy of the Z-axis vector for the DesignSolid's local coordinate system.
             It is only a copy; hence, changing any data on this vector has no affect on the
             actual coordinate system.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.DesignSolid.Origin">
            <summary>
            Gets or sets the origin of the DesignSolid.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">DesignSolid not in a working status.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnAccessDeniedException">Access has been denied to change the origin of the DesignSolid.</exception>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.DesignSolid.Matrix">
            <summary>
            Gets or sets the DesignSolid transformation matrix.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">DesignSolid not in a working status.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnAccessDeniedException">Access has been denied to change the matrix of the DesignSolid.</exception>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.DesignSolid.Range">
            <summary>
            Returns the range box of the DesignSolid.
            </summary>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.InvalidRangeException">Unexpected failure occurred when trying to retrieve the range of the DesignSolid.</exception>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.DesignSolid.ActiveNameRule">
            <summary>
            Gets or sets the active name rule associated with the DesignSolid.
            </summary>
            <exception cref="T:System.InvalidOperationException">Base object does not support this operation (i.e., does not support the necessary interface).</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidObjectTypeException"> Associated COM object does not support the required name rule interfaces.</exception>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.DesignSolid.Name">
            <summary>
            Returns the name of the DesignSolid.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.DesignSolid.SystemChildren">
            <summary>
            Returns a collection of the child shapes associated with the DesignSolid.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Middle.DesignSolidOperationType">
            <summary>
            DesignSolid operation to be applied to the specific shape (i.e., add, subtract or suppress).
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.DesignSolidOperationType.Suppress">
            <summary>
            Suppress the shape (i.e., does not participate in the generation of the solid).
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.DesignSolidOperationType.Add">
            <summary>
            Shape adds its volume as part of the DesignSolid.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.DesignSolidOperationType.Subtract">
            <summary>
            Shape subtracts its volume from the DesignSolid.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Middle.DesignSolidChild">
            <summary>
            DesignSolid child geometry shape class used to form the combined solid.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.DesignSolidChild.#ctor(Ingr.SP3D.Equipment.Middle.GenericShape,Ingr.SP3D.Equipment.Middle.DesignSolidOperationType)">
            <summary>
            Constructor for a DesignSolidChild operation. This constructor is only required when
            transferring a shape from an Equipment (or other DesignSolid) to this DesignSolid.
            </summary>
            <param name="shape">Shape to be combined into a DesignSolid.</param>
            <param name="designSolidOperation">Type of operation for the shape (i.e., add, subtract or suppress).</param>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.NullArgumentException">Shape argument is null.</exception>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.DesignSolidChild.Operation">
            <summary>
            Gets or sets the operation applied to the child shape (i.e., add, subtract or suppress).
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">DesignSolid is not in a working status.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnAccessDeniedException">Access has been denied to change the operation of the shape.</exception>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.DesignSolidChild.Shape">
            <summary>
            Returns the child shape of the DesignSolid used to produce the solid.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Middle.Constraint">
            <summary>
            Class to create constraints between Equipment objects. Class supports constraint creation
            of all Equipment module classes except for ports.
            <para>Equipment, EquipmentComponent, and Shapes are the valid objects for which this class can be
            used to create constraints between them.</para>
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.Constraint.#ctor">
            <summary>
            Hidden constructor
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.Constraint.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Generic constructor that is needed for .NET to construct the Constraint object.
            </summary>
            <param name="oPrivateBusinessObject">Private Business Object</param>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.Constraint.#ctor(Ingr.SP3D.Equipment.Middle.Equipment,Ingr.SP3D.Common.Middle.BusinessObject,Ingr.SP3D.Common.Middle.BusinessObject,Ingr.SP3D.Equipment.Middle.ConstraintType,System.Double)">
            <summary>
            Creates a new constraint between the given equipment and the secondary surface.
            </summary>
            <param name="oEquipment">Equipment object that needs to be constrained.</param>
            <param name="objPrimarySurf">Reference surface on equipment that will be constrained.</param>
            <param name="objSecondarySurf">External reference surface, this reference surface can be another equipment
            or a surface of a structural member.</param>
            <param name="constrainttype">Type of the constraint to be created.</param>
            <param name="dblOffset">Distance that needs to be maintained beween primary and secondary surfaces.</param>
            <exception cref="T:System.ArgumentNullException">Argument null exception in case of null arguments except for objPrimarySurf. objPrimarySurf can be null</exception>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.InvalidSurfaceException">Passed in primary or secondary surface is suitable to create the constraint.</exception>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.InvalidHierarchyException">Passed in primary and secondary surface belongs to the same equipment.</exception>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.InvalidHierarchyException">Passed in primary surface not belongs to the given equipment.</exception>
            <example>
            <code>
            TransactionManager oTranactionMgr = MiddleServiceProvider.TransactionMgr;
            /// double offset = 0.0;
            SymbolOccurrence symbolOccurence = null;
            SymbolOccurrence symbolOccurence1 = null;
            BusinessObject surface1 = null;
            BusinessObject surface2 = null;
            //MATE RELATION
            //Create the Equipment
            Equipment equipment1 = new Equipment("PUMP 001A-E", null);
            Equipment equipment2 = new Equipment("PUMP 001A-E", null);
            oTranactionMgr.Commit("Place Equipment1");                    
            //Get the surfaces of Equipment using SymbolOccurence
            symbolOccurence = new SymbolOccurrence(equipment1);
            surface1 = symbolOccurence.GetOutput("Physical", "DefaultSurface");
            symbolOccurence1 = new SymbolOccurrence(equipment2);
            surface2 = symbolOccurence1.GetOutput("Physical", "DefaultSurface");                
            //Create Mate Constraint
            Constraint mateConstraint = new Constraint(equipment1, surface1, surface2, ConstraintType.Mate, offset);
            //ALIGN RELATION                  
            //Create the Equipment                    
            Equipment equipment4 = new Equipment("PUMP 001A-E", null);
            oTranactionMgr.Commit("Place Equipment1");
            Equipment equipment3 = new Equipment("PUMP 001A-E", null);
            //Get the surfaces of Equipment using SymbolOccurence
            symbolOccurence = new SymbolOccurrence(equipment3);
            surface1 = symbolOccurence.GetOutput("Physical", "DefaultSurface");
            symbolOccurence1 = new SymbolOccurrence(equipment4);
            surface2 = symbolOccurence1.GetOutput("Physical", "DefaultSurface");     
            // Create the Allign constraint
            Constraint allignConstraint = new Constraint(equipment3, surface1, surface2, ConstraintType.Align, offset);                
            //PARALLEL RELATION
            //Create the Equipment
            Equipment equipment5 = new Equipment("PUMP 001A-E", null);
            Equipment equipment6 = new Equipment("PUMP 001A-E", null);
            oTranactionMgr.Commit("Place Equipment1");
            //Get the surfaces of Equipment using SymbolOccurence
            symbolOccurence = new SymbolOccurrence(equipment5);
            surface1 = symbolOccurence.GetOutput("Physical", "DefaultSurface");
            symbolOccurence1 = new SymbolOccurrence(equipment6);
            surface2 = symbolOccurence1.GetOutput("Physical", "DefaultSurface");     
            //create parallel constraint
            Constraint parallelConstraint = new Constraint(equipment5, surface1, surface2, ConstraintType.Parallel, offset);
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.Constraint.#ctor(Ingr.SP3D.Equipment.Middle.EquipmentComponent,Ingr.SP3D.Equipment.Middle.EquipmentComponent,Ingr.SP3D.Common.Middle.BusinessObject,Ingr.SP3D.Common.Middle.BusinessObject,Ingr.SP3D.Equipment.Middle.ConstraintType,System.Double)">
            <summary>
            Creates a new constraint between two Equipment components of an equipment.
            </summary>
            <param name="ObjEC1">Equipment component object that needs to be constrained.</param>
            <param name="ObjEC2">Reference equipment component that acts as a fixed object.</param>
            <param name="objPrimarySurf">Reference surface on equipment component ObjEc1.</param>
            <param name="objSecondarySurf">Reference fixed surface on equipment component ObjEc2.</param>
            <param name="Type">Type of the constraint to be created.</param>
            <param name="dblOffset">Distance that needs to be maintained between constraining objects.</param>
            <exception cref="T:System.ArgumentNullException">Argument null exception in case of null arguments.</exception>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.InvalidSurfaceException">Passed in primary or secondary surface is suitable to create the constraint.</exception>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.InvalidHierarchyException">Parents of both Equipment Components are not same.</exception>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.Constraint.#ctor(Ingr.SP3D.Equipment.Middle.Equipment,Ingr.SP3D.Common.Middle.ISurface,Ingr.SP3D.Common.Middle.ISurface,Ingr.SP3D.Common.Middle.Line3d,System.Double)">
            <summary>
            Creates a constraint Object for MateToTangentPlane type for Equipment.
            </summary>
            <param name="equipment">Equipment object that needs to be constrained.</param>
            <param name="referenceSurfaceOnEquipment">Reference surface on the Equipment to be in constraint with the other surface.</param>
            <param name="externalConstrainingSurface">External reference Surface where Equipment needs to be constrained with, this reference surface can be on another Equipment or the surface of a structural member.</param>
            <param name="intersectingLine">User defined line required for construction of the Tangent plane. Tangent plane will be constructed at the intersection of intersectingLine and externalConstrainingSurface.</param>
            <param name="offset">Includes both positive and negative double values.</param>
            <exception cref="T:System.ArgumentNullException">Argument null exception in case of null arguments.</exception>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.InvalidSurfaceException">This exception raises when the given input argument ‘referenceSurfaceOnEquipment’ does not belong to the Equipment.</exception>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.InvalidSurfaceException">This exception raises when the given input arguments ‘referenceSurfaceOnEquipment’ and  ‘externalConstrainingSurface’ belong to the same parent.</exception>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.InvalidSurfaceException">Currently the Constraint supports only Plane/Cone/Projection surface types. If any other surface types are given as input then this exception gets raised.</exception>        
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.InvalidArgumentException">This exception raises when there is no intersection between the given inputs ‘intersectingLine’ and ‘externalConstrainingSurface’.</exception>
            <example>
            <code>
            /// TransactionManager oTranactionMgr = MiddleServiceProvider.TransactionMgr;
            //Create the Equipment                   
            Equipment equipment1 = new Equipment("PUMP 001A-E", null);                    
            Equipment equipment2 = new Equipment("PUMP 001A-E", null);
            ILocalCoordinateSystem oEqpCS = (ILocalCoordinateSystem)equipment2;
            oEqpCS.Origin = new Position(2.0,-2.0,1.0);
            oTranactionMgr.Commit("Place Equipment3");
            //Get the surfaces of Equipment using SymbolOccurence
            SymbolOccurrence symbolOccurence = new SymbolOccurrence(equipment1);
            BusinessObject surface1 = symbolOccurence.GetOutput("Physical", "DefaultSurface");
            SymbolOccurrence symbolOccurence1 = new SymbolOccurrence(equipment2);
            BusinessObject surface2 = symbolOccurence1.GetOutput("Physical", "DefaultSurface");
            //Create the line object
            SP3DConnection conn = surface2.DBConnection;
            Line3d intersectingLine = new Line3d(conn, new Position(2, -2, 1), new Position(2, -2, 2));
            double offset = 0.0;
            // Create the constraint
            Constraint mateToTangentPlane = new Constraint(equipment1, (ISurface)surface1, (ISurface)surface2, intersectingLine, offset);
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.Constraint.#ctor(Ingr.SP3D.Equipment.Middle.GenericShape,Ingr.SP3D.Equipment.Middle.GenericShape,Ingr.SP3D.Common.Middle.BusinessObject,Ingr.SP3D.Common.Middle.BusinessObject,Ingr.SP3D.Equipment.Middle.ConstraintType,System.Double)">
             <summary>
             Creates a new constraint between two shapes of an equipment.
             </summary>
             <param name="ObjShp1">Generic shape object that needs to be constrained.</param>
             <param name="ObjShp2">Reference shape object that acts as a fixed object.</param>
             <param name="objPrimarySurf">Reference surface on the shape ObjShp1.</param>
             <param name="objSecondarySurf">Reference surface on the shape ObjShp2.</param>
             <param name="eType">Type of the constraint to be created. Only Mate and Align are possible types.</param>
             <param name="dblOffset">Distance that needs to be maintained between constraining objects.</param>
             <exception cref="T:System.ArgumentNullException">Argument null exception in case of null arguments.</exception>
             <exception cref="T:System.ArgumentException">Invalid offset value or the ConstraintType is invalid..</exception>
             <exception cref="T:Ingr.SP3D.Equipment.Exceptions.InvalidHierarchyException">Parents of both shapes are not same.</exception>
             <example>This example shows how to create a constraint between two shapes of an equipment.
             <code>
            'Get the generic shape object that needs to be constrained.
            Dim oShape1 As GenericShape = Nothing
            'Get the reference shape object.
            Dim oShape2 As GenericShape = Nothing 'parents of the two input shapes should be same 
            'Get the reference surface of the generic shape object.
            Dim oPrimarySurface As BusinessObject = Nothing 
            'Get the reference surface of the reference shape object.
            Dim oSecondarySurface As BusinessObject = Nothing
            'Get the ConstraintType. 
            Dim eConstraintType As ConstraintType = ConstraintType.Align ' Only Mate or Align constraints types are possible with the shapes.
            'Set the offset.
            Dim dOffset As Double ' Set the offset value; offset value should not be less than 0.0.
            'Create the constraint.
            Dim oConstraint As New Constraint(oShape1, oShape2, oPrimarySurface, oSecondarySurface, eConstraintType, dOffset)
             </code>
             </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.Constraint.#ctor(Ingr.SP3D.Common.Middle.IPort,Ingr.SP3D.Common.Middle.IPort)">
            <summary>
            Creates a connect constraint between two ports of different equipments or components. Please check the
            validity of combinations that can be used with this constructor. The following shows various valid 
            combinations possible. Rest of the combinations other than those below are considered to be invalid and an
            InvalidHierarchyException is thrown.
            <para>Port1 --&gt; Equipment1 --- Port2 --&gt; Equipment2 = Valid</para> 
            <para>Port1 --&gt; Equipment1 --- Port2 --&gt; Equipment Component of another Equipment = Valid</para>
            <para>Port1 --&gt; Equipment Component1 --- Port2 --&gt; Equipment Component2 of same Equipment hierarchy = Valid</para>
            </summary>
            <param name="ObjPort1">Port object that needs to be constrained.</param>
            <param name="ObjPort2">Reference port object.</param>
            <exception cref="T:System.ArgumentNullException">Argument null exception in case of null arguments.</exception>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.InvalidHierarchyException">Parents of both ports are the same.</exception>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.InvalidHierarchyException">Raised when the equipment or component constraint does not satisfy the rules of constraint.</exception>
            <example>This example shows how to create a constraint given port objects.
            <code>
            'Get the port object.
            Dim oPort1 As IPort = nothing 'Port object can be obtained using GetConnectablePort method on Equipment.
            'Get the port object.
            Dim oPort2 As IPort = nothing 'Port object can be obtained using GetConnectablePort method on Equipment.
            'Get the System object under which the nozzle will be created. 
            Dim oSystem as ISystem = Nothing 'Can be an equipment object.
            'Create the constraint.
            Dim oConstraint As New Constraint(oPort1, oPort2)        
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.Constraint.Status">
            <summary>
            Gets the constraint status associated with the objects.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.Constraint.ConstraintType">
            <summary>
            Gets the constraint type associated with the objects.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.Constraint.ConstrainedObjects">
            <summary>
            Gets the list of constrained objects.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.Constraint.Offset">
            <summary>
            Gets or sets the offset value of the constraint object.
            <para>All types of constraints other than connect support offset values.</para>
            </summary>
            <exception cref="T:System.MemberAccessException">Offset value is not supported for connect type of constraint.</exception>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Exceptions.GetRangeException">
            <summary>
            Exception raised if an error is encountered when getting the range. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Exceptions.GetRangeException.#ctor(System.String)">
            <summary>
            Instantiates if an error is encountered when getting the range.
            </summary>
            <param name="strMessage">Error message.</param>        
        </member>
        <member name="M:Ingr.SP3D.Equipment.Exceptions.GetRangeException.#ctor(System.String,System.Exception)">
            <summary>
            Instantiates if an error is encountered when getting the range. 
            </summary>
            <param name="strMessage">Error message.</param>
             <param name="inner">The COM Exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Exceptions.InvalidParentException">
            <summary>
            Raised when calling routines do not have a valid parent system object as an argument.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Exceptions.InvalidParentException.#ctor(System.String)">
            <summary>
             Instantiates when calling routines do not have a valid parent system object as an argument.
            </summary>
            <param name="strMessage"> The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Exceptions.InvalidParentException.#ctor">
            <summary>
             Constructor for an invalid parent system object used as an argument. The message is contained in the resource file.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Exceptions.SymbolMissingOrNotRegisteredException">
            <summary>
            Raised when the part associated with the equipment does not have a symbol defined or registered.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Exceptions.SymbolMissingOrNotRegisteredException.#ctor(System.String)">
            <summary>
            Instantiates when the part associated with the equipment does not have a symbol defined or registered.
            </summary>
            <param name="strMessage">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Exceptions.InvalidPartClassException">
            <summary>
            Raised when the given part class argument does not satisfy the current argument.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Exceptions.InvalidPartClassException.#ctor(System.String)">
            <summary>
            Instantiates when the given part class argument does not satisfy the current argument.
            </summary>
            <param name="strMessage">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Exceptions.InvalidPartNumberException">
            <summary>
            Raised when the given part number does not exist in the catalog database.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Exceptions.InvalidPartNumberException.#ctor(System.String)">
             <summary>
            Instantiates when the given part number does not exist in the catalog database.
             </summary>
             <param name="strMessage">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Exceptions.LocalCoordinateSystemMissingException">
            <summary>
            Raised when the equipment or equipment component does not have the local coordinate system in the relation.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Exceptions.LocalCoordinateSystemMissingException.#ctor(System.String)">
            <summary>
            Instantiates when equipment or equipment component does not have the local coordinate system in the relation.
            </summary>
            <param name="strMessage">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Exceptions.InvalidRepresentationException">
            <summary>
            Raised when an improper representation value is set on the generic or prismatic shape.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Exceptions.InvalidRepresentationException.#ctor(System.String)">
            <summary>
            Instantiates when an improper representation value is set on the generic or prismatic shape.
            </summary>
            <param name="strMessage">The error message that explains the reason for the exception. </param>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Exceptions.InvalidCrossSectionException">
            <summary>
            Raised when a prismatic shape cannot interpret the given cross section.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Exceptions.InvalidCrossSectionException.#ctor(System.String)">
            <summary>
            Instantiates when a prismatic shape cannot interpret the given cross section.
            </summary>
            <param name="strMessage">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Exceptions.InvalidPathException">
            <summary>
            Raised when a prismatic shape has either an invalid or degenerate path.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Exceptions.InvalidPathException.#ctor(System.String)">
            <summary>
            Instantiates when the prismatic shape has either an invalid or degenerate path.
            </summary>
            <param name="strMessage">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Exceptions.InvalidPortIndexException">
            <summary>
            Raised when the ports of the same equipment or component is used for connect constraint between the ports.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Exceptions.InvalidPortIndexException.#ctor(System.String)">
            <summary>
            Instantiates when the ports of the same equipment or component is used for connect constraint between the ports.
            </summary>
            <param name="strMessage">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Exceptions.InvalidSurfaceException">
            <summary>
            Raised when the surface given for the equipment or component constraint does not satisfy the rules of constraint.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Exceptions.InvalidSurfaceException.#ctor(System.String)">
            <summary>
            Instantiates when the surface given for the equipment or component constraint does not satisfy the rules of constraint.
            </summary>
            <param name="strMessage">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Exceptions.InvalidHierarchyException">
            <summary>
            Raised when the equipment or component constraint does not satisfy the rules of constraint.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Exceptions.InvalidHierarchyException.#ctor(System.String)">
            <summary>
            Instantiates when the equipment or component constraint does not satisfy the rules of constraint.
            </summary>
            <param name="strMessage">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Exceptions.InvalidArgumentException">
            <summary>
            Raised when the equipment or component constraint does not satisfy the rules of constraint.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Exceptions.InvalidArgumentException.#ctor(System.String)">
             <summary>
            Instantiates when the equipment or component constraint does not satisfy the rules of constraint. 
             </summary>
             <param name="strMessage">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Exceptions.InvalidReferenceGeometryException">
            <summary>
            Raised when the given reference geometry is neither equipment, component, or shape.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Exceptions.InvalidReferenceGeometryException.#ctor(System.String)">
            <summary>
            Instantiates when the given reference geometry is neither an equipment nor component or shape.
            </summary>
            <param name="strMessage">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Exceptions.OutOfModelRangeException">
            <summary>
            Raised when the given coordinates or positions cross the limits of the defined model range.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Exceptions.OutOfModelRangeException.#ctor(System.String)">
            <summary>
            Instantiates when the given coordinates or positions cross the limits of the defined model range.
            </summary>
            <param name="strMessage">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Exceptions.FailedToExecuteTheSymbol">
            <summary>
            Raised when there is failure to execute the symbol.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Exceptions.FailedToExecuteTheSymbol.#ctor(System.String)">
            <summary>
            Instantiates when there is failure to execute the symbol.
            </summary>
            <param name="strMessage">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Exceptions.NullArgumentException">
            <summary>
            Exception raised when an input argument to a method is null and is expected to be a valid object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Exceptions.NullArgumentException.#ctor(System.String)">
            <summary>
            Constructor for a null object argument exception.
            </summary>
            <param name="argument">Argument string that indicates the null argument.</param>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Exceptions.InvalidAspectException">
            <summary>
            Exception raised when the defined aspect is not a valid aspect, It must be one of
            1, 2, 4, 8, 16, 32, 64, 128, etc.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Exceptions.InvalidAspectException.#ctor(System.String)">
            <summary>
            Constructor for an invalid aspect defined.
            </summary>
            <param name="aspect">Invalid aspect.</param>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Exceptions.ChildAlreadyExistsException">
            <summary>
            Exception raised when the list of ordered shapes contains the same shape twice.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Exceptions.ChildAlreadyExistsException.#ctor">
            <summary>
            Constructor for an exception when a child shape is added more than once to the list of ordered shapes.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Exceptions.DesignSolidCreationFailedException">
            <summary>
            Exception raised when the COM factory method fails to create the DesignSolid.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Exceptions.DesignSolidCreationFailedException.#ctor(System.Exception)">
            <summary>
            Constructor for the DesignSolid that failed to be created.
            </summary>
            <param name="innerException">Inner COM exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Exceptions.InvalidDesignSolidReferenceException">
            <summary>
            Exception raised when an internal reference to the DesignSolid is no longer valid.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Exceptions.InvalidDesignSolidReferenceException.#ctor">
            <summary>
            Constructor for an invalid DesignSolid reference.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Exceptions.CannotChangeSystemParentException">
            <summary>
            Exception raised when attempting to change the parent of a GenericShape/DesignSolid when it
            is an output of a CustomAssembly.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Exceptions.CannotChangeSystemParentException.#ctor">
            <summary>
            Public constructor for attempting to change the parent of a GenericShape/DesignSolid when not allowed.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Exceptions.InvalidRangeException">
            <summary>
            Exception when an attempt to retrieve the range of an object fails.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Exceptions.InvalidRangeException.#ctor(System.Exception)">
            <summary>
            Public constructor for an invalid range exception.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Exceptions.FailedTransformException">
            <summary>
            Exception raised when the transform of an object unexpectedly fails.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Exceptions.FailedTransformException.#ctor(System.Exception)">
            <summary>
            Public constructor used to raise an exception when the transform fails.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Exceptions.ZeroLengthVectorException">
            <summary>
            Exception raised when the input vector argument is zero length.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Exceptions.ZeroLengthVectorException.#ctor(System.String)">
            <summary>
            Public constructor for an exception when an input vector argument is zero length.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Exceptions.VectorArgumentsNotPerpendicularException">
            <summary>
            Exception raised where the two input vectors are not perpendicular to one another.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Exceptions.VectorArgumentsNotPerpendicularException.#ctor">
            <summary>
            Public constructor for two given non-perpendicular vectors.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Exceptions.AddSystemChildException">
            <summary>
            Exception raised when an unexpected failure occurs while adding a system child.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Exceptions.AddSystemChildException.#ctor(System.Exception)">
            <summary>
            Public constructor when adding the system child failed.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Exceptions.DesignChildOperationException">
            <summary>
            Exception raised when an unexpected failure occurs while changing the operation for a child shape.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Exceptions.DesignChildOperationException.#ctor(System.Exception)">
            <summary>
            Public constructor for a failure to update a DesignSolid's child shape operation type.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Exceptions.RetrieveDesignChildrenException">
            <summary>
            Exception raised when an unexpected failure occurred while retrieving the child shapes of a DesignSolid.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Exceptions.RetrieveDesignChildrenException.#ctor(System.Exception)">
            <summary>
            Public constructor for a failure to retrieve child shapes.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Exceptions.UpdateDesignChildrenException">
            <summary>
            Exception raised when an unexpected failure occurs while updating the order of child shapes on the DesignSolid.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Exceptions.UpdateDesignChildrenException.#ctor(System.Exception)">
            <summary>
            Public constructor for a failure to update the order of the shapes on the DesignSolid.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Exceptions.ConstraintAccessException">
            <summary>
            Exception raised when an unexpected failure occurs while retrieving the constraints.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Exceptions.ConstraintAccessException.#ctor(System.Exception)">
            <summary>
            Public constructor for a failure to access the constraints.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Exceptions.AspectAccessException">
            <summary>
            Exception raised when an unexpected failure occurs while retrieving the aspects.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Exceptions.AspectAccessException.#ctor(System.Exception)">
            <summary>
            Public constructor for a failure to access the aspects.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Exceptions.MaterialAccessException">
            <summary>
            Exception raised when an unexpected failure occurs while retrieving the material.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Exceptions.MaterialAccessException.#ctor(System.Exception)">
            <summary>
            Public constructor for a failure to access the material.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Exceptions.ImportedShapeCreationFailureException">
            <summary>
            Exception raised when importing the shape symbol fails to create the imported shape. For example, failure can
            occur if the imported file is not a supported type (i.e., not a supported .sat or .dgn type file).
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Exceptions.ImportedShapeCreationFailureException.#ctor">
            <summary>
            Public constructor for failure to create the imported shape.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Exceptions.ImportedShapeCreationFailureException.#ctor(System.Int32)">
            <summary>
            Public constructor for failure to create the imported shape.
            </summary>
            <param name="errorCode">error number</param>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Exceptions.ImportedShapeCreationFailureException.#ctor(System.String)">
            <summary>
            Public constructor for failure to create the imported shape.
            </summary>
            <param name="fileName">Import shape file name</param>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Exceptions.UnexpectedImportedShapeCreationFailureException">
            <summary>
            Exception raised when an unexpected COM failure occurred while creating the imported shape.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Exceptions.UnexpectedImportedShapeCreationFailureException.#ctor">
            <summary>
            Public constructor for a COM failure while creating an imported shape.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Exceptions.InvalidFileTypeException">
            <summary>
            Exception raised when the provided import file is not a .sat or .dgn file type.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Exceptions.InvalidFileTypeException.#ctor(System.String)">
            <summary>
            Public constructor for an invalid shape file type.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Exceptions.UnexpectedGTypeShapeCreationFailureException">
            <summary>
            Exception raised when the provided import file is not a .sat or .dgn file type.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Exceptions.UnexpectedGTypeShapeCreationFailureException.#ctor">
            <summary>
            Public constructor for an invalid shape file type.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Exceptions.NameRuleFailedException">
            <summary>
            Exception raised when the default name rule fails unexpectedly.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Exceptions.NameRuleFailedException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Public constructor for failure in getting the default name rule.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Exceptions.SketchCrossSectionAlreadyRelatedException">
            <summary>
            Exception raised when the Sketch2d cross section is already related with another prismatic shape.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Exceptions.SketchCrossSectionAlreadyRelatedException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Public constructor when the Sketch2d cross section is already related with another prismatic shape.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Exceptions.NullElementInCollectionException">
            <summary>
            Exception raised if the collection has a null element.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Exceptions.NullElementInCollectionException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>        
        </member>
        <member name="T:Ingr.SP3D.Equipment.Middle.FoundationPort">
            <summary>
            FoundationPort class represents a standard FoundationPort object. 
            Refer to the catalog data documentation for further details on the properties.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.FoundationPort.#ctor">
            <summary>
            Internal use only --> Hidden default constructor
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.FoundationPort.#ctor(System.String,System.Int64,Ingr.SP3D.Equipment.Middle.Equipment)">
            <summary>
            Constructs a foundation port based on the equipment part provided and the index of the nozzle in a given connection.
            </summary>
            <param name="strPartNumber">Part number of the nozzle to be created.</param>
            <param name="lNozzleIndex">Port index of the nozzle to be created.</param>
            <param name="oParent">Parent system under which the nozzle must be created.</param>
            <exception cref="T:System.ArgumentNullException">Part argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure in creating foundation port.</exception>
            <example>This example explains how to create foundation port given part number, nozzle index, and the parent.
            <code>
            'Create FoundationPort.
            Dim sPartNumber as String = Nothing 'Initialize with the required part number; e.g., "PUMP 001A-E".
            Dim oParent as Equipment = Nothing 'Initialize it with the required equipment.
            Dim lNozzleIndex as long 'Initialize with a nozzle index.
            Dim oFoundationPort As FoundationPort = Nothing
            oFoundationPort = New FoundationPort(sPartNumber, lNozzleIndex, oParent)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.FoundationPort.#ctor(System.String,System.Int64,Ingr.SP3D.Equipment.Middle.EquipmentComponent)">
            <summary>
            Constructs a foundation port based on the equipment part provided and the index of the nozzle in a given connection.
            </summary>
            <param name="strPartNumber">Part number of the nozzle to be created.</param>
            <param name="lNozzleIndex">Port index of the nozzle to be created.</param>
            <param name="oParent">Parent system under which the nozzle must be created.</param>
            <exception cref="T:System.ArgumentNullException">Part argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure in creating foundation port.</exception>
            <example>This example explains how to create foundation port given a part number, nozzle index, and the equipment component.
            <code>
            'Create FoundationPort.
            Dim sPartNumber as String = Nothing 'Initialize with the part number; e.g., "PUMP 001A-E".
            Dim oParent as EquipmentComponent = Nothing 'Initialize it with the required equipment component.
            Dim lNozzleIndex as long 'Initialize with a nozzle index.
            Dim oFoundationPort As FoundationPort = Nothing
            oFoundationPort = New FoundationPort(sPartNumber, lNozzleIndex, oParent)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.FoundationPort.#ctor(Ingr.SP3D.ReferenceData.Middle.Part,System.Int64,Ingr.SP3D.Equipment.Middle.Equipment)">
            <summary>
            Constructs a foundation port based on the equipment part provided and the index of the nozzle in a given connection.
            </summary>
            <param name="oPart">Part of the nozzle to be created.</param>
            <param name="lNozzleIndex">Port index of the nozzle to be created.</param>
            <param name="oParent">Parent system under which the nozzle must be created.</param>
            <exception cref="T:System.ArgumentNullException">Part argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure in creating foundation port.</exception>
            <example>This example explains how to create the foundation port given a part, nozzle index, and the parent.
            <code>
            'Create FoundationPort.
            Dim oPart as Part = Nothing 'Initialize with the part. Part property on an existing equipment will return the part.
            Dim oParent as Equipment = Nothing 'Initialize it with the required equipment.
            Dim lNozzleIndex as long 'Initialize with a nozzle index.
            Dim oFoundationPort As FoundationPort = Nothing
            oFoundationPort = New FoundationPort(oPart, lNozzleIndex, oParent)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.FoundationPort.#ctor(Ingr.SP3D.ReferenceData.Middle.Part,System.Int64,Ingr.SP3D.Equipment.Middle.EquipmentComponent)">
            <summary>
            Constructs a foundation port based on the equipment part provided and the index of the nozzle in a given connection.
            </summary>
            <param name="oPart">Part number of the nozzle to be created.</param>
            <param name="lNozzleIndex">Port index of the nozzle to be created.</param>
            <param name="oParent">Parent system under which the nozzle must be created.</param>
            <exception cref="T:System.ArgumentNullException">Part argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure in creating foundation port.</exception>
            <example>This example explains how to create foundation port given a part, nozzle index, and the equipment component.
            <code>
            'Create FoundationPort.
            Dim oPart as Part = Nothing 'Initialize with the part. Part property on an existing equipment will return the part.
            Dim oParent as EquipmentComponent = Nothing 'Initialize it with the required equipment component.
            Dim lNozzleIndex as long 'Initialize with a nozzle index.
            Dim oFoundationPort As FoundationPort = Nothing
            oFoundationPort = New FoundationPort(oPart, lNozzleIndex, oParent)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.FoundationPort.#ctor(System.String,System.Int64,Ingr.SP3D.Equipment.Middle.Equipment,System.Boolean)">
            <summary>
            Constructs a foundation port based on the equipment part provided and the index of the nozzle in a given connection.
            </summary>
            <param name="strPartNumber">Part number of the nozzle to be created.</param>
            <param name="lNozzleIndex">Port index of the nozzle to be created.</param>
            <param name="oParent">Parent system under which the nozzle must be created.</param>
            <param name="bBehaviourControlledByUser">Behavior controlled by user flag. True if the user can modify the orientation properties from property page and vice versa.</param>
            <exception cref="T:System.ArgumentNullException">Part argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure in creating foundation port.</exception>
            <example>This example explains how to create foundation port given part number, nozzle index, and the parent.
            <code>
            'Create FoundationPort.
            Dim sPartNumber as String = Nothing 'Initialize with the required part number; e.g., "PUMP 001A-E".
            Dim oParent as Equipment = Nothing 'Initialize with the required equipment.
            Dim lNozzleIndex as long 'Initialize with a nozzle index.
            Dim oFoundationPort As FoundationPort = Nothing
            'Set the behavior controlled by user flag.
            Dim bBehaviourControlledByUser As Boolean = False
            oFoundationPort = New FoundationPort(sPartNumber, lNozzleIndex, oParent, bBehaviourControlledByUser)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.FoundationPort.#ctor(System.String,System.Int64,Ingr.SP3D.Equipment.Middle.EquipmentComponent,System.Boolean)">
            <summary>
            Constructs a foundation port based on the equipment part provided and the index of the nozzle in a given connection.
            </summary>
            <param name="strPartNumber">Part number of the nozzle to be created.</param>
            <param name="lNozzleIndex">Port index of the nozzle to be created.</param>
            <param name="oParent">Parent system under which the nozzle must be created.</param>
            <param name="bBehaviourControlledByUser">Behavior controlled by user flag. True if the user can modify the orientation properties from property page and vice versa.</param>
            <exception cref="T:System.ArgumentNullException">Part argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure in creating foundation port.</exception>
            <example>This example explains how to create foundation port given a part number, nozzle index, and the equipment component.
            <code>
            'Create FoundationPort.
            Dim sPartNumber as String = Nothing 'Initialize with the part number; e.g., "PUMP 001A-E".
            Dim oParent as EquipmentComponent = Nothing 'Initialize it with the required equipment component.
            Dim lNozzleIndex as long 'Initialize with a nozzle index.
            Dim oFoundationPort As FoundationPort = Nothing
            'Set the behavior controlled by user flag.
            Dim bBehaviourControlledByUser As Boolean = False
            oFoundationPort = New FoundationPort(sPartNumber, lNozzleIndex, oParent, bBehaviourControlledByUser)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.FoundationPort.#ctor(Ingr.SP3D.ReferenceData.Middle.Part,System.Int64,Ingr.SP3D.Equipment.Middle.Equipment,System.Boolean)">
            <summary>
            Constructs a foundation port based on the equipment part provided and the index of the nozzle in a given connection.
            </summary>
            <param name="oPart">Part of the nozzle to be created.</param>
            <param name="lNozzleIndex">Port index of the nozzle to be created.</param>
            <param name="oParent">Parent system under which the nozzle must be created.</param>
            <param name="bBehaviourControlledByUser">Behavior controlled by user flag. True if the user can modify the orientation properties from property page and vice versa.</param>
            <exception cref="T:System.ArgumentNullException">Part argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure in creating foundation port.</exception>
            <example>This example explains how to create the foundation port given a part, nozzle index, and the parent.
            <code>
            'Create FoundationPort.
            Dim oPart as Part = Nothing 'Initialize with the part. Part property on an existing equipment will return the part.
            Dim oParent as Equipment = Nothing 'Initialize with the required equipment.
            Dim lNozzleIndex as long 'Initialize with a nozzle index.
            Dim oFoundationPort As FoundationPort = Nothing
            'Set the behavior controlled by user flag.
            Dim bBehaviourControlledByUser As Boolean = False
            oFoundationPort = New FoundationPort(oPart, lNozzleIndex, oParent, bBehaviourControlledByUser)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.FoundationPort.#ctor(Ingr.SP3D.ReferenceData.Middle.Part,System.Int64,Ingr.SP3D.Equipment.Middle.EquipmentComponent,System.Boolean)">
            <summary>
            Constructs a foundation port based on the equipment part provided and the index of the nozzle in a given connection.
            </summary>
            <param name="oPart">Part number of the nozzle to be created.</param>
            <param name="lNozzleIndex">Port index of the nozzle to be created.</param>
            <param name="oParent">Parent system under which the nozzle has to be created.</param>
            <param name="bBehaviourControlledByUser">Behavior controlled by user flag. True if the user can modify the orientation properties from property page and vice versa.</param>
            <exception cref="T:System.ArgumentNullException">Part argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure in creating foundation port.</exception>
            <example>This example explains how to create foundation port given a part, nozzle index and the equipment component.
            <code>
            'Create FoundationPort.
            Dim oPart as Part = Nothing 'Initialize with the part. Part property on an existing equipment will return the part.
            Dim oParent as EquipmentComponent = Nothing 'Initialize with the required equipment component.
            Dim lNozzleIndex as long 'Initialize with a nozzle index.
            Dim oFoundationPort As FoundationPort = Nothing
            'Set the behavior controlled by user flag.
            Dim bBehaviourControlledByUser As Boolean = False
            oFoundationPort = New FoundationPort(oPart, lNozzleIndex, oParent, bBehaviourControlledByUser)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.FoundationPort.#ctor(Ingr.SP3D.Equipment.Middle.FoundationPort)">
            <summary>
            Copy constructor for foundation port.
            </summary>
            <param name="oNozzleToCopy">Nozzle object to be copied.</param>
            <exception cref="T:System.ArgumentNullException">Nozzle passed is null.</exception>
            <example>This example explains how to use the copy constructor.
            <code>
            'Create foundation port.
            Dim oNozzle As FoundationPort = Nothing        
            'Call copy constructor.
            Dim oNozzle1 As FoundationPort = Nothing
            oNozzle1 = New FoundationPort(oNozzle)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.FoundationPort.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor for .NET to access this class.
            </summary>
            <param name="oPb">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.FoundationPort.SetUserDefinedName(System.String)">
            <summary>
            Sets the user-defined name of the FoundationPort object.
            </summary>
            <param name="Name">The new name.</param>
            <example>This is an example of the SetUserDefinedName method.
            <code>
            'Create FoundationPort object with its constructor.
            oFoundationPort.SetUserDefinedName("Top FoundationPort")
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.FoundationPort.SetOrientation(Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Sets the orientation of the foundation port.
            </summary>
            <param name="xAxisNew">X-axis of the foundation port to be set.</param>
            <param name="yAxisNew">Y-axis of the foundation port to be set.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <exception cref="T:System.ArgumentException">Input argument length is less than the DistanceTolerance value, or input vectors are not perpendicular to each other.</exception>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure trying to modify the object.</exception>
            <example>This example explains how to set orientation of a foundation port.
            <code>
            Dim oXVector As Vector = New Vector(0, 0, 0) 'Initialize with proper values.
            Dim oYVector As Vector = New Vector(0, 0, 0) 'Initialize with proper values.
            Dim oFoundationPort As FoundationPort = Nothing 'Get the FoundationPort object.
            oFoundationPort.SetOrientation(oXVector, oYVector)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.FoundationPort.GetHoles">
            <summary>
            Returns the read-only collection of the position of the holes on the foundation port.
            </summary>
            <returns>ReadOnlyCollection of Position objects.</returns>
            <example>This example explains how to get the holes on a foundation port.
            <code>
            'Create foundation port.
            Dim oNozzle As FoundationPort = Nothing        
            'Call GetHoles method to get the holes information.
            Dim oHolesColl As ReadOnlyCollection(Of Position) = Nothing
            oHolesColl = oNozzle.GetHoles()       
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.FoundationPort.SetHoles(System.Collections.Generic.IEnumerable{Ingr.SP3D.Common.Middle.Position})">
            <summary>
             Sets the position of the holes on the foundation port.
            </summary>
            <param name="HoleLocations">Collection of holes Position objects.</param>
            <exception cref="T:System.ArgumentNullException">Raised when HoleLocations is null.</exception>    
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.NullElementInCollectionException">Raised if the HoleLocations collection has a null element.</exception> 
            <example>This example explains how to set the holes on a foundation port.
            <code>        
            //Create FoundationPort.
             string PartNumber="PUMP 001A-E";//Initialize with the required part number; e.g., "PUMP 001A-E".
             Equipment  parentEqp =null; //Initialize it with the required equipment.
             long NozzleIndex=1; //Initialize with a nozzle index.
             FoundationPort foundationPort = new FoundationPort(PartNumber, NozzleIndex, parentEqp);
             Collection(of Position) HoleLocations = new Collection(of Position)();
             HoleLocations.Add(new Position(-5, -3, 0));
             HoleLocations.Add(new Position(5, -3, 0));
             HoleLocations.Add(new Position(5, 3, 0));
             HoleLocations.Add(new Position(-5, 3, 0));
            //Now set the holelocations.
             foundationPort.SetHoles(HoleLocations);      
            </code>
            </example> 
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.FoundationPort.Range">
            <summary>
            Gets the range box representing the range of the FoundationPort.
            </summary>
            <returns>The objects range box.</returns>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.GetRangeException">Unexpected failure while getting the range.</exception>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.FoundationPort.Name">
            <summary>
            Gets the name of the object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.FoundationPort.XAxis">
            <summary>
            Gets the X-axis on the local coordinate system. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.FoundationPort.YAxis">
            <summary>
            Gets the Y-axis on the local coordinate system.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.FoundationPort.ZAxis">
            <summary>
            Gets the Z-axis on the local coordinate system.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.FoundationPort.Origin">
            <summary>
            Gets or sets the origin on the local coordinate system.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.FoundationPort.Matrix">
            <summary>
            Gets or sets the equipment foundation port coordinate system.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.FoundationPort.PortID">
            <summary>
            Gets the foundation port ID.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.FoundationPort.FoundationPortType">
            <summary>
            Gets the foundation port type.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.FoundationPort.DefaultFoundation">
            <summary>
            Gets the default foundation.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.FoundationPort.LinerThickness">
            <summary>
            Gets the liner thickness.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.FoundationPort.BoltCircleDiameter">
            <summary>
            Gets the bolt circle diameter.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.FoundationPort.NumberOfHolesAlongX">
            <summary>
            Gets the number of holes in X-direction.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.FoundationPort.NumberOfHolesAlongY">
            <summary>
            Gets the number of holes in Y-direction.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.FoundationPort.DistanceBetweenHolesAlongX">
            <summary>
            Gets the distance between holes along X-direction.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.FoundationPort.DistanceBetweenHolesAlongY">
            <summary>
            Gets the distance between holes along Y-direction.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.FoundationPort.FootprintOffset">
            <summary>
            Gets the footprint offset.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Middle.EquipResIdfs">
            <summary>
            Summary description for CmnResourceIDs
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.EquipResIdfs.ErrNullArgument">
            <summary>
            Null argument passed to method.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.EquipResIdfs.ErrInvalidAspect">
            <summary>
            Defined an invalid aspect. Aspects must be a value of (1, 2, 4, 8, 16, 32,... 16384)
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.EquipResIdfs.ErrChildShapeAlreadyExists">
            <summary>
            In the list of ordered shapes, one shape is listed twice.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.EquipResIdfs.ErrDesignSolidCreationFailed">
            <summary>
            DesignSolid creation fialed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.EquipResIdfs.ErrBadReference">
            <summary>
            A weak reference is no longer valid.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.EquipResIdfs.ErrRetrievingMaterialFailure">
            <summary>
            Failed to retrieve the material.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.EquipResIdfs.ErrInvalidRange">
            <summary>
            Invalid range.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.EquipResIdfs.ErrTransformFailed">
            <summary>
            Object transform failed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.EquipResIdfs.ErrZeroLengthVectorArgument">
            <summary>
            Zero length vector.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.EquipResIdfs.ErrVectorsNotPerpendicular">
            <summary>
            Two vectors are not perpendicular to one another.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.EquipResIdfs.ErrAddSystemChildFailure">
            <summary>
            Failed to add a system child.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.EquipResIdfs.ErrSetOperationFailure">
            <summary>
            Seting the operation on a shape failed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.EquipResIdfs.ErrRetrieveShapesFailure">
            <summary>
            Retriving the list of ordered shapes failed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.EquipResIdfs.ErrUpdateOrderFailure">
            <summary>
            Failed to update the order of the shapes.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.EquipResIdfs.ErrRetrievingConstraintsFailure">
            <summary>
            Failed to retrieve the constraints.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.EquipResIdfs.ErrRetrievingAspectsFailure">
            <summary>
            Failed to retrieve the aspects.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.EquipResIdfs.ErrImportedShapeCreationFailure">
            <summary>
            Failed to create the imported shape.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.EquipResIdfs.ErrUnexpectedImportedShapeCreationFailure">
            <summary>
            Unexpected failure in the COM creation of the imported shape.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.EquipResIdfs.ErrInvalidFileTypeFailure">
            <summary>
            Imported shape file type is not a .dgn or .Sat file.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.EquipResIdfs.ErrDefaultNameRuleFailed">
            <summary>
            Error number for default name rule failure.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.EquipResIdfs.ErrGTpeShapeCreationFailure">
            <summary>
            Error number for GType shape creation failure.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.EquipResIdfs.ErrSketchCrossSecAlreadyRelated">
            <summary>
            Error number for Sketch cross section is already related with another prismatic shape.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.EquipResIdfs.ErrNullElementInCollection">
            <summary>
            Collection has null element.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.EquipResIdfs.NullCOMObjectError">
            <summary>
            Unable to get the COM object.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.EquipResIdfs.ErrInRange">
            <summary>
            Unexpected failure while getting the range.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.EquipResIdfs.ErrInShapeSymbolUpdate">
            <summary>
            Unexpected failure in update shape symbol
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.EquipResIdfs.ErrInElbowNozzleSymbolUpdate">
            <summary>
            Nozzle definition symbol DLL is out of date.  Nozzle cannot be instanced into the model.  Replace NozzleVBsymb.DLL with correct version and update.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.EquipResIdfs.ErrSatFileIsEmpty">
            <summary>
            Error while importind the empty sat file
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.EquipResIdfs.ErrInConversionOfSatFile">
            <summary>
            Error while converting the sat file
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.EquipResIdfs.ErrSatFileMemoryLeak">
            <summary>
            Memory leak error
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.EquipResIdfs.ErrSatFileConvertedPartially">
            <summary>
            Sat file converted partially
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.EquipResIdfs.ErrDgnFileNotFound">
            <summary>
            Dgn file not found
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.EquipResIdfs.ErrDgnFileNotShared">
            <summary>
            Dgn file is not shared
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.EquipResIdfs.ErrDgnFileHasBadFormat">
            <summary>
            Dgn file has bad format
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.EquipResIdfs.ErrDgnFileNoTranslator">
            <summary>
            Dgn file ca not be transformed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.EquipResIdfs.ErrDgnFileHasBadUnits">
            <summary>
            Dgn file has bad units
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.EquipResIdfs.ErrDgnFileAlreadyExist">
            <summary>
            Same dgn file already existing in the model.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.EquipResIdfs.ErrTwoDgnFile">
            <summary>
            Error due to selection of two dgn files once
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.EquipResIdfs.ErriInConvertionOfDgnFile">
            <summary>
            Error while converting the dgn file.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.EquipResIdfs.ErrDgnFileConvertedPartially">
            <summary>
            Error dgn file converted partially.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.EquipResIdfs.ErrSatFileUnavailable">
            <summary>
            Sat file is not available
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.EquipResIdfs.InvalidSurfaceType">
            <summary>
            Type of the given surfaces should be Plane/Cone/Projection. If any other surface types are given as input then this exception gets raised.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.EquipResIdfs.SurfaceNotBelongsToEquipment">
            <summary>
            If the given input argument ‘referenceSurfaceOnEquipment/ objPrimarySurf’ does not belong to the given Equipment.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.EquipResIdfs.ConstrainingSurfacesHaveSameParent">
            <summary>
            If the given input arguments ‘referenceSurfaceOnEquipment/ objPrimarySurf’ and ‘externalConstrainingSurface/ objSecondarySurf’ belong to the same parent.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.EquipResIdfs.LineNotIntersectingThePlane">
            <summary>
            If the given argument line is not passing through the given surface i.e., when there is no intersection between the given inputs ‘intersectingLine’ and ‘externalConstrainingSurface’.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Middle.GenericShape">
            <summary>
            GenericShape class represents a Smart3D Shape object. 
            Refer to the catalog data documentation for further details on the properties.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.GenericShape.#ctor">
            <summary>
            Is not accessible to outside world, only for internal use.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.GenericShape.Update(System.Object)">
            <summary>
            Method to update the shape object
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.GenericShape.#ctor(Ingr.SP3D.ReferenceData.Middle.Part,Ingr.SP3D.Common.Middle.ISystem)">
            <summary>
            Creates the shape given the part under the parent.
            </summary>
            <param name="oPart">Catalog part object from which the shape is created.</param> 
            <param name="oParent">Parent system under which the shape is created.</param> 
            <exception cref="T:System.ArgumentNullException">Catalog part or parent system is null.</exception>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.InvalidParentException">System parent argument must be an Equipment, EquipmentComponent, or DesignSolid.</exception>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure trying to create a shape.</exception>
            <example>This example explains how to create shape given a part and the parent system.
            <code>
            'Create shape.
            Dim oPart as Part = Nothing 'Initialize with the part. Part property on an existing shape will return the part.
            Dim oParentSystem as ISystem = Nothing 'Update it with the parent system.
            Dim oShape As GenericShape = Nothing
            oShape = New GenericShape(oPart, oParentSystem)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.GenericShape.#ctor(System.String,Ingr.SP3D.Common.Middle.ISystem)">
            <summary>
            Creates the Shape object for a given part number and system.
            </summary>
            <param name="strPartNumber">Catalog part number from which the shape is created.</param> 
            <param name="oParent">Parent system under which the shape is created.</param> 
            <exception cref="T:System.ArgumentNullException">Catalog part or parent system is null.</exception>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.InvalidParentException">System parent argument must be an Equipment, EquipmentComponent, or DesignSolid.</exception>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure trying to create a shape.</exception>
            <example>This example explains how to create shape given part number and the parent system.
            <code>
            'Create shape.
            Dim sPartNumber as String = Nothing 'Initialize with the part number; e.g., "RtCircularCylinder 001".
            Dim oParentSystem as ISystem = Nothing 'Update with the parent system.
            Dim oShape As GenericShape = Nothing
            oShape = New GenericShape(sPartNumber, oParentSystem)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.GenericShape.#ctor(Ingr.SP3D.ReferenceData.Middle.Part,Ingr.SP3D.Common.Middle.ISystem,System.Boolean)">
            <summary>
            Creates the shape given the part under the parent.
            </summary>
            <param name="oPart">Catalog part object from which shape is created.</param> 
            <param name="oParent">Parent system under which the shape is created.</param> 
             <param name="bBehaviourControlledByUser">Behavior controlled by user flag. True if the user can modify the orientation properties from the property page and vice versa.</param>
            <exception cref="T:System.ArgumentNullException">Catalog part or parent system is null.</exception>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.InvalidParentException">System parent argument must be an Equipment, EquipmentComponent, or DesignSolid.</exception>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure trying to create a shape.</exception>
            <example>This example explains about how to create shape given a part and the parent system.
            <code>
            'Create shape.
            Dim oPart as Part = Nothing 'Initialize with the part. Part property on an existing shape will return the part.
            Dim oParentSystem as ISystem = Nothing 'Update it with the parent system.
            'Set the behavior controlled by user flag.
            Dim bBehaviourControlledByUser As Boolean = False
            Dim oShape As GenericShape = Nothing
            oShape = New GenericShape(oPart, oParentSystem, bBehaviourControlledByUser)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.GenericShape.#ctor(System.String,Ingr.SP3D.Common.Middle.ISystem,System.Boolean)">
            <summary>
            Creates the Shape object for a given part number and system.
            </summary>
            <param name="strPartNumber">Catalog part number from which the shape is created.</param> 
            <param name="oParent">Parent system under which the shape is created.</param> 
             <param name="bBehaviourControlledByUser">Behavior controlled by user flag. True if the user can modify the orientation properties from the property page and vice versa.</param>
            <exception cref="T:System.ArgumentNullException">Catalog part or parent system is null.</exception>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.InvalidParentException">System parent argument must be an Equipment, EquipmentComponent, or DesignSolid.</exception>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure trying to create a shape.</exception>
            <example>This example explains how to create shape given part number and the parent system.
            <code>
            'Create shape.
            Dim sPartNumber as String = Nothing 'Initialize with the part number; e.g., "RtCircularCylinder 001".
            Dim oParentSystem as ISystem = Nothing 'Update it with the parent system.
            'Set the behavior controlled by user flag.
            Dim bBehaviourControlledByUser As Boolean = False
            Dim oShape As GenericShape = Nothing
            oShape = New GenericShape(sPartNumber, oParentSystem, bBehaviourControlledByUser)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.GenericShape.#ctor(Ingr.SP3D.Equipment.Middle.GenericShape)">
            <summary>
            Copy constructor for the generic shape.
            </summary>
            <param name="oShapeToCopy">Generic shape object to be copied.</param>
            <exception cref="T:System.ArgumentNullException">Shape is null.</exception>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.InvalidParentException">System parent argument must be an Equipment, EquipmentComponent, or DesignSolid.</exception>
            <example>This example explains how to use the copy constructor.
            <code>
            'Create Shape.
            Dim oShape As GenericShape = Nothing
            Dim oShape1 As GenericShape = Nothing
            'Call copy constructor.
            oShape1 = New GenericShape(oShape)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.GenericShape.#ctor(Ingr.SP3D.Common.Middle.ISystem,System.String)">
            <summary>
            Constructor to create an imported shape given the filename of the shape to import.
            </summary>
            <param name="parent">Imported shape's parent object; i.e., Equipment, EquipmentComponent, or DesignSolid.</param>
            <param name="importFilename">Name of the shape import file.</param>
            <exception cref="T:System.ArgumentNullException">System parent argument is null or import filename is a null string.</exception>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.InvalidParentException">System parent argument must be an Equipment, EquipmentComponent, or DesignSolid.</exception>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.InvalidParentException">System parent argument is not a valid parent for the shape; i.e., should be an Equipment, EquipmentComponent, or DesignSolid.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.FileDoesNotExistException">Exception when the imported shape file does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.InvalidFileTypeException">Exception when the imported shape file is not a .DGN or .SAT file.</exception>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.ImportedShapeCreationFailureException">Failure while attempting to construct the imported shape from the contents of the import file. A cause for this failure can be that the contents of the imported file is incorrect or not a supported type (i.e., contents not SAT or DGN data).</exception>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.UnexpectedImportedShapeCreationFailureException">Exception when an unexpected COM failure occurs while creating the imported shape.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Provided system parent must be "In-Working" status for the shape to be added.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnAccessDeniedException">Provided system parent object's persmissions will not allow the shape to be added as a child.</exception>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.GenericShape.#ctor(System.Collections.Generic.IEnumerable{Ingr.SP3D.Common.Middle.Geometry3d},Ingr.SP3D.Common.Middle.ISystem)">
            <summary>
            Creates a shape from given geometries.
            </summary>        
            <param name="geometries"> Collection of Geometry3d objects.</param>
            <param name="parent"> Shape's parent object; i.e., Equipment, EquipmentComponent, or DesignEquipment.</param>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.InvalidParentException">System parent argument is not a valid parent for the shape; i.e., should be an Equipment, EquipmentComponent, or DesignSolid.</exception>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.UnexpectedGTypeShapeCreationFailureException">Unexpected failure while creating the GType shape.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Provided system parent must be "In-Working" status for the shape to be added.</exception>
            <exception cref="T:System.ArgumentNullException">Provided parent argument is null or geometries collection object is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnIJDObjectCollectionAddException">Unable to parse the given geometries collection object.</exception>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.GenericShape.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor for .NET to access this class.
            </summary>
            <param name="oPB">Private Business object</param>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.GenericShape.SetOrientation(Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Sets the orientation of the shape.
            </summary>
            <param name="xAxisNew">X-axis of the shape to be set.</param>
            <param name="yAxisNew">Y-axis of the shape to be set.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <exception cref="T:System.ArgumentException">Input argument length is less than the DistanceTolerance value, or input vectors are not perpendicular to each other.</exception>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure trying to modify the object.</exception>
            <example>This example explains how to set orientation of a shape.
            <code>
            Dim oXVector As Vector = New Vector(0, 0, 0) 'Initialize with proper values.
            Dim oYVector As Vector = New Vector(0, 0, 0) 'Initialize with proper values.
            Dim oShape As GenericShape = Nothing 'Get the shape object.
            oShape.SetOrientation(oXVector, oYVector)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.GenericShape.Transform(Ingr.SP3D.Common.Middle.Matrix4X4)">
            <summary>
            Transforms the shape with the given matrix.
            </summary>
            <param name="oT4X4">Transformation matrix object.</param>
            <exception cref="T:System.ArgumentNullException">Input matrix argument is null.</exception>
            <example>This example explains how to transform a shape given a matrix.
            <code>
            Dim oTransformMatrix As Matrix4X4 = New Matrix4X4 'Initialize with proper values.
            Dim oShape As GenericShape = Nothing 'Get the shape object.
            oShape.Transform(oTransformMatrix)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.GenericShape.IsAssemblyMember">
            <summary>
            Checks whether the shape is a CustomAssembly output.
            </summary>
            <returns>Boolean value.</returns>
            <example>This example explains how to check if a shape is an assembly output.
            <code>
            Dim oShape As GenericShape = Nothing 'Get the shape object.
            Dim bIsAssemblyMember As Boolean 
            bIsAssemblyMember = oShape.IsAssemblyMember()
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.GenericShape.SetUserDefinedName(System.String)">
            <summary>
            Sets the user-defined name of an object.
            </summary>
            <param name="Name">The new name.</param>
            <example>This example explains how to set a user-defined name.
            <code>
            Dim sName As String = Nothing 'Initialize this with a proper name.
            Dim oShape As GenericShape = Nothing 'Get the shape object.
            oShape.SetUserDefinedName(sName)
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.GenericShape.SystemParent">
            <summary>
            Gets the system parent of the shape.
            </summary>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.InvalidParentException"> Parent is not found for this shape, or it has more than one associated parent.</exception>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.GenericShape.WBSItemParents">
            <summary>
            Gets the WBSItem parents for this item.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.GenericShape.WBSProjects">
            <summary>
            Gets the projects to which the object is claimed.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.GenericShape.XAxis">
            <summary>
            Gets the X-axis of shape local coordinate system.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.GenericShape.YAxis">
            <summary>
            Gets the Y-axis of shape local coordinate system.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.GenericShape.ZAxis">
            <summary>
            Gets the Z-axis of shape local coordinate system.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.GenericShape.Origin">
            <summary>
            Gets or sets the position of the shape.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.GenericShape.Matrix">
            <summary>
            Gets or sets the shape matrix.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.GenericShape.Range">
            <summary>
            Gets the range box of the shape.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.GenericShape.Representation">
            <summary>
            Gets or sets the representation of the shape.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.GenericShape.Part">
            <summary>
            Gets or sets the part associated to the shape.
            </summary>
            <example>This example explains how to get or set the part.
            <code>
            'Define Shape.
            Dim oShape As Shape = Nothing
            Dim oPart As Part = Nothing
            'Get part from shape.
            oPart = oShape.Part
            'Define part.
            Dim oPart1 As Part = Nothing
            'Set part on shape.
            oShape.Part = oPart1
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.GenericShape.Constraints">
            <summary>
            Gets the list of constraints associated with the shape.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.GenericShape.ActiveNameRule">
            <summary>
            Gets or sets the active name rule associated to the shape.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.GenericShape.NamedItemHelperObj">
            <summary>
            Private utility method for managing the existance of the NamedItemHelper object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.GenericShape.Name">
            <summary>
            Gets the name of the object.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Middle.PrismaticShape">
            <summary>
            PrismaticShape class represents a standard PrismaticShape object. 
            Refer to the catalog data documentation for further details on the properties.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.PrismaticShape.#ctor">
            <summary>
            Internal constructor, cannot be accessible from outside.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.PrismaticShape.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor for .NET to access this class.
            </summary>
            <param name="oPB">Private Business object</param>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.PrismaticShape.#ctor(Ingr.SP3D.ReferenceData.Middle.Part,Ingr.SP3D.Common.Middle.SketchCrossSection,Ingr.SP3D.Common.Middle.Sketch3D,Ingr.SP3D.Common.Middle.ISystem)">
            <summary>
            Creates the prismatic shape given the part, cross section, and path under the parent.
            </summary>
            <param name="oPart">Catalog part object from which prismatic shape is created.</param> 
            <param name="oCrossSection">Cross section of the prismatic shape to be created.</param> 
            <param name="oPath">Path along which prismatic shape to be created.</param> 
            <param name="oParentSystem">Parent system under which the shape is created.</param> 
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure trying to create an prismatic shape.</exception>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.SketchCrossSectionAlreadyRelatedException">Raised when the sketch cross section is already related with another prismatic shape.</exception>
            <example>This example explains how to create equipment given a part and the parent system.
            <code>
            'Create Equipment.
            Dim oPart As Part = Nothing 'Initialize with the part. Part can be obtained using the GetPart method on CatalogBaseHelper class.
            Dim oPath As Sketch3D = Nothing 'Initialize this with proper sketch points.
            Dim oSketchPoint1 As SketchPoint = New SketchPoint(0.0, 0.0, 0.0) 'Initialize with required values.
            Dim oSketchPoint2 As SketchPoint = New SketchPoint(0.0, 0.0, 4.0) 'Initialize with required values.
            Dim oSketchPoint3 As SketchPoint = New SketchPoint(0.0, 4.0, 4.0) 'Initialize with required values.
            Dim oSketchPointCol As New Collection(Of SketchPoint)
            oSketchPointCol.Add(oSketchPoint1)
            oSketchPointCol.Add(oSketchPoint2)
            oSketchPointCol.Add(oSketchPoint3)
            Dim oModel As Model = Nothing 'Initialize with the plant model property on plant.
            Dim oSketchPath As New Sketch3D(oModel)
            oSketchPath.SetSketchPoints(oSketchPointCol)
            Dim oSketchCrossSection As New SketchCrossSection(oModel)
            oSketchCrossSection.CrossSectionDefinition = Nothing 'Initialize this with proper PartCS; e.g., :- SKETCH_CROSS_SECTION_02.
            Dim oParentSystem As ISystem = Nothing 'Update with the parent system.
            Dim oPrismaticShape As PrismaticShape = Nothing
            oPrismaticShape = New PrismaticShape(oPart, oSketchCrossSection, oSketchPath, oParentSystem)       
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.PrismaticShape.#ctor(System.String,Ingr.SP3D.Common.Middle.SketchCrossSection,Ingr.SP3D.Common.Middle.Sketch3D,Ingr.SP3D.Common.Middle.ISystem)">
            <summary>
            Creates the prismatic shape given the part number, cross section, and path under the parent.
            </summary>
            <param name="strPartNumber"> Catalog part number from which the prismatic shape is created.</param> 
            <param name="oCrossSection">Cross section of the prismatic shape to be created.</param> 
            <param name="oPath">Path along which the prismatic shape is to be created.</param> 
            <param name="oParentSystem">Parent system under which the equipment is created.</param> 
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure trying to create a prismatic shape.</exception>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.SketchCrossSectionAlreadyRelatedException">Raised when the sketch cross section is already related with another prismatic shape.</exception>
            <example>This example explains how to create equipment given a part number and the parent system.
            <code>
            'Create Equipment.
            Dim sPartNumber As String = Nothing 'Initialize with the part number; e.g., :- PrismaticShape 001.
            Dim oPath As Sketch3D = Nothing 'Initialize this with proper sketch points.
            Dim oSketchPoint1 As SketchPoint = New SketchPoint(0.0, 0.0, 0.0) 'Initialize with required values.
            Dim oSketchPoint2 As SketchPoint = New SketchPoint(0.0, 0.0, 4.0) 'Initialize with required values.
            Dim oSketchPoint3 As SketchPoint = New SketchPoint(0.0, 4.0, 4.0) 'Initialize with required values.
            Dim oSketchPointCol As New Collection(Of SketchPoint)
            oSketchPointCol.Add(oSketchPoint1)
            oSketchPointCol.Add(oSketchPoint2)
            oSketchPointCol.Add(oSketchPoint3)
            Dim oModel As Model = Nothing 'Initialize with the plant model property on plant.
            Dim oSketchPath As New Sketch3D(oModel)
            oSketchPath.SetSketchPoints(oSketchPointCol)
            Dim oSketchCrossSection As New SketchCrossSection(oModel)
            oSketchCrossSection.CrossSectionDefinition = Nothing 'Initialize this with proper PartCS; e.g., :- SKETCH_CROSS_SECTION_02.
            Dim oParentSystem As ISystem = Nothing 'Update with the parent system.
            Dim oPrismaticShape As PrismaticShape = Nothing
            oPrismaticShape = New PrismaticShape(sPartNumber, oSketchCrossSection, oSketchPath, oParentSystem)       
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.PrismaticShape.#ctor(Ingr.SP3D.ReferenceData.Middle.Part,Ingr.SP3D.Common.Middle.SketchCrossSection,Ingr.SP3D.Common.Middle.Sketch3D,Ingr.SP3D.Common.Middle.ISystem,System.Boolean)">
            <summary>
            Creates the prismatic shape given the part, cross section, and path under the parent.
            </summary>
            <param name="oPart">Catalog part object from which the prismatic shape is created.</param> 
            <param name="oCrossSection">Cross section of the prismatic shape to be created.</param> 
            <param name="oPath">Path along which prismatic shape to be created.</param> 
            <param name="oParentSystem">Parent system under which the shape is created.</param> 
            <param name="bBehaviourControlledByUser">Behavior controlled by user flag. True if the user can modify the orientation properties from the property page and vice versa.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure trying to create an prismatic shape.</exception>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.SketchCrossSectionAlreadyRelatedException">Raised when the sketch cross section is already related with another prismatic shape.</exception>
            <example>This example explains how to create equipment given a part and the parent system.
            <code>
            'Create Equipment.
            Dim oPart As Part = Nothing 'Initialize with the part. Part can be obtained using the GetPart method on CatalogBaseHelper class.
            Dim oPath As Sketch3D = Nothing 'Initialize this with proper sketch points.
            Dim oSketchPoint1 As SketchPoint = New SketchPoint(0.0, 0.0, 0.0) 'Initialize with required values.
            Dim oSketchPoint2 As SketchPoint = New SketchPoint(0.0, 0.0, 4.0) 'Initialize with required values.
            Dim oSketchPoint3 As SketchPoint = New SketchPoint(0.0, 4.0, 4.0) 'Initialize with required values.
            Dim oSketchPointCol As New Collection(Of SketchPoint)
            oSketchPointCol.Add(oSketchPoint1)
            oSketchPointCol.Add(oSketchPoint2)
            oSketchPointCol.Add(oSketchPoint3)
            Dim oModel As Model = Nothing 'Initialize with the plant model property on plant.
            Dim oSketchPath As New Sketch3D(oModel)
            oSketchPath.SetSketchPoints(oSketchPointCol)
            Dim oSketchCrossSection As New SketchCrossSection(oModel)
            oSketchCrossSection.CrossSectionDefinition = Nothing 'Initialize this with proper PartCS; e.g., :- SKETCH_CROSS_SECTION_02.
            Dim oParentSystem As ISystem = Nothing 'Update with the parent system.
            'Set the behavior controlled by user flag.
            Dim bBehaviourControlledByUser As Boolean = False
            Dim oPrismaticShape As PrismaticShape = Nothing
            oPrismaticShape = New PrismaticShape(oPart, oSketchCrossSection, oSketchPath, oParentSystem, bBehaviourControlledByUser)       
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.PrismaticShape.#ctor(System.String,Ingr.SP3D.Common.Middle.SketchCrossSection,Ingr.SP3D.Common.Middle.Sketch3D,Ingr.SP3D.Common.Middle.ISystem,System.Boolean)">
            <summary>
            Creates the prismatic shape given the part number, cross section, and path under the parent.
            </summary>
            <param name="strPartNumber"> Catalog part number from which the prismatic shape is created.</param> 
            <param name="oCrossSection">Cross section of the prismatic shape to be created.</param> 
            <param name="oPath">Path along which the prismatic shape is to be created.</param> 
            <param name="oParentSystem">Parent system under which the equipment is created.</param> 
            <param name="bBehaviourControlledByUser">Behavior controlled by user flag. True if the user can modify the orientation properties from the property page and vice versa.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure trying to create a prismatic shape.</exception>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.SketchCrossSectionAlreadyRelatedException">Raised when the sketch cross section is already related with another prismatic shape.</exception>
            <example>This example explains how to create equipment given a part number and the parent system.
            <code>
            'Create Equipment.
            Dim sPartNumber As String = Nothing 'Initialize with the part number; e.g., :- PrismaticShape 001.
            Dim oPath As Sketch3D = Nothing 'Initialize this with proper sketch points.
            Dim oSketchPoint1 As SketchPoint = New SketchPoint(0.0, 0.0, 0.0) 'Initialize with required values.
            Dim oSketchPoint2 As SketchPoint = New SketchPoint(0.0, 0.0, 4.0) 'Initialize with required values.
            Dim oSketchPoint3 As SketchPoint = New SketchPoint(0.0, 4.0, 4.0) 'Initialize with required values.
            Dim oSketchPointCol As New Collection(Of SketchPoint)
            oSketchPointCol.Add(oSketchPoint1)
            oSketchPointCol.Add(oSketchPoint2)
            oSketchPointCol.Add(oSketchPoint3)
            Dim oModel As Model = Nothing 'Initialize with the plant model property on plant.
            Dim oSketchPath As New Sketch3D(oModel)
            oSketchPath.SetSketchPoints(oSketchPointCol)
            Dim oSketchCrossSection As New SketchCrossSection(oModel)
            oSketchCrossSection.CrossSectionDefinition = Nothing 'Initialize this with proper PartCS; e.g., :- SKETCH_CROSS_SECTION_02.
            Dim oParentSystem As ISystem = Nothing 'Update with the parent system.
            'Set the behavior controlled by user flag.
            Dim bBehaviourControlledByUser As Boolean = False
            Dim oPrismaticShape As PrismaticShape = Nothing
            oPrismaticShape = New PrismaticShape(sPartNumber, oSketchCrossSection, oSketchPath, oParentSystem, bBehaviourControlledByUser)       
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.PrismaticShape.#ctor(Ingr.SP3D.Equipment.Middle.PrismaticShape)">
            <summary>
            Copy constructor for prismatic shape.
            </summary>
            <param name="oShapeToCopy">Prismatic shape object to be copied.</param>
            <exception cref="T:System.ArgumentNullException">Shape is null.</exception>
            <example>This example explains how to use copy constructor.
            <code>
            'Create prismatic shape.
            Dim oShape As PrismaticShape = Nothing        
            'Call copy constructor.
            Dim oShape1 As PrismaticShape = Nothing
            oShape1 = New PrismaticShape(oShape)        
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.PrismaticShape.CrossSection">
            <summary>
            Gets or sets the cross section associated with the prismatic shape.        
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.PrismaticShape.Path">
            <summary>
            Gets or sets the path associated with the prismatic shape.        
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Middle.DistributionPortImplHelper">
            <summary>
            Helper Class that contains the common implementation of the IDistributionPort interface.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.DistributionPortImplHelper.#ctor(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Constructs a DistributionPortImplHelper class for the wrapper.
            </summary>
            <param name="oWrapper">Business Object of the wrapper class that implements IDistributionPort interface.</param>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.DistributionPortImplHelper.IsConnected">
            <summary>
            Checks whether the distribution port is connected.
            </summary>
            <returns>True if it is connected; False if it is not.</returns>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.DistributionPortImplHelper.Location">
            <summary>
            Gets or sets the location of the distribution port.
            </summary> 
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.DistributionPortImplHelper.NormalVector">
            <summary>
            Gets or sets the normal vector of the distribution port.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.DistributionPortImplHelper.RadialVector">
            <summary>
            Gets or sets the radial vector of the distribution port.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.DistributionPortImplHelper.PortStatus">
            <summary>
            Gets the distribution port status.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Middle.PipeNozzle">
            <summary>
            PipeNozzle class represents a standard PipeNozzle object. 
            Refer to the catalog data documentation for further details on the properties.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.PipeNozzle.#ctor">
            <summary>
            Internal use only --> Hidden default constructor.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.PipeNozzle.#ctor(System.String,System.Boolean,System.Int32,Ingr.SP3D.Common.Middle.ISystem)">
            <summary>
            Creates a pipe nozzle for a given part number.
            </summary>        
            <param name="strPartNumber">Part number of the nozzle to be created.</param>
            <param name="bLightWeighGraphics">Boolean for lightweight graphics.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="oParent">Parent system under which the nozzle must be created.</param>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure trying to create the HVACPort.</exception>
            <example>This example explains how to create PipeNozzle.
            <code>
            Dim sPartNumber As String = Nothing 'Initialize with the required part number; e.g.,:- PUMP 001A-E.
            Dim bLightWeightGraphics as Boolean 
            Dim iIndex as Int32 'e.g., iIndex = 1.
            Dim oParentSystem as ISystem = Nothing 'Initialize with the respective parent; e.g.,:- equipment. 
            Dim oPipeNozzle As PipeNozzle = Nothing 
            oPipeNozzle = new PipeNozzle(sPartNumber, bLightWeightGraphics, iIndex, oParentSystem)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.PipeNozzle.#ctor(Ingr.SP3D.ReferenceData.Middle.Part,System.Boolean,System.Int32,Ingr.SP3D.Common.Middle.ISystem)">
            <summary>
            Creates a pipe nozzle for a given part and port index.
            </summary>        
            <param name="oPart">Part of the nozzle to be created.</param>
            <param name="bLightWeighGraphics">Boolean for lightweight graphics.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="oParent">Parent system under which the nozzle must be created.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null or index is less than or equal to 0.</exception>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure trying to create the HVACPort.</exception>
            <example>This example explains how to create PipeNozzle.
            <code>
            Dim oPart As Part = Nothing 'Initialize with the required part. GetPart method on CatalogBaseHelper class would return the part.
            Dim bLightWeightGraphics as Boolean 
            Dim iIndex as Int32 'e.g., iIndex = 1.
            Dim oParentSystem as ISystem = Nothing  'Initialize with the respective parent; e.g.,:- equipment. 
            Dim oPipeNozzle As PipeNozzle = Nothing 
            oPipeNozzle = new PipeNozzle(oPart, bLightWeightGraphics, iIndex, oParentSystem)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.PipeNozzle.#ctor(System.String,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Boolean,System.Int32)">
            <summary>
            Creates a pipe nozzle for a given part number.
            </summary>        
            <param name="strPartNumber">Part number of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="bLightWeightGraphics">Boolean for lightweight graphics.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null. </exception>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure trying to create the HVACPort.</exception>
            <example>This example explains how to create PipeNozzle.
            <code>
            Dim sPartNumber As String = Nothing 'Initialize with the required part number; e.g.,:- PUMP 001A-E.
            Dim oConnection As SP3DConnection = Nothing 'DBConnection property on any BusinessObject would give the connection.
            Dim bLightWeightGraphics as Boolean 
            Dim iIndex as Int32 'e.g., iIndex = 1.
            Dim oPipeNozzle As PipeNozzle = Nothing 
            oPipeNozzle = new PipeNozzle(sPartNumber, oConnection, bLightWeightGraphics, iIndex)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.PipeNozzle.#ctor(Ingr.SP3D.ReferenceData.Middle.Part,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Boolean,System.Int32)">
            <summary>
            Creates a pipe nozzle for a given part and port index.
            </summary>
            <param name="oPart">Part of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="bLightWeighGraphics">Boolean for lightweight graphics.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure trying to create the HVACPort.</exception>
            <example>This example explains how to create PipeNozzle.
            <code>
            Dim oPart As Part = Nothing 'GetPart method on CatalogBaseHelper class would return the part.
            Dim oConnection As SP3DConnection = Nothing 'DBConnection property on any BusinessObject would give the connection.
            Dim bLightWeightGraphics as Boolean 
            Dim iIndex as Int32 'e.g., iIndex = 1.
            Dim oPipeNozzle As PipeNozzle = Nothing 
            oPipeNozzle = new PipeNozzle(oPart, oConnection, bLightWeightGraphics, iIndex)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.PipeNozzle.#ctor(System.String,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Boolean,System.Int32,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector,System.Double,System.Boolean)">
            <summary>
            Creates a pipe nozzle for a given part number at the specified location and orientation
            and with the predefined length. Length of the nozzle is ignored if the constructed nozzle is a 
            lightweight graphic of the nozzle.
            </summary>
            <param name="strPartNumber">Part number of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="bLightWeightGraphics">Boolean for lightweight graphics or graphics nozzles not added.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="oPos">Position of the nozzle.</param>
            <param name="oNormal">Normal of the nozzle.</param>
            <param name="dLength">Length of the nozzle; valid only if bLightWeightGraphics = False.</param>
            <param name="bIsFacePosition">Nozzle location is placed such that the face of the nozzle matches with passed position oPos if bIsFacePosition = True.</param>
            <exception cref="T:System.ArgumentException">Input argument is null or LightWeightGraphics is true but the length is less than 0 </exception>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure trying to create the HvacPort.</exception>
            <example>This example explains how to create PipeNozzle.
            <code>
            Dim sPartNumber As String = Nothing 'Initialize with the required part number; e.g.,:- PUMP 001A-E.
            Dim oConnection As SP3DConnection = Nothing 'DBConnection property on any BusinessObject would give the connection.
            Dim bLightWeightGraphics as Boolean 
            Dim iIndex as Int32 'e.g., iIndex = 1.
            Dim oPos as new Position(0.0,0.0,0.0) 'Position of the nozzle. Initialize this with required values.
            Dim oNormal as new Vector(0.0,0.0,0.0) 'Normal of the nozzle. Initialize this with required values
            Dim dLength as Double 'Length of the nozzle should not be less than 0.0, if bLightWeightGraphics is True.
            Dim bIsFacePosition as Boolean 
            Dim oPipeNozzle As PipeNozzle = Nothing 
            oPipeNozzle = new PipeNozzle(sPartNumber, oConnection, bLightWeightGraphics, iIndex, oPos, oNormal, dLength, bIsFacePosition)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.PipeNozzle.#ctor(Ingr.SP3D.ReferenceData.Middle.Part,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Boolean,System.Int32,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector,System.Double,System.Boolean)">
            <summary>
            Creates a pipe nozzle for a given part at the specified location and orientation
            and with the predefined length. Length of the nozzle is ignored if the constructed nozzle is a 
            lightweight graphic of the nozzle.
            </summary>
            <param name="oPart">Part of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="bLightWeighGraphics">Boolean for lightweight graphics or graphics nozzles not added.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="oPos">Position of the nozzle.</param>
            <param name="oNormal">Normal of the nozzle.</param>
            <param name="dLength">Length of the nozzle; valid only if bLightWeightGraphics = False.</param>
            <param name="bIsFacePosition">Nozzle location is placed such that the face of the nozzle matches with passed position oPos if bIsFacePosition = True.</param>
            <exception cref="T:System.ArgumentException">Input argument is null or LightWeightGraphics is true but the length is less than 0 </exception>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure trying to create the HVACPort.</exception>
            <example>This example explains how to create PipeNozzle.
            <code>
            Dim oPart As Part = Nothing 'GetPart method on CatalogBaseHelper class would return the part.
            Dim oConnection As SP3DConnection = Nothing 'DBConnection property on any BusinessObject would give the connection.
            Dim bLightWeightGraphics as Boolean 
            Dim iIndex as Int32 'e.g., iIndex = 1.
            Dim oPos as new Position(0.0,0.0,0.0) 'Position of the nozzle. Initialize this with proper values.
            Dim oNormal as new Vector(0.0,0.0,0.0) 'Normal of the nozzle. Initialize this with proper values.
            Dim dLength as Double 'Length of the nozzle. Should not be less than 0.0 if bLightWeightGraphics is True.
            Dim bIsfacePosition as Boolean 
            Dim oPipeNozzle As PipeNozzle = Nothing 
            oPipeNozzle = new PipeNozzle(oPart, oConnection, bLightWeightGraphics, iIndex, oPos, oNormal, dLength, bIsfacePosition)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.PipeNozzle.#ctor(Ingr.SP3D.ReferenceData.Middle.PipePortDef,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Boolean)">
            <summary>
            Creates a pipe nozzle for a given port definition.
            </summary>
            <param name="oPipePortDef">Pipe port definition of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="bLightWeighGraphics">Boolean for lightweight graphics or for graphics nozzles not added.</param>
            <exception cref="T:System.ArgumentException">Input argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure trying to modify the object.</exception>
            <example>This example explains how to create PipeNozzle.
            <code>
            Dim oPipePortDef As PipePortDef = Nothing 'PortDefinitions property on a part would return the port definitions.
            Dim oConnection As SP3DConnection = Nothing 'DBConnection property on any BusinessObject would give the connection.
            Dim bLightWeightGraphics as Boolean 
            Dim oPipeNozzle As PipeNozzle = Nothing 
            oPipeNozzle = new PipeNozzle(oPipePortDef, oConnection, bLightWeightGraphics)
            </code>
            </example> 
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.PipeNozzle.#ctor(System.String,System.Boolean,System.Int32,Ingr.SP3D.Common.Middle.ISystem,System.Boolean)">
            <summary>
            Creates a pipe nozzle for a given part number.
            </summary>        
            <param name="strPartNumber">Part number of the nozzle to be created.</param>
            <param name="bLightWeighGraphics">Boolean for lightweight graphics.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="oParent">Parent system under which the nozzle must be created.</param>
            <param name="bBehaviourControlledByUser">Behavior controlled by user flag. True if the user can modify the orientation properties from property page and vice versa.</param>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure trying to create the HVACPort.</exception>
            <example>This example explains how to create PipeNozzle.
            <code>
            Dim sPartNumber As String = Nothing 'Initialize with the required part number; e.g.,:- PUMP 001A-E.
            Dim bLightWeightGraphics as Boolean 
            Dim iIndex as Int32 'e.g., iIndex = 1.
            Dim oParentSystem as ISystem = Nothing 'Initialize with the respective parent; e.g.,:- equipment. 
            'Set the behaviour controlled by user flag.
            Dim bBehaviourControlledByUser As Boolean = False
            Dim oPipeNozzle As PipeNozzle = Nothing 
            oPipeNozzle = new PipeNozzle(sPartNumber, bLightWeightGraphics, iIndex, oParentSystem, bBehaviourControlledByUser)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.PipeNozzle.#ctor(Ingr.SP3D.ReferenceData.Middle.Part,System.Boolean,System.Int32,Ingr.SP3D.Common.Middle.ISystem,System.Boolean)">
            <summary>
            Creates a pipe nozzle for a given part and port index.
            </summary>        
            <param name="oPart">Part of the nozzle to be created.</param>
            <param name="bLightWeighGraphics">Boolean for lightweight graphics.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="oParent">Parent system under which the nozzle must be created.</param>
            <param name="bBehaviourControlledByUser">Behavior controlled by user flag. True if the user can modify the orientation properties from property page and vice versa.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null or index is less than or equal to 0.</exception>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure trying to create the HVACPort.</exception>
            <example>This example explains how to create PipeNozzle.
            <code>
            Dim oPart As Part = Nothing 'Initialize with the required part. GetPart method on CatalogBaseHelper class would return the part.
            Dim bLightWeightGraphics as Boolean 
            Dim iIndex as Int32 'e.g., iIndex = 1.
            Dim oParentSystem as ISystem = Nothing  'Initialize with the respective parent; e.g.,:- equipment. 
            'Set the behaviour controlled by user flag.
            Dim bBehaviourControlledByUser As Boolean = False
            Dim oPipeNozzle As PipeNozzle = Nothing 
            oPipeNozzle = new PipeNozzle(oPart, bLightWeightGraphics, iIndex, oParentSystem, bBehaviourControlledByUser)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.PipeNozzle.#ctor(System.String,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Creates a pipe nozzle for a given part number.
            </summary>        
            <param name="strPartNumber">Part number of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="bLightWeightGraphics">Boolean for lightweight graphics.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="bBehaviourControlledByUser">Behavior controlled by user flag. True if the user can modify the orientation properties from property page and vice versa.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null. </exception>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure trying to create the HVACPort.</exception>
            <example>This example explains how to create PipeNozzle.
            <code>
            Dim sPartNumber As String = Nothing 'Initialize with the required part number; e.g.,:- PUMP 001A-E.
            Dim oConnection As SP3DConnection = Nothing 'DBConnection property on any BusinessObject would give the connection.
            Dim bLightWeightGraphics as Boolean 
            Dim iIndex as Int32 'e.g., iIndex = 1.
            'Set the behaviour controlled by user flag.
            Dim bBehaviourControlledByUser As Boolean = False
            Dim oPipeNozzle As PipeNozzle = Nothing 
            oPipeNozzle = new PipeNozzle(sPartNumber, oConnection, bLightWeightGraphics, iIndex, bBehaviourControlledByUser)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.PipeNozzle.#ctor(Ingr.SP3D.ReferenceData.Middle.Part,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Creates a pipe nozzle for a given part and port index.
            </summary>
            <param name="oPart">Part of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="bLightWeighGraphics">Boolean for lightweight graphics.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="bBehaviourControlledByUser">Behavior controlled by user flag. True if the user can modify the orientation properties from property page and vice versa.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure trying to create the HVACPort.</exception>
            <example>This example explains how to create PipeNozzle.
            <code>
            Dim oPart As Part = Nothing 'GetPart method on CatalogBaseHelper class would return the part.
            Dim oConnection As SP3DConnection = Nothing 'DBConnection property on any BusinessObject would give the connection.
            Dim bLightWeightGraphics as Boolean 
            Dim iIndex as Int32 'e.g., iIndex = 1.
            'Set the behaviour controlled by user flag.
            Dim bBehaviourControlledByUser As Boolean = False
            Dim oPipeNozzle As PipeNozzle = Nothing 
            oPipeNozzle = new PipeNozzle(oPart, oConnection, bLightWeightGraphics, iIndex, bBehaviourControlledByUser)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.PipeNozzle.#ctor(System.String,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Boolean,System.Int32,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Creates a pipe nozzle for a given part number at the specified location and orientation
            with the predefined length. Length of the nozzle is ignored if the constructed nozzle is a 
            lightweight graphic of the nozzle.
            </summary>
            <param name="strPartNumber">Part number of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="bLightWeightGraphics">Boolean for lightweight graphics or graphics nozzles not added.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="oPos">Position of the nozzle.</param>
            <param name="oNormal">Normal of the nozzle.</param>
            <param name="dLength">Length of the nozzle; valid only if bLightWeightGraphics = False.</param>
            <param name="bIsFacePosition">Nozzle location is placed such that the face of the nozzle matches with passed position oPos if bIsFacePosition = True.</param>
            <param name="bBehaviourControlledByUser">Behavior controlled by user flag. True if the user can modify the orientation properties from property page and vice versa.</param>
            <exception cref="T:System.ArgumentException">Input argument is null or LightWeightGraphics is true but the length is less than 0. </exception>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure trying to create the HVACPort.</exception>
            <example>This example explains how to create PipeNozzle.
            <code>
            Dim sPartNumber As String = Nothing 'Initialize with the required part number; e.g.,:- PUMP 001A-E.
            Dim oConnection As SP3DConnection = Nothing 'DBConnection property on any BusinessObject would give the connection.
            Dim bLightWeightGraphics as Boolean 
            Dim iIndex as Int32 'e.g., iIndex = 1.
            Dim oPos as new Position(0.0,0.0,0.0) 'Position of the nozzle. Initialize this with required values.
            Dim oNormal as new Vector(0.0,0.0,0.0) 'Normal of the nozzle. Initialize this with required values.
            Dim dLength as Double 'Length of the nozzle should not be less than 0.0, if bLightWeightGraphics is True.
            Dim bIsFacePosition as Boolean 
            'Set the behaviour controlled by user flag.
            Dim bBehaviourControlledByUser As Boolean = False
            Dim oPipeNozzle As PipeNozzle = Nothing 
            oPipeNozzle = new PipeNozzle(sPartNumber, oConnection, bLightWeightGraphics, iIndex, oPos, oNormal, dLength, bIsFacePosition, bBehaviourControlledByUser)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.PipeNozzle.#ctor(Ingr.SP3D.ReferenceData.Middle.Part,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Boolean,System.Int32,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Creates a pipe nozzle for a given part at the specified location and orientation
            with the predefined length. Length of the nozzle is ignored if the constructed nozzle is a 
            lightweight graphic of the nozzle.
            </summary>
            <param name="oPart">Part of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="bLightWeighGraphics">Boolean for lightweight graphics or graphics nozzles not added.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="oPos">Position of the nozzle.</param>
            <param name="oNormal">Normal of the nozzle.</param>
            <param name="dLength">Length of the nozzle; valid only if bLightWeightGraphics = False.</param>
            <param name="bIsFacePosition">Nozzle location is placed such that the face of the nozzle matches with passed position oPos if bIsFacePosition = True.</param>
            <param name="bBehaviourControlledByUser">Behavior controlled by user flag. True if the user can modify the orientation properties from property page and vice versa.</param>
            <exception cref="T:System.ArgumentException">Input argument is null or LightWeightGraphics is true but the length is less than 0. </exception>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure trying to create the HvacPort.</exception>
            <example>This example explains how to create PipeNozzle.
            <code>
            Dim oPart As Part = Nothing 'GetPart method on CatalogBaseHelper class would return the part.
            Dim oConnection As SP3DConnection = Nothing 'DBConnection property on any BusinessObject would give the connection.
            Dim bLightWeightGraphics as Boolean 
            Dim iIndex as Int32 'e.g., iIndex = 1.
            Dim oPos as new Position(0.0,0.0,0.0) 'Position of the nozzle. Initialize this with proper values.
            Dim oNormal as new Vector(0.0,0.0,0.0) 'Normal of the nozzle. Initialize this with proper values.
            Dim dLength as Double 'Length of the nozzle. Should not be less than 0.0 if bLightWeightGraphics is True.
            Dim bIsfacePosition as Boolean 
            'Set the behaviour controlled by user flag.
            Dim bBehaviourControlledByUser As Boolean = False
            Dim oPipeNozzle As PipeNozzle = Nothing 
            oPipeNozzle = new PipeNozzle(oPart, oConnection, bLightWeightGraphics, iIndex, oPos, oNormal, dLength, bIsfacePosition, bBehaviourControlledByUser)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.PipeNozzle.#ctor(Ingr.SP3D.ReferenceData.Middle.PipePortDef,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Boolean,System.Boolean)">
            <summary>
            Creates a pipe nozzle for a given port definition.
            </summary>
            <param name="oPipePortDef">Pipe port definition of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="bLightWeighGraphics">Boolean for lightweight graphics or for no added graphics nozzles.</param>
            <param name="bBehaviourControlledByUser">Behavior controlled by user flag. True if the user can modify the orientation properties from property page and vice versa. </param>
            <exception cref="T:System.ArgumentException">Input argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure trying to modify the object.</exception>
            <example>This example explains how to create PipeNozzle.
            <code>
            Dim oPipePortDef As PipePortDef = Nothing 'PortDefinitions property on a part would return the port definitions.
            Dim oConnection As SP3DConnection = Nothing 'DBConnection property on any BusinessObject would give the connection.
            Dim bLightWeightGraphics as Boolean 
            'Set the behaviour controlled by user flag.
            Dim bBehaviourControlledByUser As Boolean = False
            Dim oPipeNozzle As PipeNozzle = Nothing 
            oPipeNozzle = new PipeNozzle(oPipePortDef, oConnection, bLightWeightGraphics, bBehaviourControlledByUser)
            </code>
            </example> 
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.PipeNozzle.#ctor(Ingr.SP3D.Equipment.Middle.PipeNozzle)">
            <summary>
            Copy constructor for pipe nozzle.
            </summary>
            <param name="oNozzleToCopy">Nozzle object to be copied.</param>
            <exception cref="T:System.ArgumentNullException">Nozzle passed is null.</exception>
            <example>This example explains how to use the copy constructor.
            <code>
            'Create pipe nozzle.
            Dim oNozzle As PipeNozzle = Nothing        
            'Call copy constructor.
            Dim oNozzle1 As PipeNozzle = Nothing
            oNozzle1 = New PipeNozzle(oNozzle)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.PipeNozzle.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor for .NET to access this class.
            </summary>
            <param name="oPb">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.PipeNozzle.SetUserDefinedName(System.String)">
            <summary>
            Sets the user-defined name of the PipeNozzle object.
            </summary>
            <param name="Name">The new name.</param>
            <example>This is an example of the SetUserDefinedName method.
            <code>
            'Create Pipe Nozzle with its constructor.
            oPipeNozzle.SetUserDefinedName("Top Nozzle")
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.PipeNozzle.Range">
            <summary>
            Gets the range box representing the range of the PipeNozzle.
            </summary>
            <returns>The objects range box.</returns>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.GetRangeException">Unexpected failure while getting the range.</exception>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.PipeNozzle.Name">
            <summary>
            Gets the name of the object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.PipeNozzle.Length">
            <summary>
            Gets or sets the length of the pipe nozzle.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.PipeNozzle.Id">
            <summary>
            Gets the port ID property value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.PipeNozzle.PortIndex">
            <summary>
            Gets or sets the port index property value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.PipeNozzle.NPD">
            <summary>
            Gets or sets the nominal diameter property value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.PipeNozzle.EndPreparation">
            <summary>
            Gets the end preparation property value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.PipeNozzle.TerminationClass">
            <summary>
            Gets the termination class property value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.PipeNozzle.TerminationSubClass">
            <summary>
            Gets the termination subclass property value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.PipeNozzle.ScheduleThickness">
            <summary>
            Gets the schedule thickness property value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.PipeNozzle.SchedulePractice">
            <summary>
            Gets or sets the schedule practice property value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.PipeNozzle.PipingPointBasis">
            <summary>
            Gets or sets the piping point basis property value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.PipeNozzle.EndStandard">
            <summary>
            Gets or sets the end standard property value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.PipeNozzle.EndPractice">
            <summary>
            Gets or sets the end practice property value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.PipeNozzle.PressureRating">
            <summary>
             Gets or sets the pressure rating property value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.PipeNozzle.RatingPractice">
            <summary>
             Gets or sets the rating practice property value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.PipeNozzle.FlowDirection">
            <summary>
            Gets the flow direction property value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.PipeNozzle.FlangeOrHubOutsideDiameter">
            <summary>
            Gets the flange or hub outside diameter property value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.PipeNozzle.WallThicknessOrGrooveSetback">
            <summary>
            Gets the wall thickness or groove setback property value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.PipeNozzle.RaisedFaceOrSocketDiameter">
            <summary>
            Gets the raised face or socket diameter property value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.PipeNozzle.FlangeOrHubThickness">
            <summary>
            Gets the flange or hub thickness property value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.PipeNozzle.FlangeOrMechanicalGrooveWidth">
            <summary>
            Gets the flange or mechanical groove width property value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.PipeNozzle.FlangeProjectionOrSocketOffset">
            <summary>
            Gets the flange projection or socket offset property value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.PipeNozzle.SeatingOrGrooveOrSocketDepth">
            <summary>
            Gets the seating, groove, or socket depth property value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.PipeNozzle.PipingOutsideDiameter">
            <summary>
            Gets the piping outside diameter property value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.PipeNozzle.LinerThicknessAtFaceOfFlange">
            <summary>
             Gets the liner thickness at face of flange property value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.PipeNozzle.LinerThicknessAtInsideDiameter">
            <summary>
            Gets the liner thickness at inside diameter property value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.PipeNozzle.ReinforcedWallThickness">
            <summary>
            Gets the reinforced wall thickness property value.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Middle.ConduitPort">
            <summary>
            ConduitPort class represents the standard ConduitPort object. 
            Refer to the catalogdata documentation for further details on the properties.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.ConduitPort.#ctor">
            <summary>
            Internal use only --> Hidden default constructor.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.ConduitPort.#ctor(System.String,System.Int32,Ingr.SP3D.Common.Middle.ISystem)">
            <summary>
            Creates a conduit nozzle for a given part number.
            </summary>        
            <param name="strPartNumber">Part number of the nozzle to be created.</param>        
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="oParent">Parent system under which the nozzle must be created.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <example>This example shows how to create a conduit port given part number, index, and parent system.
            <code>
            'Get the PartNumber of the nozzle to be created.
            Dim sPartNumber As String = Nothing ' e.g., :- BA106E 42309-1-E.
            'Fill the PortIndex of the nozzle to be created.
            Dim iPortIndex As Int32
            'Get the System object under which the nozzle will be created. 
            Dim oSystem as ISystem = Nothing 'Can be an equipment object.
            'Create the ConduitPort.
            Dim oConduitPort As New ConduitPort(sPartNumber, iPortIndex, oSystem)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.ConduitPort.#ctor(System.String,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Int32)">
            <summary>
            Creates a conduit nozzle for a given part number.
            </summary>        
            <param name="strPartNumber">Part number of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <example>This example shows how to create a conduit port given part number, connection, and a port index.
            <code>
            'Get the PartNumber of the nozzle to be created.
            Dim sPartNumber As String = Nothing 'e.g., "BA106E 42309-1-E".
            'Get the Connection object in which the conduitport has to be created.
            Dim oConnection as SP3DConnection = Nothing 'Can be a catalog connection.
            'Fill the PortIndex of the nozzle to be created.
            Dim iPortIndex As Int32
            'Create the ConduitPort.
            Dim oConduitPort As New ConduitPort(sPartNumber, oConnection, iPortIndex) 
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.ConduitPort.#ctor(System.String,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Int32,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Creates a conduit port for a given part number at the specified location and orientation.
            </summary>
            <param name="strPartNumber">Part number of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="oPos">Position of the nozzle.</param>
            <param name="oNormal">Normal of the nozzle.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <example>This example shows how to create a conduit port given part number, connection, port index, position, and normal.
            <code>
            'Get the PartNumber of the nozzle to be created.
            Dim sPartNumber As String = Nothing 'e.g., "BA106E 42309-1-E".
            'Get the Connection object in which the conduit port has to be created.
            Dim oConnection as SP3DConnection = Nothing 'Can be a catalog connection.
            'Fill the PortIndex of the nozzle to be created.
            Dim iPortIndex As Int32
            Dim oPosition as new Position(0.0,0.0,0.0) 'Initialize the position.
            Dim oNormalVec as new Vector(0.0,0.0,0.0) 'Initialize the vector.
            'Create the ConduitPort.
            Dim oConduitPort As New ConduitPort(sPartNumber, oConnection, iPortIndex, oPosition, oNormalVec)  
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.ConduitPort.#ctor(Ingr.SP3D.ReferenceData.Middle.Part,System.Int32,Ingr.SP3D.Common.Middle.ISystem)">
            <summary>
            Creates a conduit nozzle for a given part.
            </summary>        
            <param name="oPart">Part of the nozzle to be created.</param>        
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="oParent">Parent system under which the nozzle must be created.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <example>This example shows how to create a conduit port given part, index, and parent system.
            <code>
            'Get the Part of the nozzle to be created.
            Dim oPart As Part = Nothing
            'Fill the PortIndex of the nozzle to be created.
            Dim iPortIndex As Int32
            'Get the System object under which the nozzle will be created. 
            Dim oSystem as ISystem = Nothing 'Can be an equipment object.
            'Create the ConduitPort.
            Dim oConduitPort As New ConduitPort(oPart, iPortIndex, oSystem)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.ConduitPort.#ctor(Ingr.SP3D.ReferenceData.Middle.Part,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Int32)">
            <summary>
            Creates a conduit nozzle for a given part.
            </summary>        
            <param name="oPart">Part of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <example>This example shows how to create a conduit port given part, connection, and a port index.
            <code>
            'Get the part of the nozzle to be created.
            Dim oPart As Part = Nothing
            'Get the Connection object in which the conduit port has to be created.
            Dim oConnection as SP3DConnection = Nothing 'Can be a catalog connection.
            'Fill the PortIndex of the nozzle to be created.
            Dim iPortIndex As Int32
            'Create the ConduitPort.
            Dim oConduitPort As New ConduitPort(oPart, oConnection, iPortIndex)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.ConduitPort.#ctor(Ingr.SP3D.ReferenceData.Middle.Part,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Int32,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Creates a conduit port for a given part at the specified location and orientation.
            </summary>
            <param name="oPart">Part of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="oPos">Position of the nozzle.</param>
            <param name="oNormal">Normal of the nozzle.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <example>This example shows how to create a conduitport given part, connection, port index, position, and normal.
            <code>
            'Get the part of the nozzle to be created.
            Dim oPart As Part = Nothing 'Get the part using GetPart method on CatalogBaseHelper class.
            'Get the Connection object in which the conduit port has to be created.
            Dim oConnection as SP3DConnection = Nothing 'Can be a catalog connection.
            'Fill the PortIndex of the Nozzle to be created.
            Dim iPortIndex As Int32
            Dim oPosition as new Position(0.0,0.0,0.0) 'Initialize the position.
            Dim oNormalVec as new Vector(0.0,0.0,0.0) 'Initialize the vector.
            'Create the ConduitPort.
            Dim oConduitPort As New ConduitPort(oPart, oConnection, iPortIndex, oPosition, oNormalVec)  
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.ConduitPort.#ctor(Ingr.SP3D.ReferenceData.Middle.PipePortDef,Ingr.SP3D.Common.Middle.Services.SP3DConnection)">
            <summary>
            Creates a conduit nozzle for a given port definition.
            </summary>
            <param name="oConduitPortDef">Conduit port definition of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <example>This example shows how to create a conduit port given PortDefinition and connection.
            <code>
            'Get the PortDefinition of the nozzle to be created.
            Dim oConduitPortDef As PipePortDef = Nothing 'Get ConduitPort definition object from the PortDefinitions property on the part.
            'Get the Connection object in which the conduit port has to be created.
            Dim oConnection as SP3DConnection = Nothing 'Can be a catalog connection.
            'Create the ConduitPort.
            Dim oConduitPort As New ConduitPort(oConduitPortDef, oConnection)  
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.ConduitPort.#ctor(System.String,System.Int32,Ingr.SP3D.Common.Middle.ISystem,System.Boolean)">
            <summary>
            Creates a conduit nozzle for a given part number.
            </summary>        
            <param name="strPartNumber">Part number of the nozzle to be created.</param>        
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="oParent">Parent system under which the nozzle must be created.</param>
            <param name="bBehaviourControlledByUser">Behavior controlled by user flag. True if the user can modify the orientation properties from property page and vice versa.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <example>This example shows how to create a conduit port given part number, index, and parent system.
            <code>
            'Get the PartNumber of the nozzle to be created.
            Dim sPartNumber As String = Nothing 'e.g., :- BA106E 42309-1-E.
            'Fill the PortIndex of the nozzle to be created.
            Dim iPortIndex As Int32
            'Get the System object under which the nozzle will be created. 
            Dim oSystem as ISystem = Nothing 'Can be an equipment object.
            'Set the behaviour controlled by user flag.
            Dim bBehaviourControlledByUser As Boolean = False
            'Create the ConduitPort.
            Dim oConduitPort As New ConduitPort(sPartNumber, iPortIndex, oSystem, bBehaviourControlledByUser)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.ConduitPort.#ctor(System.String,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Int32,System.Boolean)">
            <summary>
            Creates a conduit nozzle for a given part number.
            </summary>        
            <param name="strPartNumber">Part number of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="bBehaviourControlledByUser">Behavior controlled by user flag. True if the user can modify the orientation properties from property page and vice versa.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <example>This example shows how to create a conduit port given part number, connection, and a port index.
            <code>
            'Get the PartNumber of the nozzle to be created.
            Dim sPartNumber As String = Nothing 'e.g., "BA106E 42309-1-E".
            'Get the Connection object in which the conduitport has to be created.
            Dim oConnection as SP3DConnection = Nothing 'Can be a catalog connection.
            'Fill the PortIndex of the Nozzle to be created.
            Dim iPortIndex As Int32
            'Set the behaviour controlled by user flag.
            Dim bBehaviourControlledByUser As Boolean = False
            'Create the ConduitPort.
            Dim oConduitPort As New ConduitPort(sPartNumber, oConnection, iPortIndex, bBehaviourControlledByUser) 
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.ConduitPort.#ctor(System.String,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Int32,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector,System.Boolean)">
            <summary>
            Creates a conduit port for a given part number at the specified location and orientation.
            </summary>
            <param name="strPartNumber">Part number of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="oPos">Position of the nozzle.</param>
            <param name="oNormal">Normal of the nozzle.</param>
            <param name="bBehaviourControlledByUser">Behavior controlled by user flag. True if the user can modify the orientation properties from property page and vice versa.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <example>This example shows how to create a conduit port given part number, connection, port index , position and normal.
            <code>
            'Get the PartNumber of the nozzle to be created.
            Dim sPartNumber As String = Nothing 'e.g., "BA106E 42309-1-E".
            'Get the Connection object in which the conduit port has to be created.
            Dim oConnection as SP3DConnection = Nothing 'Can be a catalog connection.
            'Fill the PortIndex of the nozzle to be created.
            Dim iPortIndex As Int32
            Dim oPosition as new Position(0.0,0.0,0.0) 'Initialize the position.
            Dim oNormalVec as new Vector(0.0,0.0,0.0) 'Initialize the vector.
            'Set the Behaviour Controlled By User flag
            Dim bBehaviourControlledByUser As Boolean = False
            'Create the ConduitPort.
            Dim oConduitPort As New ConduitPort(sPartNumber, oConnection, iPortIndex, oPosition, oNormalVec, bBehaviourControlledByUser)  
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.ConduitPort.#ctor(Ingr.SP3D.ReferenceData.Middle.Part,System.Int32,Ingr.SP3D.Common.Middle.ISystem,System.Boolean)">
            <summary>
            Creates a conduit nozzle for a given part.
            </summary>        
            <param name="oPart">Part of the nozzle to be created.</param>        
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="oParent">Parent system under which the nozzle must be created.</param>
            <param name="bBehaviourControlledByUser">Behavior controlled by user flag. True if the user can modify the orientation properties from property page and vice versa.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <example>This example shows how to create a conduit port given part, index, and parent system.
            <code>
            'Get the Part of the nozzle to be created.
            Dim oPart As Part = Nothing
            'Fill the PortIndex of the nozzle to be created.
            Dim iPortIndex As Int32
            'Get the System object under which the nozzle will be created. 
            Dim oSystem as ISystem = Nothing 'Can be an equipment object.
            'Set the behaviour controlled by user flag.
            Dim bBehaviourControlledByUser As Boolean = False
            'Create the ConduitPort.
            Dim oConduitPort As New ConduitPort(oPart, iPortIndex, oSystem, bBehaviourControlledByUser)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.ConduitPort.#ctor(Ingr.SP3D.ReferenceData.Middle.Part,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Int32,System.Boolean)">
            <summary>
            Creates a conduit nozzle for a given part.
            </summary>        
            <param name="oPart">Part of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="bBehaviourControlledByUser">Behavior controlled by user flag. True if the user can modify the orientation properties from property page and vice versa.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <example>This example shows how to create a conduit port given part, connection and a port index.
            <code>
            'Get the Part of the nozzle to be created.
            Dim oPart As Part = Nothing
            'Get the Connection object in which the conduit port has to be created.
            Dim oConnection as SP3DConnection = Nothing 'can be a catalog connection.
            'Fill the PortIndex of the nozzle to be created.
            Dim iPortIndex As Int32
            'Set the behavior controlled by user flag.
            Dim bBehaviourControlledByUser As Boolean = False
            'Create the ConduitPort.
            Dim oConduitPort As New ConduitPort(oPart, oConnection, iPortIndex, bBehaviourControlledByUser)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.ConduitPort.#ctor(Ingr.SP3D.ReferenceData.Middle.Part,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Int32,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector,System.Boolean)">
            <summary>
            Creates a conduit port for a given part at the specified location and orientation.
            </summary>
            <param name="oPart">Part of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="oPos">Position of the nozzle.</param>
            <param name="oNormal">Normal of the nozzle.</param>
            <param name="bBehaviourControlledByUser">Behavior controlled by user flag. True if the user can modify the orientation properties from property page and vice versa.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <example>This example shows how to create a conduitport given part, connection, port index, position, and normal.
            <code>
            'Get the part of the nozzle to be created
            Dim oPart As Part = Nothing 'Get the part using GetPart method on CatalogBaseHelper class.
            'Get the Connection object in which the conduit port has to be created.
            Dim oConnection as SP3DConnection = Nothing 'Can be a catalog connection.
            'Fill the PortIndex of the nozzle to be created.
            Dim iPortIndex As Int32
            Dim oPosition as new Position(0.0,0.0,0.0) 'Initialize the position.
            Dim oNormalVec as new Vector(0.0,0.0,0.0) 'Initialize the vector.
            'Set the behavior controlled by user flag.
            Dim bBehaviourControlledByUser As Boolean = False
            'Create the ConduitPort.
            Dim oConduitPort As New ConduitPort(oPart, oConnection, iPortIndex, oPosition, oNormalVec, bBehaviourControlledByUser)  
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.ConduitPort.#ctor(Ingr.SP3D.ReferenceData.Middle.PipePortDef,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Boolean)">
            <summary>
            Creates a conduit nozzle for a given port definition.
            </summary>
            <param name="oConduitPortDef">Conduit port definition of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param> 
            <param name="bBehaviourControlledByUser">Behavior controlled by user flag. True if the user can modify the orientation properties from property page and vice versa.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <example>This example shows how to create a conduit port given PortDefinition and connection.
            <code>
            'Get the PortDefinition of the nozzle to be created.
            Dim oConduitPortDef As PipePortDef = Nothing 'Get ConduitPort definition object from the PortDefinitions property on the part.
            'Get the Connection object in which the conduit port has to be created.
            Dim oConnection as SP3DConnection = Nothing 'Can be a catalog connection.
            'Set the behavior controlled by user flag.
            Dim bBehaviourControlledByUser As Boolean = False
            'Create the ConduitPort.
            Dim oConduitPort As New ConduitPort(oConduitPortDef, oConnection), bBehaviourControlledByUser  
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.ConduitPort.#ctor(Ingr.SP3D.Equipment.Middle.ConduitPort)">
            <summary>
            Copy constructor for conduit port.
            </summary>
            <param name="oNozzleToCopy">Nozzle object to be copied.</param>
            <exception cref="T:System.ArgumentNullException">Nozzle passed is null.</exception>
            <example>This example explains how to use copy constructor.
            <code>
            'Create conduit nozzle.
            Dim oNozzle As ConduitPort = Nothing        
            'Call copy constructor.
            Dim oNozzle1 As ConduitPort = Nothing
            oNozzle1 = New ConduitPort(oNozzle)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.ConduitPort.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor for .NET to access this class.
            </summary>
            <param name="oPb">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.ConduitPort.SetUserDefinedName(System.String)">
            <summary>
            Sets the user-defined name of the ConduitPort object.
            </summary>
            <param name="Name">The new name.</param>
            <example>This is an example of the SetUserDefinedName method.
            <code>
            'Create ConduitPort object with its constructor.
            oConduitPort.SetUserDefinedName("Top ConduitPort")
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.ConduitPort.Range">
            <summary>
            Gets the range box representing the range of the ConduitPort.
            </summary>
            <returns>The objects range box.</returns>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.GetRangeException">Unexpected failure while getting the range.</exception>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.ConduitPort.Name">
            <summary>
            Gets the name of the object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.ConduitPort.ID">
            <summary>
            Gets or sets the port ID property value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.ConduitPort.PortIndex">
            <summary>
            Gets or sets the port index property value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.ConduitPort.NCD">
            <summary>
            Gets or sets the nominal conduit diameter property value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.ConduitPort.EndPreparation">
            <summary>
            Gets or sets the end preparation property value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.ConduitPort.ScheduleThickness">
            <summary>
            Gets or sets the schedule thickness property value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.ConduitPort.SchedulePractice">
            <summary>
            Gets or sets the schedule practice property value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.ConduitPort.EndStandard">
            <summary>
            Gets or sets the end standard property value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.ConduitPort.EndPractice">
            <summary>
            Gets or sets the end practice property value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.ConduitPort.HubOutsideDiameter">
            <summary>
            Gets the hub outside diameter property value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.ConduitPort.WallThickness">
            <summary>
            Gets the wall thickness property value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.ConduitPort.HubThickness">
            <summary>
            Gets the hub thickness property value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.ConduitPort.ConduitDiameter">
            <summary>
            Gets the conduit diameter property value.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Middle.ConstraintStatus">
            <summary>
            ContraintStaus Enum values
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.ConstraintStatus.Unknown">
            <summary>
            Status is Unknown
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.ConstraintStatus.overDefined">
            <summary>
            Status of the constraint is overdefined, remove some of the constraints
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.ConstraintStatus.NotConsistent">
            <summary>
            Given constraints are not consistent with each other
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.ConstraintStatus.Solved">
            <summary>
            Constraint status is solved correctly
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Middle.ConstraintType">
            <summary>
            Contraint Type Enums
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.ConstraintType.Mate">
            <summary>
            Mate Constraint Type
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.ConstraintType.Align">
            <summary>
            Align Constraint Type
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.ConstraintType.Connect">
            <summary>
            Connect Constraint Type
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.ConstraintType.Parallel">
            <summary>
            Parallel Constraint type
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.ConstraintType.East_West_Distance">
            <summary>
            Distance Constraint in East-west directions
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.ConstraintType.North_South_Distance">
            <summary>
            Distance Constraint in North-South directions
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.ConstraintType.VerticalDistance">
            <summary>
            Distance constraint in Elevation direction
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Equipment.Middle.ConstraintType.Tangent">
            <summary>
            Tangent Constraint Type
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Middle.ConstraintPrivate">
            <summary>
            Constraint Private class to be used for creating public constraint objects
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.ConstraintPrivate.#ctor">
            <summary>
            Default constructor with no arguments
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.ConstraintPrivate.#ctor(System.Object,Ingr.SP3D.Common.Middle.Services.SP3DConnection)">
            <summary>
            Constructor for the SOM to construct the private object of the component 
            </summary>
            <param name="oMoniker">Object Moniker to wrap</param> 
            <param name="oConnection">SP3DConnection to wrap the BO with respective Private BO</param>  
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.ConstraintPrivate.ConnectPorts(Ingr.SP3D.Common.Middle.IPort,Ingr.SP3D.Common.Middle.BusinessObject,Ingr.SP3D.Common.Middle.IPort,Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Connects 2 nozzles of the Equipments. No checks are made here other than argument exceptions
            </summary>
            <param name="ObjPort1"></param>
            <param name="oParent1"></param>
            <param name="ObjPort2"></param>
            <param name="oParent2"></param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.ConstraintPrivate.CreateConstraint(Ingr.SP3D.Common.Middle.BusinessObject,Ingr.SP3D.Common.Middle.BusinessObject,Ingr.SP3D.Common.Middle.BusinessObject,Ingr.SP3D.Equipment.Middle.ConstraintType,System.Double)">
            <summary>
            Creates the constraint for given constraint type.
            </summary>
            <param name="equipment"></param>
            <param name="primarySurface"></param>
            <param name="referenceSurface"></param>
            <param name="constraintType"></param>
            <param name="offset"></param>        
            <returns></returns>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.ConstraintPrivate.ConstraintStatus">
            <summary>
            To get the ContraintStatus
            </summary>
            <returns>Returns the ContraintStatus</returns>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.ConstraintPrivate.ConstraintType">
            <summary>
            To get the ContraintType
            </summary>
            <returns>ContraintType of the Object</returns>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.ConstraintPrivate.ConstrainedObjects">
            <summary>
            To get the List of ContrainedObjects associated with the given Object
            </summary>
            <returns>Returns the List of ContrainedObjects associated with the given Object</returns>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Middle.PortConstraintPrivate">
            <summary>
            Class to Construct port Constraint object, Clients should not access this class
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.PortConstraintPrivate.#ctor">
            <summary>
            Default constructor with no arguments
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.PortConstraintPrivate.#ctor(System.Object,Ingr.SP3D.Common.Middle.Services.SP3DConnection)">
            <summary>
            Constructor is a public one this will be constructed by SOM        
            </summary>
            <param name="oMoniker">Object Moniker to wrap</param> 
            <param name="oConnection">SP3DConnection to wrap the BO with respective Private BO</param>  
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.PortConstraintPrivate.CreateNozzleOrientation(Ingr.SP3D.Common.Middle.IPort,Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            public method for creating the Orientation object
            </summary>
            <param name="oPort">Port Object</param>
            <param name="oReferenceGeometry">Reference geometry with respect to which the Orientation has to be created</param>        
            <returns>Created Nozzle Orientation Object</returns>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.PortConstraintPrivate.SetReferenceGeometry(Ingr.SP3D.Common.Middle.BusinessObject,Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            To set the Reference geometry
            </summary>
            <param name="oRefGeomUnKnw">Reference Geometry</param>
            <param name="oPort">Port Object to which we need to set reference geometry</param>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.PortConstraintPrivate.PortPlacementType">
            <summary>
            To get the PortPlacementType of the given object.
            </summary>
            <returns>Returns the PortPlacementType of the given object</returns>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Middle.HvacPort">
            <summary>
            HvacPort class represents a standard HvacPort object. 
            Refer to the catalog data documentation for further details on the properties.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.HvacPort.#ctor">
            <summary>
            Internal use only --> Hidden default constructor.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.HvacPort.SetUserDefinedName(System.String)">
            <summary>
            Sets the user-defined name of the HvacPort object.
            </summary>
            <param name="Name">The new name.</param>
            <example>This is an example of the SetUserDefinedName method.
            <code>
            'Create HvacPort object with its constructor.
            oHvacPort.SetUserDefinedName("Top HvacPort")
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.HvacPort.#ctor(System.String,System.Boolean,System.Int32,Ingr.SP3D.Common.Middle.ISystem)">
            <summary>
            Creates an HVAC nozzle for a given part number.
            </summary>        
            <param name="strPartNumber">Part number of the nozzle to be created.</param>
            <param name="bLightWeighGraphics">Boolean for lightweight graphics.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="oParent">Parent system under which the nozzle must be created.</param>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure trying to create the HvacPort.</exception>
            <example>This example explains how to create HVACPort.
            <code>
            Dim sPartNumber As String = Nothing 'Initialize with the required part number; e.g., :- HVACElbowFo.
            Dim bLightWeightGraphics as Boolean 
            Dim iIndex as Int32 'e.g., iIndex = 1.
            Dim oParentSystem as ISystem = Nothing 'Initialize with the respective parent; e.g., :- equipment. 
            Dim oHvacPort As HvacPort = Nothing 
            oHvacPort = new HvacPort(sPartNumber, bLightWeightGraphics, iIndex, oParentSystem)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.HvacPort.#ctor(System.String,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Boolean,System.Int32)">
            <summary>
            Creates an HVAC nozzle for a given part number.
            </summary>        
            <param name="strPartNumber">Part number of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="bLightWeighGraphics">Boolean for lightweight graphics.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null</exception>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure trying to create the HvacPort.</exception>
            <example>This example explains how to create HVACPort.
            <code>
            Dim sPartNumber As String = Nothing 'Initialize with the required part number; e.g.,:- HVACElbowFo.
            Dim oConnection As SP3DConnection = Nothing 'DBConnection property on any BusinessObject would give the connection.
            Dim bLightWeightGraphics as Boolean 
            Dim iIndex as Int32 'e.g.' iIndex = 1.
            Dim oHvacPort As HvacPort = Nothing 
            oHvacPort = new HvacPort(sPartNumber, oConnection, bLightWeightGraphics, iIndex)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.HvacPort.#ctor(Ingr.SP3D.ReferenceData.Middle.Part,System.Boolean,System.Int32,Ingr.SP3D.Common.Middle.ISystem)">
            <summary>
            Creates an HVAC nozzle for a given part and port index.
            </summary>        
            <param name="oPart">Part of the nozzle to be created.</param>
            <param name="bLightWeighGraphics">Boolean for lightweight graphics.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="oParent">Parent system under which the nozzle must be created.</param>    
            <exception cref="T:System.ArgumentNullException">Input argument is null or index is less than or equal to 0.</exception>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure trying to create the HVACPort.</exception>
            <example>This example explains how to create HVACPort.
            <code>
            Dim oPart As Part = Nothing 'Initialize with the required part. GetPart method on CatalogBaseHelper class would return the part.
            Dim bLightWeightGraphics as Boolean 
            Dim iIndex as Int32 'e.g., iIndex = 1
            Dim oParentSystem as ISystem = Nothing  'Initialize with the respective parent; e.g., :- equipment. 
            Dim oHvacPort As HvacPort = Nothing 
            oHvacPort = new HvacPort(oPart, bLightWeightGraphics, iIndex, oParentSystem)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.HvacPort.#ctor(Ingr.SP3D.ReferenceData.Middle.Part,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Boolean,System.Int32)">
            <summary>
            Creates an HVAC nozzle for a given part and port index.
            </summary>        
            <param name="oPart">Part of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="bLightWeighGraphics">Boolean for lightweight graphics.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null</exception>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure trying to create the HVACPort.</exception>
            <example>This example explains how to create HVACPort.
            <code>
            Dim oPart As Part = Nothing 'GetPart method on CatalogBaseHelper class would return the part.
            Dim oConnection As SP3DConnection = Nothing ' DBConnection property on any BusinessObject would give the connection.
            Dim bLightWeightGraphics as Boolean 
            Dim iIndex as Int32 'e.g., iIndex = 1
            Dim oHvacPort As HvacPort = Nothing 
            oHvacPort = new HvacPort(oPart, oConnection, bLightWeightGraphics, iIndex)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.HvacPort.#ctor(System.String,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Boolean,System.Int32,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector,System.Double)">
            <summary>
            Creates an HVAC port for a given part number at the specified location and orientation
            with the predefined length. Length of the port is ignored if the constructed port is a 
            lightweight graphic of the port.
            </summary>
            <param name="strPartNumber">Part number of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="bLightWeighGraphics">Boolean for lightweight graphics.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="oPos">Position of the nozzle.</param>
            <param name="oNormal">Normal of the nozzle.</param>
            <param name="dLength">Length of the nozzle; valid only if bLightWeightGraphics = False.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <exception cref="T:System.ArgumentException">Invalid argument; LightWeightGraphics is True but the length is less than 0. </exception>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure trying to create the HVACPort.</exception>
            <example>This example explains how to create HVACPort.
            <code>
            Dim sPartNumber As String = Nothing 'Initialize with the required part number; e.g., :- HVACElbowFo.
            Dim oConnection As SP3DConnection = Nothing ' DBConnection property on any BusinessObject would give the connection.
            Dim bLightWeightGraphics as Boolean 
            Dim iIndex as Int32 'e.g., iIndex = 1
            Dim oPos as new Position(0.0,0.0,0.0) 'Position of the nozzle. Initialize this with proper values.
            Dim oNormal as new Vector(0.0,0.0,0.0) 'Normal of the nozzle. Initialize this with proper values.
            Dim dLength as Double 'Length of the nozzle. Should not be less that 0.0, if bLightWeightGraphics is True.
            Dim oHvacPort As HvacPort = Nothing 
            oHvacPort = new HvacPort(sPartNumber, oConnection, bLightWeightGraphics, iIndex, oPos, oNormal, dLength)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.HvacPort.#ctor(Ingr.SP3D.ReferenceData.Middle.Part,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Boolean,System.Int32,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector,System.Double)">
            <summary>
            Creates an HVAC port for a given part at the specified location and orientation
            with the predefined length. Length of the port is ignored if the constructed port is a 
            lightweight graphic of the port.
            </summary>
            <param name="oPart">Part of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="bLightWeighGraphics">Boolean for lightweight graphics.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="oPos">Position of the nozzle.</param>
            <param name="oNormal">Normal of the nozzle.</param>
            <param name="dLength">Length of the nozzle; valid only if bLightWeightGraphics = False.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <exception cref="T:System.ArgumentException">Invalid argument; LightWeightGraphics is True but the length is less than 0. </exception>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure trying to create the HVACPort.</exception>
            <example>This example explains how to create HVACPort.
            <code>
            Dim oPart As Part = Nothing 'GetPart method on CatalogBaseHelper class would return the part.
            Dim oConnection As SP3DConnection = Nothing 'DBConnection property on any BusinessObject would give the connection.
            Dim bLightWeightGraphics as Boolean 
            Dim iIndex as Int32 'e.g., iIndex = 1
            Dim oPos as new Position(0.0,0.0,0.0) 'position of the nozzle. Initialize this with proper values.
            Dim oNormal as new Vector(0.0,0.0,0.0) 'Normal of the nozzle. Initialize this with proper values.
            Dim dLength as Double 'Length of the nozzle. Should not be less that 0.0 if bLightWeightGraphics is True.
            Dim oHvacPort As HvacPort = Nothing 
            oHvacPort = new HvacPort(oPart, oConnection, bLightWeightGraphics, iIndex, oPos, oNormal, dLength)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.HvacPort.#ctor(Ingr.SP3D.ReferenceData.Middle.HvacPortDef,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Boolean)">
            <summary>
            Creates an HVAC nozzle for a given port definition.
            </summary>
            <param name="oHvacPortDef">HVAC port definition of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="bLightWeighGraphics">Boolean for lightweight graphics.</param>
            <exception cref="T:System.ArgumentException">Input argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure trying to modify the object.</exception>
            <example>This example explains how to create HVACPort.
            <code>
            Dim oHvacPortDef As HvacPortDef = Nothing 'PortDefinitions property on a Part would return the port definitions.
            Dim oConnection As SP3DConnection = Nothing 'DBConnection property on any BusinessObject would give the connection.
            Dim bLightWeightGraphics as Boolean 
            Dim oHvacPort As HvacPort = Nothing 
            oHvacPort = new HvacPort(oHvacPortDef, oConnection, bLightWeightGraphics)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.HvacPort.#ctor(System.String,System.Boolean,System.Int32,Ingr.SP3D.Common.Middle.ISystem,System.Boolean)">
            <summary>
            Creates an HVAC nozzle for a given part number.
            </summary>        
            <param name="strPartNumber">Part number of the nozzle to be created.</param>
            <param name="bLightWeighGraphics">Boolean for lightweight graphics.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="oParent">Parent system under which the nozzle must be created.</param>
            <param name="bBehaviourControlledByUser">Behavior controlled by user flag. True if the user can modify the orientation properties from property page and vice versa.</param>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure trying to create the HVACPort.</exception>
            <example>This example explains how to create HVACPort.
            <code>
            Dim sPartNumber As String = Nothing 'Initialize with the required part number; e.g., :- HVACElbowFo.
            Dim bLightWeightGraphics as Boolean 
            Dim iIndex as Int32 'e.g., iIndex = 1.
            Dim oParentSystem as ISystem = Nothing 'Initialize with the respective parent; e.g., :- equipment. 
             'Set the behavior controlled by user flag.
            Dim bBehaviourControlledByUser As Boolean = False
            Dim oHvacPort As HvacPort = Nothing 
            oHvacPort = new HvacPort(sPartNumber, bLightWeightGraphics, iIndex, oParentSystem, bBehaviourControlledByUser)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.HvacPort.#ctor(System.String,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Creates an HVAC nozzle for a given part number.
            </summary>        
            <param name="strPartNumber">Part number of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="bLightWeighGraphics">Boolean for lightweight graphics.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="bBehaviourControlledByUser">Behavior controlled by user flag. True if the user can modify the orientation properties from property page and vice versa.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null</exception>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure trying to create the HVACPort.</exception>
            <example>This example explains how to create HVACPort.
            <code>
            Dim sPartNumber As String = Nothing 'Initialize with the required part number; e.g.,:- HVACElbowFo.
            Dim oConnection As SP3DConnection = Nothing 'DBConnection property on any BusinessObject would give the connection.
            Dim bLightWeightGraphics as Boolean 
            Dim iIndex as Int32 'e.g.' iIndex = 1.
             'Set the behavior controlled by user flag.
            Dim bBehaviourControlledByUser As Boolean = False
            Dim oHvacPort As HvacPort = Nothing 
            oHvacPort = new HvacPort(sPartNumber, oConnection, bLightWeightGraphics, iIndex, bBehaviourControlledByUser)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.HvacPort.#ctor(Ingr.SP3D.ReferenceData.Middle.Part,System.Boolean,System.Int32,Ingr.SP3D.Common.Middle.ISystem,System.Boolean)">
            <summary>
            Creates an HVAC nozzle for a given part and port index.
            </summary>        
            <param name="oPart">Part of the nozzle to be created.</param>
            <param name="bLightWeighGraphics">Boolean for lightweight graphics.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="oParent">Parent system under which the nozzle must be created.</param>   
            <param name="bBehaviourControlledByUser">Behavior controlled by user flag. True if the user can modify the orientation properties from property page and vice versa</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null or index is less than or equal to 0.</exception>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure trying to create the HVACPort.</exception>
            <example>This example explains how to create HVACPort.
            <code>
            Dim oPart As Part = Nothing 'Initialize with the required part. GetPart method on CatalogBaseHelper class would return the part.
            Dim bLightWeightGraphics as Boolean 
            Dim iIndex as Int32 'e.g., iIndex = 1
            Dim oParentSystem as ISystem = Nothing  'Initialize with the respective parent; e.g., :- equipment. 
             'Set the behavior controlled by user flag.
            Dim bBehaviourControlledByUser As Boolean = False
            Dim oHvacPort As HvacPort = Nothing 
            oHvacPort = new HvacPort(oPart, bLightWeightGraphics, iIndex, oParentSystem, bBehaviourControlledByUser)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.HvacPort.#ctor(Ingr.SP3D.ReferenceData.Middle.Part,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Creates an HVAC nozzle for a given part and port index.
            </summary>        
            <param name="oPart">Part of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="bLightWeighGraphics">Boolean for lightweight graphics.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="bBehaviourControlledByUser">Behavior controlled by user flag. True if the user can modify the orientation properties from property page and vice versa.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure trying to create the HVACPort.</exception>
            <example>This example explains how to create HVACPort.
            <code>
            Dim oPart As Part = Nothing 'GetPart method on CatalogBaseHelper class would return the part.
            Dim oConnection As SP3DConnection = Nothing ' DBConnection property on any BusinessObject would give the connection.
            Dim bLightWeightGraphics as Boolean 
            Dim iIndex as Int32 'e.g., iIndex = 1
             'Set the behavior controlled by user flag.
            Dim bBehaviourControlledByUser As Boolean = False
            Dim oHvacPort As HvacPort = Nothing 
            oHvacPort = new HvacPort(oPart, oConnection, bLightWeightGraphics, iIndex, bBehaviourControlledByUser)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.HvacPort.#ctor(System.String,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Boolean,System.Int32,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector,System.Double,System.Boolean)">
            <summary>
            Creates an HVAC port for a given part number at the specified location and orientation
            with the predefined length. Length of the port is ignored if the constructed port is a 
            lightweight graphic of the port.
            </summary>
            <param name="strPartNumber">Part number of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="bLightWeighGraphics">Boolean for lightweight graphics.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="oPos">Position of the nozzle.</param>
            <param name="oNormal">Normal of the nozzle.</param>
            <param name="dLength">Length of the nozzle; valid only if bLightWeightGraphics = False.</param>
            <param name="bBehaviourControlledByUser">Behavior controlled by user flag. True if the user can modify the orientation properties from property page and vice versa.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null</exception>
            <exception cref="T:System.ArgumentException">Invalid argument. LightWeightGraphics is true but the length is less than 0. </exception>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure trying to create the HVACPort.</exception>
            <example>This example explains how to create HVACPort.
            <code>
            Dim sPartNumber As String = Nothing 'Initialize with the required part number; e.g., :- HVACElbowFo.
            Dim oConnection As SP3DConnection = Nothing ' DBConnection property on any BusinessObject would give the connection.
            Dim bLightWeightGraphics as Boolean 
            Dim iIndex as Int32 'e.g., iIndex = 1
            Dim oPos as new Position(0.0,0.0,0.0) 'Position of the nozzle. Initialize this with proper values.
            Dim oNormal as new Vector(0.0,0.0,0.0) 'Normal of the nozzle. Initialize this with proper values.
            Dim dLength as Double 'Length of the nozzle. Should not be less that 0.0, if bLightWeightGraphics is True.
             'Set the behavior controlled by user flag.
            Dim bBehaviourControlledByUser As Boolean = False
            Dim oHvacPort As HvacPort = Nothing 
            oHvacPort = new HvacPort(sPartNumber, oConnection, bLightWeightGraphics, iIndex, oPos, oNormal, dLength, bBehaviourControlledByUser)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.HvacPort.#ctor(Ingr.SP3D.ReferenceData.Middle.Part,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Boolean,System.Int32,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector,System.Double,System.Boolean)">
            <summary>
            Creates an HVAC port for a given part at the specified location and orientation
            with the predefined length. Length of the port is ignored if the constructed port is a 
            lightweight graphic of the port.
            </summary>
            <param name="oPart">Part of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="bLightWeighGraphics">Boolean for lightweight graphics.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="oPos">Position of the nozzle.</param>
            <param name="oNormal">Normal of the nozzle.</param>
            <param name="dLength">Length of the nozzle; valid only if bLightWeightGraphics = False.</param>
            <param name="bBehaviourControlledByUser">Behavior controlled by user flag. True if the user can modify the orientation properties from property page and vice versa.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <exception cref="T:System.ArgumentException">Invalid argument. LightWeightGraphics is True but the length is less than 0. </exception>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure trying to create the HVACPort.</exception>
            <example>This example explains how to create HVACPort.
            <code>
            Dim oPart As Part = Nothing 'GetPart method on CatalogBaseHelper class would return the part.
            Dim oConnection As SP3DConnection = Nothing 'DBConnection property on any BusinessObject would give the connection.
            Dim bLightWeightGraphics as Boolean 
            Dim iIndex as Int32 'e.g., iIndex = 1
            Dim oPos as new Position(0.0,0.0,0.0) 'position of the nozzle. Initialize this with proper values.
            Dim oNormal as new Vector(0.0,0.0,0.0) 'Normal of the nozzle. Initialize this with proper values.
            Dim dLength as Double 'Length of the nozzle. Should not be less that 0.0 if bLightWeightGraphics is True.
             'Set the behavior controlled by user flag.
            Dim bBehaviourControlledByUser As Boolean = False
            Dim oHvacPort As HvacPort = Nothing 
            oHvacPort = new HvacPort(oPart, oConnection, bLightWeightGraphics, iIndex, oPos, oNormal, dLength, bBehaviourControlledByUser)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.HvacPort.#ctor(Ingr.SP3D.ReferenceData.Middle.HvacPortDef,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Boolean,System.Boolean)">
            <summary>
            Creates an HVAC nozzle for a given port definition.
            </summary>
            <param name="oHvacPortDef">HVAC port definition of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="bLightWeighGraphics">Boolean for lightweight graphics.</param>
            <param name="bBehaviourControlledByUser">Behavior controlled by user flag. True if the user can modify the orientation properties from property page and vice versa.</param>
            <exception cref="T:System.ArgumentException">Input argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure trying to modify the object.</exception>
            <example>This example explains how to create HVACPort.
            <code>
            Dim oHvacPortDef As HvacPortDef = Nothing 'PortDefinitions property on a part would return the port definitions.
            Dim oConnection As SP3DConnection = Nothing 'DBConnection property on any BusinessObject would give the connection.
            Dim bLightWeightGraphics as Boolean 
            Dim oHvacPort As HvacPort = Nothing 
            'Set the behavior controlled by user flag.
            Dim bBehaviourControlledByUser As Boolean = False
            oHvacPort = new HvacPort(oHvacPortDef, oConnection, bLightWeightGraphics, bBehaviourControlledByUser)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.HvacPort.#ctor(Ingr.SP3D.Equipment.Middle.HvacPort)">
            <summary>
            Copy constructor for HVAC port.
            </summary>
            <param name="oNozzleToCopy">Nozzle object to be copied.</param>
            <exception cref="T:System.ArgumentNullException">Nozzle passed is null.</exception>
            <example>This example explains how to use the copy constructor.
            <code>
            'Create the HVAC nozzle.
            Dim oNozzle As HvacPort = Nothing        
            'Call copy constructor.
            Dim oNozzle1 As HvacPort = Nothing
            oNozzle1 = New HvacPort(oNozzle)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.HvacPort.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor for .NET to access this class.
            </summary>
            <param name="oPb">PrivateBusinessObject</param>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.HvacPort.Range">
            <summary>
            Gets the range box representing the range of the HvacPort.
            </summary>
            <returns>The objects range box.</returns>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.GetRangeException">Unexpected failure while getting the range.</exception>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.HvacPort.Name">
            <summary>
            Gets the name of the object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.HvacPort.Length">
            <summary>
            Gets or sets the length of the HVAC nozzle.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.HvacPort.EndPreparation">
            <summary>
            Gets or sets the end preparation property value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.HvacPort.ConnectPortOffset">
            <summary>
            Gets or sets the connect port offset property value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.HvacPort.FlangeWidth">
            <summary>
            Gets or sets the flange width property value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.HvacPort.FlowDirection">
            <summary>
            Gets or sets the flow direction property value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.HvacPort.PortDepth">
            <summary>
            Gets the port depth property value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.HvacPort.PortIndex">
            <summary>
            Gets or sets the port index property value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.HvacPort.Thickness">
            <summary>
            Gets or sets the thickness property value.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Middle.CablePort">
            <summary>
            CablePort class represents the standard CablePort object. 
            Refer to the catalog data documentation for further details on its properties.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.CablePort.#ctor">
            <summary>
            Internal use only --> Hidden default construtor
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.CablePort.#ctor(System.String,System.Int32,Ingr.SP3D.Common.Middle.ISystem)">
            <summary>
            Creates a cable nozzle for a given part number.
            </summary>        
            <param name="strPartNumber">Part number of the nozzle to be created.</param>        
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="oParent">Parent system under which the nozzle must be created.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <example>This example shows how to create the cable port given a part number, port index, and a system parent.
            <code>
            'Get the part number of the nozzle to be created.
            Dim sPartNumber As String = Nothing ' e.g., :- "Receptacle01-E"
            'Fill the PortIndex of the nozzle to be created.
            Dim iPortIndex As Int32 
            'Get the system parent of the nozzle.
            Dim oSystemParent As ISystem = Nothing 'It can be Equipment object.
            'Create the CablePort.
            Dim oCablePort As New CablePort(sPartNumber, iPortIndex, oSystemParent)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.CablePort.#ctor(System.String,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Int32)">
            <summary>
            Creates a cable nozzle for a given part number.
            </summary>        
            <param name="strPartNumber">Part number of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <example>This example shows how to create the cable port given part number, connection, and port index.
            <code>
            'Get the part number of the nozzle to be created.
            Dim sPartNumber As String = Nothing ' e.g. :- "Receptacle01-E"
            'Get the connection object.
            Dim oConnection as SP3DConnection
            set oConnection = nothing ' Can be catalog connection.
            'Fill the PortIndex of the nozzle to be created.
            Dim iPortIndex As Int32 
            'Get the system parent of the nozzle.
            Dim oSystemParent As ISystem = Nothing 'It can be Equipment object.
            'Create the CablePort.
            Dim oCablePort As New CablePort(sPartNumber, oConnection, iPortIndex)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.CablePort.#ctor(System.String,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Int32,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Creates a cable port for a given part number at the specified location and orientation.
            </summary>
            <param name="strPartNumber">Part number of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="oPos">Position of the nozzle.</param>
            <param name="oNormal">Normal of the nozzle.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <example>This example shows how to create the cable port given part number, connection, port index, position, and normal.
            <code>
            'Get the PartNumber of the nozzle to be created.
            Dim sPartNumber As String = Nothing 'e.g. :- "Receptacle01-E"
            'Get the Connection object in which the cable port has to be created.
            Dim oConnection as SP3DConnection = Nothing 'A catalog connection.
            'Fill the PortIndex of the nozzle to be created.
            Dim iPortIndex As Int32
            'Get the position of the nozzle.
            Dim oPosition As New Position(0, 0, 0)
            'Get the orientation of the nozzle.
            Dim oNormalVector As New Vector(0, 0, 0)
            'Create the CablePort.
            Dim oCablePort As New CablePort(sPartNumber, oConnection, iPortIndex, oPosition, oNormalVector)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.CablePort.#ctor(Ingr.SP3D.ReferenceData.Middle.Part,System.Int32,Ingr.SP3D.Common.Middle.ISystem)">
            <summary>
            Creates a cable nozzle for a given part.
            </summary>        
            <param name="oPart">Part of the nozzle to be created.</param>        
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="oParent">Parent system under which the nozzle must be created.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <example>This example shows how to create the cable port given part, port index, and a system parent.
            <code>
            'Get the part of the nozzle to be created.
            Dim sPart As String = Nothing 
            'Fill the PortIndex of the nozzle to be created.
            Dim iPortIndex As Int32 
            'Get the system parent of the nozzle.
            Dim oSystemParent As ISystem = Nothing 'It can be Equipment object.
            'Create the CablePort.
            Dim oCablePort As New CablePort(sPart, iPortIndex, oSystemParent)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.CablePort.#ctor(Ingr.SP3D.ReferenceData.Middle.Part,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Int32)">
            <summary>
            Creates a cable nozzle for a given part.
            </summary>        
            <param name="oPart">Part of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <example>This example shows how to create the cable port given part, connection, and a port index.
            <code>
            'Get the part of the nozzle to be created.
            Dim oPart As Part = Nothing
            'Get the Connection object in which the cable port has to be created.
            Dim oConnection as SP3DConnection = Nothing 'Can be a catalog connection.
            'Fill the PortIndex of the nozzle to be created.
            Dim iPortIndex As Int32
            'Create the CablePort.
            Dim oCablePort As New CablePort(oPart, oConnection, iPortIndex)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.CablePort.#ctor(Ingr.SP3D.ReferenceData.Middle.Part,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Int32,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Creates a cable port for a given part at the specified location and orientation.
            </summary>
            <param name="oPart">Part of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="oPos">Position of the nozzle.</param>
            <param name="oNormal">Normal of the nozzle.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <example>This example shows how to create the cable port given part, port index, position, and normal.
            <code>
            'Get the Part of the nozzle to be created.
            Dim oPart As Part = Nothing
            'Get the Connection object in which the cable port has to be created.
            Dim oModelConn as SP3DConnection = Nothing
            'Fill the PortIndex of the nozzle to be created.
            Dim iPortIndex As Int32
            'Get the position of the nozzle.
            Dim oPosition As New Position(0, 0, 0)
            'Get the orientation of the nozzle.
            Dim oNormalVector As New Vector(0, 0, 0)
            'Create the CablePort.
            Dim oCablePort As New CablePort(oPart, oModelConn, iPortIndex, oPosition, oNormalVector)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.CablePort.#ctor(Ingr.SP3D.ReferenceData.Middle.ElectricalPortDef,Ingr.SP3D.Common.Middle.Services.SP3DConnection)">
            <summary>
            Creates a cable nozzle for a given port definition.
            </summary>
            <param name="oCablePortDef">Electrical port definition of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <exception cref="T:System.ArgumentException">Input argument is null.</exception>
            <example>This example shows how to create the cable port given CablePortDef and a connection.
            <code>
            'Get the PortDefinition object.
            Dim oCablePortDef As ElectricalPortDef = Nothing
            'Get the Connection object in which the cable port has to be created.
            Dim oConnection as SP3DConnection = Nothing 'e.g., catalog connection.
            'Create the CablePort.
            Dim oCablePort As New CablePort(oCablePortDef, oConnection)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.CablePort.#ctor(System.String,System.Int32,Ingr.SP3D.Common.Middle.ISystem,System.Boolean)">
            <summary>
            Creates a cable nozzle for a given part number.
            </summary>        
            <param name="strPartNumber">Part number of the nozzle to be created.</param>        
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="oParent">Parent system under which the nozzle must be created.</param>
            <param name="bBehaviourControlledByUser">Behavior controlled by user flag. True if the user can modify the orientation properties from property page and vice versa.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <example>This example shows how to create the cable port given part number, port index, and a system parent.
            <code>
            'Get the part number of the nozzle to be created.
            Dim sPartNumber As String = Nothing ' e.g., :- "Receptacle01-E"
            'Fill the PortIndex of the Nozzle to be created.
            Dim iPortIndex As Int32 
            'Get the system parent of the nozzle.
            Dim oSystemParent As ISystem = Nothing 'it can be Equipment object.
            'Set the behavior controlled by user flag.
            Dim bBehaviourControlledByUser As Boolean = False
            'Create the CablePort.
            Dim oCablePort As New CablePort(sPartNumber, iPortIndex, oSystemParent , bBehaviourControlledByUser)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.CablePort.#ctor(System.String,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Int32,System.Boolean)">
            <summary>
            Creates a cable nozzle for a given part number.
            </summary>        
            <param name="strPartNumber">Part number of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="bBehaviourControlledByUser">Behavior controlled by user flag. True if the user can modify the orientation properties from property page and vice versa.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <example>This example shows how to create the cable port given part number, connection, and port index.
            <code>
            'Get the part number of the nozzle to be created.
            Dim sPartNumber As String = Nothing ' e.g., :- "Receptacle01-E"
            'Get the connection object.
            Dim oConnection as SP3DConnection
            set oConnection = nothing ' can be Catalog connection.
            'Fill the PortIndex of the nozzle to be created.
            Dim iPortIndex As Int32 
            'Get the system parent of the nozzle.
            Dim oSystemParent As ISystem = Nothing 'It can be Equipment object.
            'Set the behavior controlled by user flag.
            Dim bBehaviourControlledByUser As Boolean = False
            'Create the CablePort.
            Dim oCablePort As New CablePort(sPartNumber, oConnection, iPortIndex , bBehaviourControlledByUser)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.CablePort.#ctor(System.String,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Int32,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector,System.Boolean)">
            <summary>
            Creates a cable port for a given part number at the specified location and orientation.
            </summary>
            <param name="strPartNumber">Part number of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="oPos">Position of the nozzle.</param>
            <param name="oNormal">Normal of the nozzle.</param>
            <param name="bBehaviourControlledByUser">Behavior controlled by user flag. True if the user can modify the orientation properties from property page and vice versa.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <example>This example shows how to create the cable port given part number, connection, port index, position, and normal.
            <code>
            'Get the PartNumber of the nozzle to be created.
            Dim sPartNumber As String = Nothing 'e.g., :- "Receptacle01-E"
            'Get the Connection object in which the cable port has to be created.
            Dim oConnection as SP3DConnection = Nothing 'a catalog connection.
            'Fill the PortIndex of the nozzle to be created.
            Dim iPortIndex As Int32
            'Get the position of the nozzle.
            Dim oPosition As New Position(0, 0, 0)
            'Get the orientation of the nozzle.
            Dim oNormalVector As New Vector(0, 0, 0)
            'Set the behavior controlled by user flag.
            Dim bBehaviourControlledByUser As Boolean = False
            'Create the CablePort.
            Dim oCablePort As New CablePort(sPartNumber, oConnection, iPortIndex, oPosition, oNormalVector , bBehaviourControlledByUser)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.CablePort.#ctor(Ingr.SP3D.ReferenceData.Middle.Part,System.Int32,Ingr.SP3D.Common.Middle.ISystem,System.Boolean)">
            <summary>
            Creates a cable nozzle for a given part.
            </summary>        
            <param name="oPart">Part of the nozzle to be created.</param>        
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="oParent">Parent system under which the nozzle must be created.</param>
            <param name="bBehaviourControlledByUser">Behavior controlled by user flag. True if the user can modify the orientation properties from property page and vice versa.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <example>This example shows how to create the cable port given part, port index, and a system parent.
            <code>
            'Get the part of the nozzle to be created.
            Dim sPart As String = Nothing 
            'Fill the PortIndex of the nozzle to be created.
            Dim iPortIndex As Int32 
            'Get the system parent of the nozzle.
            Dim oSystemParent As ISystem = Nothing 'It can be Equipment object.
            'Set the behavior controlled by user flag.
            Dim bBehaviourControlledByUser As Boolean = False
            'Create the CablePort.
            Dim oCablePort As New CablePort(sPart, iPortIndex, oSystemParent , bBehaviourControlledByUser)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.CablePort.#ctor(Ingr.SP3D.ReferenceData.Middle.Part,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Int32,System.Boolean)">
            <summary>
            Creates a cable nozzle for a given part.
            </summary>        
            <param name="oPart">Part of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="bBehaviourControlledByUser">Behavior controlled by user flag. True if the user can modify the orientation properties from property page and vice versa.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <example>This example shows how to create the cable port given part, connection and a port index.
            <code>
            'Get the Part of the nozzle to be created.
            Dim oPart As Part = Nothing
            'Get the Connection object in which the cable port has to be created.
            Dim oConnection as SP3DConnection = Nothing 'Can be a catalog connection.
            'Fill the PortIndex of the nozzle to be created.
            Dim iPortIndex As Int32
            'Set the behavior controlled by user flag.
            Dim bBehaviourControlledByUser As Boolean = False
            'Create the CablePort.
            Dim oCablePort As New CablePort(oPart, oConnection, iPortIndex , bBehaviourControlledByUser)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.CablePort.#ctor(Ingr.SP3D.ReferenceData.Middle.Part,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Int32,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector,System.Boolean)">
            <summary>
            Creates a cable port for a given part at the specified location and orientation.
            </summary>
            <param name="oPart">Part of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="m_Index">Port index of the nozzle to be created.</param>
            <param name="oPos">Position of the nozzle.</param>
            <param name="oNormal">Normal of the nozzle.</param>
            <param name="bBehaviourControlledByUser">Behavior controlled by user flag. True if the user can modify the orientation properties from property page and vice versa.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <example>This example shows how to create the cable port given part, port index, position, and normal.
            <code>
            'Get the Part of the nozzle to be created.
            Dim oPart As Part = Nothing
            'Get the Connection object in which the cable port has to be created.
            Dim oModelConn as SP3DConnection = Nothing
            'Fill the PortIndex of the nozzle to be created.
            Dim iPortIndex As Int32
            'Get the position of the nozzle.
            Dim oPosition As New Position(0, 0, 0)
            'Get the Orientation of the nozzle.
            Dim oNormalVector As New Vector(0, 0, 0)
            'Set the behavior controlled by user flag.
            Dim bBehaviourControlledByUser As Boolean = False
            'Create the CablePort.
            Dim oCablePort As New CablePort(oPart, oModelConn, iPortIndex, oPosition, oNormalVector ,bBehaviourControlledByUser)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.CablePort.#ctor(Ingr.SP3D.ReferenceData.Middle.ElectricalPortDef,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Boolean)">
            <summary>
            Creates a cable nozzle for a given port definition.
            </summary>
            <param name="oCablePortDef">Electrical port definition of the nozzle to be created.</param>
            <param name="oConnection">Connection object.</param>
            <param name="bBehaviourControlledByUser">Behavior controlled by user flag. True if the user can modify the orientation properties from property page and vice versa.</param>
            <exception cref="T:System.ArgumentException">Input argument is null.</exception>
            <example>This example shows how to create the cable port given CablePortDef and a Connection.
            <code>
            'Get the PortDefinition object.
            Dim oCablePortDef As ElectricalPortDef = Nothing
            'Get the Connection object in which the cable port has to be created.
            Dim oConnection as SP3DConnection = Nothing 'e.g., catalog connection.
            'Set the behavior controlled by user flag.
            Dim bBehaviourControlledByUser As Boolean = False
            'Create the CablePort.
            Dim oCablePort As New CablePort(oCablePortDef, oConnection , bBehaviourControlledByUser)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.CablePort.#ctor(Ingr.SP3D.Equipment.Middle.CablePort)">
            <summary>
            Copy constructor for cable port.
            </summary>
            <param name="oNozzleToCopy">Nozzle object to be copied.</param>
            <exception cref="T:System.ArgumentNullException">Nozzle passed is null.</exception>
            <example>This example explains how to use the Copy constructor.
            <code>
            'Create cable nozzle.
            Dim oNozzle As CablePort = Nothing        
            'Call copy constructor.
            Dim oNozzle1 As CablePort = Nothing
            oNozzle1 = New CablePort(oNozzle)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.CablePort.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor for .NET to access this class.
            </summary>
            <param name="oPb">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.CablePort.SetUserDefinedName(System.String)">
            <summary>
            Sets the user-defined name of the CablePort object.
            </summary>
            <param name="Name">The new name.</param>
            <example>This is an example of the SetUserDefinedName method.
            <code>
            'Create CablePort object with its constructor.
            oCablePort.SetUserDefinedName("Top CablePort")
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.CablePort.Range">
            <summary>
            Gets the range box representing the range of the CablePort.
            </summary>
            <returns>The objects range box.</returns>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.GetRangeException">Unexpected failure while getting the range.</exception>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.CablePort.Name">
            <summary>
            Gets the name of the object.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Middle.EquipmentChildrenCategory">
            <summary>
            Enum representing the Category of the EquipmentChildren
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Middle.EquipChildrenType">
            <summary>
            Enum representing the Type of the EquipmentChildren
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Middle.EquipErrorResults">
            <summary>
            Enum representing different errors returned from Equipment COM business object
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Middle.EqpPrivateBO">
            <summary>
            EqpPrivateBO is a wrapper on Equipment/EquipmentComponent COM business object
            </summary> 
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EqpPrivateBO.#ctor">
            <summary>
            Default constructor with no arguments
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EqpPrivateBO.#ctor(System.Object,Ingr.SP3D.Common.Middle.Services.SP3DConnection)">
            <summary>
            Constructor for the SOM to construct the private object of the component
            </summary>
            <param name="oMoniker">Object Moniker to wrap</param> 
            <param name="oConnection">SP3DConnection to wrap the business object with respective Private business object</param>  
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EqpPrivateBO.CreateSmartEquipment(Ingr.SP3D.Common.Middle.BusinessObject,Ingr.SP3D.Common.Middle.ISystem,System.Boolean)">
            <summary>
            Creates the SmartEquipment from the Part, adds it under the given ParentSystem and returns the created object.
            </summary>
            <param name="oPart">Catalog part object from which Equipment is created</param>         
            <param name="oParentSystem">Parent system under which the Equipment is created</param>
            <param name="bCreateMembers">boolean Value to create the members when Equipment is created</param>
            <returns>Created Equipment Object</returns>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EqpPrivateBO.CreateEquipmentComponent(Ingr.SP3D.Common.Middle.BusinessObject,Ingr.SP3D.Common.Middle.ISystem,System.Boolean)">
            <summary>
            Creates the EquipmentComponent from the Part, adds it under the given Equipment and returns the created object.
            </summary>
            <param name="oPart">Catalog part number from which Equipment Component is created</param>
            <param name="oParentSystem">Parent system under which the Equipment Component is created</param>
            <param name="bCreateMembers">Allow the Creation of members when parent gets created</param>
            <returns>Created Equipment Component</returns>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EqpPrivateBO.CreateEquipmentComponent(System.String,Ingr.SP3D.Common.Middle.ISystem)">
            <summary>
            Creates an Equipment Component as a child of given Equipment and given a part number.
            </summary>
            <param name="strPartNumber">Part number of the Equipment Component</param>
            <param name="oParentSys">Parent system under which the Equipment Component has to be Created</param>
            <returns>Created Equipment Component</returns>
            <exception cref="F:Ingr.SP3D.Equipment.Middle.EquipErrorResults.E_NOPARTFOUND">Part not found in the Catalog Databse</exception>
            <exception cref="F:Ingr.SP3D.Equipment.Middle.EquipErrorResults.E_INVALIDPARENT">Could not interpret the System Parent Passed</exception>
            <exception cref="F:Ingr.SP3D.Equipment.Middle.EquipErrorResults.E_ACCESSDENIED">Don't have permissions to create Equipment Component</exception>
            <exception cref="F:Ingr.SP3D.Equipment.Middle.EquipErrorResults.E_EQUIPFACTORY_SOC_SYMBOL_UNAVAILABLE">Symbol dll is not available or not registered properly</exception>
            <exception cref="F:Ingr.SP3D.Equipment.Middle.EquipErrorResults.E_EQUIPFACTORY_SOC_SYMCADNOTFOUND">Symbol / Custom Assembly Definition not registered properly</exception>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EqpPrivateBO.CreateDesignEquipmentOrComponent(Ingr.SP3D.Common.Middle.BusinessObject,Ingr.SP3D.Common.Middle.ISystem,System.Boolean)">
            <summary>
            Creates either a Design Equipment or Design Equipment Component
            </summary>
            <param name="oPartClass"></param>
            <param name="oParentSys"></param>
            <param name="bEquipComponent"></param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EqpPrivateBO.CreateSmartEquipmentObject(Ingr.SP3D.Common.Middle.ISystem)">
            <summary>
            Creates the SmartEquipment Object, adds it under the given ParentSystem and returns the created object.
            </summary>             
            <param name="oParentSystem">Parent system under which the Equipment is created</param>        
            <returns>Created Equipment Object</returns>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EqpPrivateBO.CreateEquipmentComponentObject(Ingr.SP3D.Common.Middle.ISystem)">
            <summary>
            Creates the EquipmentComponent objects, adds it under the given Equipment and returns the created object.
            </summary>        
            <param name="oParentSystem">Parent system under which the Equipment Component is created</param>        
            <returns>Created Equipment Component</returns>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EqpPrivateBO.EvaluateEquipmentComponentObject(Ingr.SP3D.Common.Middle.BusinessObject,System.Object)">
            <summary>
            Evaluates the EquipmentComponent from the Part and returns the created object and creates the assembly members        
            </summary>
            <param name="oPart">Catalog part number from which Equipment Component is created</param>
            <param name="oEquipComponent">Equipment component which needs to evaluated.</param>        
            <returns>Evaluated Equipment Component</returns>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EqpPrivateBO.GetDefaultNameRule(System.String)">
            <summary>
            Gets the default name rule
            </summary>
            <param name="strEntityName">Entity name</param>
            <returns>IJDNameRuleHolder Object</returns>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EqpPrivateBO.AssignMembersViaCAD(System.Object,Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Assigns the defined CAD members in equipment to Equipment Object via updating the Smart occurrences.
            This method is hidden and not exposed to the automation
            </summary>
            <param name="oEqpCOMObj">Com Object that is constructed without members of Equipment</param>
            <param name="oEquipPart">Catalog part of Equipment</param>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EqpPrivateBO.GetPosition(System.Double@,System.Double@,System.Double@)">
            <summary>
            Returns the origin of the Equipment or EquipmentComponent.
            </summary>
            <param name="x">Equipment / Equipment Components X - Coordinate of the Position</param>
            <param name="y">Equipment / Equipment Components Y - Coordinate of the Position</param>
            <param name="z">Equipment / Equipment Components Z - Coordinate of the Position</param>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EqpPrivateBO.SetPosition(System.Double,System.Double,System.Double)">
            <summary>
            Sets the position/origin of the Equipment/EquipmentComponent
            </summary>
            <param name="x">Equipment / Equipment Components X - Coordinate of the Position</param>
            <param name="y">Equipment / Equipment Components Y - Coordinate of the Position</param>
            <param name="z">Equipment / Equipment Components Z - Coordinate of the Position</param>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EqpPrivateBO.IsCatalogEquipment">
            <summary>
            Checks if Equipment is CatalogEquipment
            </summary>
            <returns>If Equipment is CatalogEquipment Returns True otherwise returns False</returns>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EqpPrivateBO.AddChildMember(Ingr.SP3D.Common.Middle.ISystemChild)">
            <summary>
            Adds the ChildMember to the Equipment/EquipmentComponent
            </summary>
            <param name="oChild">Child member which is to be added as a child to Equipment / Equipment Component</param>
            <exception cref="T:System.ArgumentNullException">Null parameter passed</exception>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EqpPrivateBO.GetConnectablePorts(Ingr.SP3D.Common.Middle.PortType)">
            <summary>
            Returns the collection of ConnectablePorts of the given PortType on Equipment or EquipmentComponent.
            </summary>
            <param name="eType">Type of port</param>
            <returns>Collection of ConnectablePorts</returns>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">"Invalid Port type passed as an argument</exception>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EqpPrivateBO.GetConnectedPorts(Ingr.SP3D.Common.Middle.PortType)">
            <summary>
            Returns the Collection of ConnectedPorts of the given PortType on Equipment or EquipmentComponent.
            </summary>
            <param name="eType">Type of Port</param>
            <returns>Collection of ConnectedPorts</returns>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EqpPrivateBO.GetPorts(Ingr.SP3D.Common.Middle.PortType)">
            <summary>
            Returns the Collection of Ports of the given PortType on Equipment or EquipmentComponent.
            </summary>
            <param name="eType">Type of port</param>
            <returns>Collection of Ports</returns>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">"Invalid Port type passed as an argument</exception>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EqpPrivateBO.IsConnectedTo(Ingr.SP3D.Common.Middle.IConnectable,System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.IConnection}@)">
            <summary>
            Checks if the Equipment/EquipmentComponent is Connected through any of its ports 
            </summary>
            <param name="oConnectable">Connectable Object</param>
            <param name="oConnectionEnum">List Of Objects connected to the given Equipment through any of its port</param>
            <returns>Boolean to represent if Equipment is connected</returns>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EqpPrivateBO.CanPortbeDeleted(Ingr.SP3D.Common.Middle.IDistributionPort)">
            <summary>
            Checks if the Port passed can be deleted
            </summary>
            <param name="oPort">The port object on which the check for CanBeDeleted has to be done</param>
            <returns>Can the Port be Deleted</returns>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EqpPrivateBO.Transform(Ingr.SP3D.Common.Middle.Matrix4X4)">
            <summary>
            Transforms the Equipment/EquipmentComponent with the given T4X4
            </summary>
            <param name="oT4X4">Transformation matrix by which the Equipment / Equipment component has to be transformed</param>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EqpPrivateBO.GetRange">
            <summary>
            Returns the rangeBox of the Equipment or EquipmentComponent.
            </summary>
            <returns>RangeBox of the Equipment/EquipmentComponent</returns>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EqpPrivateBO.IsAssemblyMember">
            <summary>
            Checks if the EquipmentComponent is an Assembly Member
            </summary>        
            <returns>True if the Equipment Component is an Assembly Member otherwise returns False</returns>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.EqpPrivateBO.Matrix">
            <summary>
            Returns or sets the matrix of the Equipment or EquipmentComponent.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.EqpPrivateBO.Origin">
            <summary>
            Returns or sets the origin of the Equipment or EquipmentComponent.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.EqpPrivateBO.XAxis">
            <summary>
            Returns or sets the X-Axis of the Equipment or EquipmentComponent coordinate system.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.EqpPrivateBO.YAxis">
            <summary>
            Returns or sets the Y-Axis of the Equipment or EquipmentComponent coordinate system.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.EqpPrivateBO.ZAxis">
            <summary>
            Returns or sets the Z-Axis of the Equipment or EquipmentComponent coordinate system.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.EqpPrivateBO.ModelPOM">
            <summary>
            To get the pom of Model database
            </summary>
            <returns>SP3DConnection object which is a connection to Model database</returns>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Middle.EquipmentComponent">
            <summary>
            Class to create the equipment component in the .NET environment. This class supports all the methods and
            properties that clients can use to create or modify the equipment component.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EquipmentComponent.#ctor">
            <summary>
            Internal use only --> Hidden default constructor.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EquipmentComponent.#ctor(Ingr.SP3D.Common.Middle.BusinessObject,Ingr.SP3D.Equipment.Middle.Equipment)">
            <summary>
            Constructs an Equipment Component based on the EquipmentComponent part provided under a given Equipment in a given SP3D connection.
            </summary>
            <param name="oPart">Catalog part object from which Equipment Component is created.</param>
            <param name="oEquipment">Equipment under which the component has to be created.</param>
            <exception cref="T:System.ArgumentNullException">Input argument(Catalog part or Equipment) is null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EquipmentComponent.#ctor(System.String,Ingr.SP3D.Equipment.Middle.Equipment)">
            <summary>
            Constructs an equipment component of the specified part under a given equipment.
            </summary>
            <param name="strPartNumber">Catalog part number from which the equipment is created.</param>
            <param name="oEquipment">Equipment under which the equipment is created.</param>
            <exception cref="T:System.ArgumentNullException">Catalog part or equipment passed is null.</exception>
            <example>This example explains how to create EquipmentComponent given part number and the equipment.
            <code>
            'Create Equipment.
            Dim sPartNumber as String = Nothing 'Initialize with the required Part Number; e.g., :- "HDrumAsm".
            Dim oEquip1 As Equipment = Nothing 'Get the required equipment.
            Dim oEquipComponent as EquipmentComponent = Nothing
            oEquipComponent = New EquipmentComponent(sPartNumber, oEquip1)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EquipmentComponent.#ctor(Ingr.SP3D.ReferenceData.Middle.EquipmentComponentPart,Ingr.SP3D.Equipment.Middle.Equipment)">
            <summary>
            Constructs an equipment component based on the provided equipment component part.
            </summary>
            <param name="oEqpCompPart">Catalog part object from which the equipment component is created.</param>
            <param name="oEquipment">Equipment under which the component will be created.</param>
            <exception cref="T:System.ArgumentNullException">Input argument (Catalog part or equipment) is null.</exception>
            <example>This example explains how to create EquipmentComponent given EquipmentComponent part and the equipment.
            <code>
            'Create Equipment.
            Dim oEquipmentPart as EquipmentComponentPart = Nothing 'Initialize with the required part.
            Dim oEquip1 As Equipment = Nothing 'Get the required equipment.
            Dim oEquipComponent as EquipmentComponent = Nothing
            oEquipComponent = New EquipmentComponent(oEquipmentPart, oEquip1)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EquipmentComponent.#ctor(Ingr.SP3D.ReferenceData.Middle.PartClass,Ingr.SP3D.Equipment.Middle.Equipment)">
            <summary>
            Constructs an equipment component under an equipment given a part class.
            </summary>
            <param name="oPartClass">Catalog part class object from which a design equipment component is created.</param>
            <param name="oEquipment">Parent equipment under which the component is created.</param>
            <exception cref="T:System.ArgumentNullException">Input argument (PartClass or equipment) is null.</exception>
            <example>This example explains how to create EquipmentComponent given part class and the equipment.
            <code>
            'Create Equipment.
            Dim oPartClass as PartClass = Nothing 'Initialize with the required part class. Part class can be obtained using the GetPartClass method on CatalogBaseHelper class.
            Dim oEquip1 As Equipment = Nothing 'Get the required equipment.
            Dim oEquipComponent as EquipmentComponent = Nothing
            oEquipComponent = New EquipmentComponent(oPartClass, oEquip1)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EquipmentComponent.#ctor(System.String,Ingr.SP3D.Equipment.Middle.Equipment,System.Boolean)">
            <summary>
            Constructs an equipment component of the specified part under a given equipment.
            </summary>
            <param name="strPartNumber">Catalog part number from which the equipment is created.</param>
            <param name="oEquipment">Equipment under which the equipment is created.</param>
            <param name="bBehaviourControlledByUser">Behavior controlled by a user flag. True if the orientation properties can be modified from the property page and vice versa.</param>
            <exception cref="T:System.ArgumentNullException">Catalog part or equipment is null.</exception>
            <example>This example explains how to create EquipmentComponent given part number and the equipment.
            <code>
            'Create Equipment.
            Dim sPartNumber as String = Nothing 'Initialize with the required part number; e.g., :- "HDrumAsm".
            Dim oEquip1 As Equipment = Nothing 'Get the required equipment.
            Dim oEquipComponent as EquipmentComponent = Nothing
            'Set the behavior controlled by user flag.
            Dim bBehaviourControlledByUser As Boolean = False
            oEquipComponent = New EquipmentComponent(sPartNumber, oEquip1,bBehaviourControlledByUser)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EquipmentComponent.#ctor(Ingr.SP3D.ReferenceData.Middle.EquipmentComponentPart,Ingr.SP3D.Equipment.Middle.Equipment,System.Boolean)">
            <summary>
            Constructs an equipment component based on the provided equipment component part.
            </summary>
            <param name="oEqpCompPart">Catalog part object from which the equipment component is created.</param>
            <param name="oEquipment">Equipment under which the component will be created.</param>
            <param name="bBehaviourControlledByUser">Behavior controlled by a user flag. True if the orientation properties can be modified from the property page and vice versa</param>
            <exception cref="T:System.ArgumentNullException">Input argument (Catalog part or equipment) is null.</exception>
            <example>This example explains how to create EquipmentComponent given EquipmentComponent part and the equipment.
            <code>
            'Create Equipment.
            Dim oEquipmentPart as EquipmentComponentPart = Nothing 'Initialize with the required part.
            Dim oEquip1 As Equipment = Nothing 'Get the required equipment.
            Dim oEquipComponent as EquipmentComponent = Nothing
            'Set the behavior controlled by user flag.
            Dim bBehaviourControlledByUser As Boolean = False
            oEquipComponent = New EquipmentComponent(oEquipmentPart, oEquip1, bBehaviourControlledByUser)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EquipmentComponent.#ctor(Ingr.SP3D.ReferenceData.Middle.PartClass,Ingr.SP3D.Equipment.Middle.Equipment,System.Boolean)">
            <summary>
            Constructs an equipment component under an equipment given a part class.
            </summary>
            <param name="oPartClass">Catalog part class object from which a design equipment component is created.</param>
            <param name="oEquipment">Parent equipment under which the component is created.</param>
            <param name="bBehaviourControlledByUser">Behavior controlled by a user flag. True if the orientation properties can be modified from the property page and vice versa.</param>
            <exception cref="T:System.ArgumentNullException">Input argument (PartClass or Equipment) is null.</exception>
            <example>This example explains how to create EquipmentComponent given part class and the equipment.
            <code>
            'Create Equipment.
            Dim oPartClass as PartClass = Nothing 'Initialize with the required part class. Part class can be obtained using the GetPartClass method on CatalogBaseHelper class.
            Dim oEquip1 As Equipment = Nothing 'Get the required equipment.
            'Set the behavior controlled by user flag.
            Dim bBehaviourControlledByUser As Boolean = False
            Dim oEquipComponent as EquipmentComponent = Nothing
            oEquipComponent = New EquipmentComponent(oPartClass, oEquip1 ,bBehaviourControlledByUser)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EquipmentComponent.#ctor(Ingr.SP3D.Equipment.Middle.EquipmentComponent)">
            <summary>
            Copy constructor for the equipment component.
            </summary>
            <param name="oEquipmentCompToCopy">Equipment component object to be copied.</param>
            <exception cref="T:System.ArgumentNullException">Given equipment is null.</exception>
            <example>This example explains how to use copy constructor.
            <code>
            'Create Equipment component.
            Dim oEquipComp As EquipmentComponent = Nothing
            Dim oEquipComp1 As EquipmentComponent = Nothing
            'Call copy constructor.
            oEquipComp1 = New EquipmentComponent(oEquipComp)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EquipmentComponent.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor for .NET to access this class.
            </summary>
            <param name="oPb">Private Business object</param>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EquipmentComponent.AddSystemChild(Ingr.SP3D.Common.Middle.ISystemChild)">
            <summary>
            Adds the given object as a child to the equipment component.
            </summary>
            <param name="oChild">Objects implementing ISystemChild interface.</param>
            <exception cref="T:System.ArgumentNullException">Passed in child object is null </exception>
            <example>This example explains how to use AddSystemChild on an Equipment Component object.
            <code>
            Dim oSystemChild as ISystemChild = Nothing 'Get the SystemChild object. 
            Dim oEquipComponent1 As EquipmentComponent = Nothing 'Get the equipment component object.
            oEquipComponent1.AddSystemChild(oSystemChild)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EquipmentComponent.GetConnectablePorts(Ingr.SP3D.Common.Middle.PortType)">
            <summary>
            Gets the collection of ports given a port type that is free to be connected.
            </summary>
            <param name="eType">PortType enumerator.</param>
            <returns>Connectable ports collection.</returns>
            <exception cref="T:System.ArgumentNullException">Passed in PortType is invalid.</exception>
            <remarks>
            <list type="table">
               <listheader>
                   <term>PortType</term>
                   <description>Description</description>
               </listheader>
               <item>
                   <term>All = 1</term>
                   <description>All port type.</description>
               </item>    
               <item>
                   <term>Piping = 2</term>
                   <description>Piping port type.</description>
               </item>
               <item>
                   <term>Duct = 3</term>
                   <description>Duct port type.</description>
               </item>
               <item>
                   <term>Cable = 4</term>
                   <description>Cable port type.</description>
               </item>
               <item>
                   <term>Foundation = 5</term>
                   <description>Foundation port type.</description>
               </item>
               <item>
                   <term>Cabletray = 6</term>
                   <description>Cabletray port type.</description>
               </item>
               <item>
                   <term>Conduit = 7</term>
                   <description>Conduit port type.</description>
               </item>
               <item>
                   <term>Edge = 8</term>
                   <description>Edge port type.</description>
               </item>
               <item>
                   <term>Face = 9</term>
                   <description>Face port type.</description>
               </item>
               <item>
                   <term>End = 10</term>
                   <description>End port type.</description>
               </item>
               <item>
                   <term>Centerline = 11</term>
                   <description>Centerline port type.</description>
               </item>
            </list>
            </remarks>
            <example>This example explains how to get the connectable ports of an EquipmentComponent object.
            <code>
            Dim oConnectablePortsCol As ReadOnlyCollection(Of IPort)
            Dim oEquipComponent1 As EquipmentComponent = Nothing 'Get the equipment component object.
            Dim ePortType As PortType = PortType.All 'Can be a Conduit or ALL PortType.
            oConnectablePortsCol = oEquipComponent1.GetConnectablePorts(ePortType)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EquipmentComponent.GetConnectedPorts(Ingr.SP3D.Common.Middle.PortType)">
            <summary>
            Gets the collection of ports given a port type that is already connected to other
            objects.
            </summary>
            <param name="eType">PortType enumerator.</param>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.InvalidArgumentException">Invalid PortType argument.</exception>
            <returns>The collection of ports given a port type that is already connected.</returns>
            <remarks>
            <list type="table">
               <listheader>
                   <term>PortType</term>
                   <description>Description</description>
               </listheader>
               <item>
                   <term>All = 1</term>
                   <description>All port type.</description>
               </item>    
               <item>
                   <term>Piping = 2</term>
                   <description>Piping port type.</description>
               </item>
               <item>
                   <term>Duct = 3</term>
                   <description>Duct port type.</description>
               </item>
               <item>
                   <term>Cable = 4</term>
                   <description>Cable port type.</description>
               </item>
               <item>
                   <term>Foundation = 5</term>
                   <description>Foundation port type.</description>
               </item>
               <item>
                   <term>Cabletray = 6</term>
                   <description>Cabletray port type.</description>
               </item>
               <item>
                   <term>Conduit = 7</term>
                   <description>Conduit port type.</description>
               </item>
               <item>
                   <term>Edge = 8</term>
                   <description>Edge port type.</description>
               </item>
               <item>
                   <term>Face = 9</term>
                   <description>Face port type.</description>
               </item>
               <item>
                   <term>End = 10</term>
                   <description>End port type.</description>
               </item>
               <item>
                   <term>Centerline = 11</term>
                   <description>Centerline port type.</description>
               </item>
            </list>
            </remarks>
            <example>This example explains how to get the connected ports of an EquipmentComponent object.
            <code>
            Dim oConnectedPortsCol As ReadOnlyCollection(Of IPort)
            Dim oEquipComponent1 As EquipmentComponent = Nothing 'Get the equipment component object.
            Dim ePortType As PortType = PortType.All 'Can be a Conduit or ALL PortType.
            oConnectedPortsCol = oEquipComponent1.GetConnectedPorts(ePortType)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EquipmentComponent.GetPorts(Ingr.SP3D.Common.Middle.PortType)">
            <summary>
            Gets the collection of ports given a port type that is associated with the equipment component.
            All ports, including connectable and connected ports, are returned.
            </summary>
            <param name="eType">PortType enumerator.</param>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.InvalidArgumentException">Invalid PortType argument.</exception>
            <returns>The collection of ports given a port type.</returns>
            <remarks>
            <list type="table">
               <listheader>
                   <term>PortType</term>
                   <description>Description</description>
               </listheader>
               <item>
                   <term>All = 1</term>
                   <description>All port type.</description>
               </item>    
               <item>
                   <term>Piping = 2</term>
                   <description>Piping port type.</description>
               </item>
               <item>
                   <term>Duct = 3</term>
                   <description>Duct port type.</description>
               </item>
               <item>
                   <term>Cable = 4</term>
                   <description>Cable port type.</description>
               </item>
               <item>
                   <term>Foundation = 5</term>
                   <description>Foundation port type.</description>
               </item>
               <item>
                   <term>Cabletray = 6</term>
                   <description>Cabletray port type.</description>
               </item>
               <item>
                   <term>Conduit = 7</term>
                   <description>Conduit port type.</description>
               </item>
               <item>
                   <term>Edge = 8</term>
                   <description>Edge port type.</description>
               </item>
               <item>
                   <term>Face = 9</term>
                   <description>Face port type.</description>
               </item>
               <item>
                   <term>End = 10</term>
                   <description>End port type.</description>
               </item>
               <item>
                   <term>Centerline = 11</term>
                   <description>Centerline port type.</description>
               </item>
            </list>
            </remarks>
            <example>This example explains how to get the ports of an EquipmentComponent object.
            <code>
            Dim oPortsCol As ReadOnlyCollection(Of IPort)
            Dim oEquipComponent1 As EquipmentComponent = Nothing 'Get the equipment component object.
            Dim ePortType As PortType = PortType.All 'Can be a Conduit or ALL PortType.
            oPortsCol = oEquipComponent1.GetPorts(ePortType)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EquipmentComponent.IsConnectedTo(Ingr.SP3D.Common.Middle.IConnectable,System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.IConnection}@)">
            <summary>
            Gets the collection of connection objects given the other side of the connectable object.
            </summary>
            <param name="oConnectable">Connectable object.</param>
            <param name="oConnectionEnum">List Of objects connected to the given equipment component through any of its ports.</param>
            <exception cref="T:System.ArgumentNullException">Connectable argument is null.</exception>
            <returns>Boolean to determine whether the equipment component is connected.</returns>
            <example>This example explains how to check if an object is connected to an equipment.
            <code>
            Dim oConnectable As IConnectable = Nothing 'Connectable can be obtained using the Connectable property on a RouteStockPort.
            Dim oConnectionCol as ReadOnlyCollection(Of IConnection) = Nothing
            Dim oEquipmentComponent1 As EquipmentComponent = Nothing 'Get the equipment object.
            Dim bIsConnected as Boolean
            bIsConnected = oEquipmentComponent1.IsConnectedTo(oConnectable, oConnectionCol)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EquipmentComponent.GetConnectedObjects">
            <summary>
            Gets the connected objects.
            This method was not implemented.
            </summary>
            <returns>Read-only collection of the connected objects.</returns>
            <compilewhen>not implemented</compilewhen>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EquipmentComponent.GetConnectedObjects(System.Type)">
            <summary>
            Gets the connected objects of specific object type.
            This method was not implemented.
            </summary>
            <param name="connectedObjectType">Type of the connected object.</param>
            <returns>Read-only collection of specific object type of the connected objects.</returns>
            <compilewhen>not implemented</compilewhen>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EquipmentComponent.SetOrientation(Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Sets the orientation of the equipment component.
            </summary>
            <param name="xAxisNew">X-axis of the equipment component to be set.</param>
            <param name="yAxisNew">Y-axis of the equipment component to be set.</param>
            <exception cref="T:System.ArgumentNullException">Input argument is null.</exception>
            <exception cref="T:System.ArgumentException">Input argument length is less than the DistanceTolerance value, or input vectors are not perpendicular to each other.</exception>
            <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Unexpected failure trying to modify the object.</exception>
            <example>This example explains how to set orientation of an equipment component.
            <code>
            Dim oXVector As Vector = New Vector(0, 0, 0) 'Initialize with proper values.
            Dim oYVector As Vector = New Vector(0, 0, 0) 'Initialize with proper values.
            Dim oEquipmentComponent1 As EquipmentComponent = Nothing 'Get the equipment component object.
            oEquipmentComponent1.SetOrientation(oXVector, oYVector)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EquipmentComponent.CanPortbeDeleted(Ingr.SP3D.Common.Middle.IDistributionPort)">
            <summary>
            Checks whether the given port can be deleted.
            </summary>
            <param name="oPort">The port object on which the check must be performed for permission to delete.</param>
            <exception cref="T:System.ArgumentNullException"> Port argument is null.</exception>
            <returns>Whether the port can be deleted.</returns>
            <example>This example explains how to check whether a port can be deleted.
            <code>
            Dim oEquipComponent1 As EquipmentComponent = Nothing 'Get the equipment component object.
            Dim oPort as IDistributionPort = Nothing 'Update with the port to be checked.
            Dim bCanPortbeDeleted As Boolean 
            bCanPortbeDeleted = oEquipComponent1.CanPortbeDeleted(oPort)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EquipmentComponent.Transform(Ingr.SP3D.Common.Middle.Matrix4X4)">
            <summary>
            Transforms the equipment component with the given matrix.
            </summary>
            <param name="oT4X4">Transformation matrix by which the equipment component is be transformed.</param>
            <exception cref="T:System.ArgumentNullException">Input matrix argument is null.</exception>
            <example>This example explains how to transform an equipment component given a matrix.
            <code>
            Dim oTransformMatrix As Matrix4X4 = New Matrix4X4 'Initialize with proper values.
            Dim oEquipmentComponent1 As EquipmentComponent = Nothing 'Get the equipment component object.
            oEquipmentComponent1.Transform(oTransformMatrix)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EquipmentComponent.SetWeightAndCOG(Ingr.SP3D.Equipment.Middle.WCGType,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the weight and center of gravity (COG) on the equipment component. COG values should be according to the symbol coordinate system.
            This method takes care of converting the COG to global and persisting on equipment component.
            <param name="lweightType">Weight type of the equipment component that needs to be set.</param>
            <param name="weight">Weight of the equipment component that needs to be set.</param>
            <param name="localCOGX">COG X-value with respect to the symbol coordinate system.</param>
            <param name="localCOGY">COG Y-value with respect to the symbol coordinate system.</param>
            <param name="localCOGZ">COG Z-value with respect to the symbol coordinate system.</param>
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EquipmentComponent.GetWeightAndCOG(Ingr.SP3D.Equipment.Middle.WCGType,System.Double@,System.Double@,System.Double@,System.Double@,Ingr.SP3D.Equipment.Middle.WCGProperties@)">
            <summary>
            Gets the weight and center of gravity (COG) on the equipment component.
            <param name="wcgType">WCGTypes of the equipment component to be returned.</param>
            <param name="weight">Weight of the equipment component. </param>
            <param name="globalCOGX">COG X-value with respect to the global coordinate system.</param>
            <param name="globalCOGY">COG Y-value with respect to the global coordinate system.</param>
            <param name="globalCOGZ">COG Z-value with respect to the global coordinate system.</param>
            <param name="wcgProperties">WCGProperties on the Equipment component.</param>
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EquipmentComponent.Children(Ingr.SP3D.Equipment.Middle.EquipmentChildrenCategory)">
            <summary>
            Returns the children associated to the Equipment.
            </summary>
            <param name="eCategory"></param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EquipmentComponent.SetUserDefinedName(System.String)">
            <summary>
            Sets the user-defined name of an object.
            </summary>
            <param name="Name">The new name.</param>
            <example>This example explains how to set a user-defined name.
            <code>
            Dim sName As String = Nothing 'Initialize this with a proper name.
            Dim oEquipmentComponent1 As EquipmentComponent = Nothing 'Get the equipment component object.
            oEquipmentComponent1.SetUserDefinedName(sName)
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.EquipmentComponent.SystemChildren">
            <summary>
            Gets the children under equipment.
            </summary>
            <returns>List of objects that implement the ISystemChild interface.</returns>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.EquipmentComponent.SystemParent">
            <summary>
            Gets or sets the system parent associated to the equipment component.
            </summary>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.InvalidParentException"> Parent is not found for this equipment component, or it has more than one parent associated.</exception>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.EquipmentComponent.WBSItemParents">
            <summary>
            Gets the WBSItem parents for this item.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.EquipmentComponent.WBSProjects">
            <summary>
            Gets the projects that have claimed the object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.EquipmentComponent.AssemblyParent">
            <summary>
            Gets or sets the assembly parent of the equipment component.
            </summary>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.InvalidParentException"> Parent is not found for this equipment component, or it has more than one parent associated.</exception>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.EquipmentComponent.XAxis">
            <summary>
            Gets the X-axis of the equipment component local coordinate system.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.EquipmentComponent.YAxis">
            <summary>
            Gets the Y-axis of the equipment component local coordinate system.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.EquipmentComponent.ZAxis">
            <summary>
            Gets the Z-axis of the equipment component local coordinate system.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.EquipmentComponent.Origin">
            <summary>
            Gets or sets the position of the equipment component.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.EquipmentComponent.Matrix">
            <summary>
            Gets or sets the equipment component matrix.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.EquipmentComponent.Range">
            <summary>
            Gets the range of the equipment component.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.EquipmentComponent.CoordinateSystem">
            <summary>
            Gets the local coordinate system associated with the equipment component.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.EquipmentComponent.Constraints">
            <summary>
            Gets the list of constraints associated with the equipment component.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.EquipmentComponent.Part">
            <summary>
            Gets the part.
            </summary>
            <example>This example explains how to get a part.
            <code>
            'Define Equipment Component.
            Dim oEquipComp As EquipmentComponent = Nothing
            Dim oEquipCompPart As EquipmentComponentPart = Nothing
            'Get part from EquipmentComponent.
            oEquipComp = oEquipComp.Part
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.EquipmentComponent.Description">
            <summary>
            Gets or sets the description on the equipment component.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.EquipmentComponent.ActiveNameRule">
            <summary>
            Gets or sets the active name rule associated with the equipment component.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.EquipmentComponent.NamedItemHelperObj">
            <summary>
            Private utility method for managing the existance of the NamedItemHelper object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.EquipmentComponent.Name">
            <summary>
            Gets the name of the object.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Middle.EqpNozzlePBO">
            <summary>
            EqpNozzlePBO is a wrapper on Nozzles COM business object
            </summary> 
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EqpNozzlePBO.#ctor">
            <summary>
            Default constructor with no arguments
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EqpNozzlePBO.#ctor(System.Object,Ingr.SP3D.Common.Middle.Services.SP3DConnection)">
            <summary>
            Constructor for the SOM to construct the private object of the nozzle
            </summary>       
            <param name="oMoniker">Object Moniker to wrap</param> 
            <param name="oConnection">SP3DConnection to wrap the business object with respective Private business object</param>  
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EqpNozzlePBO.GetRange(System.Object)">
            <summary>
            Get the range box.
            </summary>
            <param name="COMBO">COM Business Object.</param>
            <returns>The objects range box.</returns>
            <exception cref="T:Ingr.SP3D.Equipment.Exceptions.GetRangeException">Unexpected failure while getting the range.</exception>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EqpNozzlePBO.CreateNozzleGivenPartAndIndex(System.String,System.Boolean,System.Int32,Ingr.SP3D.Common.Middle.ISystem,Ingr.SP3D.Common.Middle.PortType)">
            <summary>
            Creates a nozzle for a given Part number and Index under a given Parent System
            </summary>
            <param name="strPartNumber">Part Number of the nozzle to be created</param>
            <param name="bLightWeighGraphics">Boolean for light weight graphics</param>
            <param name="m_Index">Port Index of the nozzle to be created</param>
            <param name="oParentSystem">Parent system under which the nozzle has to be created</param>
            <param name="ePortType">Type of nozzle to be created</param>
            <returns>Created Nozzle object</returns>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EqpNozzlePBO.CreateNozzleGivenPartAndIndex(System.String,System.Boolean,System.Int32,Ingr.SP3D.Common.Middle.Services.SP3DConnection,Ingr.SP3D.Common.Middle.PortType)">
            <summary>
            Creates a nozzle for a given Part number, Index
            </summary>
            <param name="strPartNumber">Part Number of the nozzle to be created</param>
            <param name="bLightWeighGraphics">Boolean for light weight graphics</param>
            <param name="m_Index">Port Index of the nozzle to be created</param>
            <param name="oConnection">Connection to the Database</param>
            <param name="ePortType">Type of nozzle to be created</param>
            <returns>Created Nozzle object</returns>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EqpNozzlePBO.UpdatePipeNozzle(System.Object)">
            <summary>
            Updates the  COM Pipe nozzle symbol.
            </summary>
            <param name="nozzleComObj">Nozzle COM occurence</param>      
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EqpNozzlePBO.CreateFndPortGivenPartAndIndex(Ingr.SP3D.ReferenceData.Middle.Part,System.Boolean,System.Int32,Ingr.SP3D.Common.Middle.Services.SP3DConnection,Ingr.SP3D.Common.Middle.ISystem)">
            <summary>
            Creates a nozzle for a given Part and Index under a given Parent System
            </summary>
            <param name="oPart">Part of the nozzle to be created</param>
            <param name="bLightWeighGraphics">Boolean for light weight graphics</param>
            <param name="m_Index">Port Index of the nozzle to be created</param>
            <param name="oConnection">SP3DConnection required for getiing the resource Manager</param>
            <param name="oParentSystem">Parent system under which the nozzle has to be created</param>        
            <returns>Created Nozzle object</returns>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EqpNozzlePBO.CreateFndPortGivenPartAndIndex(System.String,System.Boolean,System.Int32,Ingr.SP3D.Common.Middle.Services.SP3DConnection,Ingr.SP3D.Common.Middle.ISystem)">
            <summary>
            Creates a nozzle for a given Part number and Index under a given Parent System
            </summary>
            <param name="strPartNumber">Part Number of the nozzle to be created</param>
            <param name="bLightWeighGraphics">Boolean for light weight graphics</param>
            <param name="m_Index">Port Index of the nozzle to be created</param>
            <param name="oConnection">SP3DConnection required for getiing the resource Manager</param>
            <param name="oParentSystem">Parent system under which the nozzle has to be created</param>        
            <returns>Created Nozzle object</returns>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EqpNozzlePBO.CreatePipeNozzle(Ingr.SP3D.ReferenceData.Middle.PipePortDef,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Boolean)">
            <summary>
            Creates a Pipe nozzle for a given PortDef
            </summary>
            <param name="oPipePortDef">PortDefinition of the nozzle to be created</param>
            <param name="oConnection">SP3DConnection required for getiing the resource Manager</param>
            <param name="bLightWeighGraphics">Boolean for light weight graphics</param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EqpNozzlePBO.CreateHvacNozzle(Ingr.SP3D.ReferenceData.Middle.HvacPortDef,Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Boolean)">
            <summary>
            Creates a Hvac nozzle for a given PortDef
            </summary>
            <param name="oHvacPortDef">PortDefinition of the nozzle to be created</param>
            <param name="oConnection">SP3DConnection required for getiing the resource Manager</param>
            <param name="bLightWeighGraphics">Boolean for light weight graphics</param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EqpNozzlePBO.CreateCableNozzle(Ingr.SP3D.ReferenceData.Middle.ElectricalPortDef,Ingr.SP3D.Common.Middle.Services.SP3DConnection)">
            <summary>
            Creates a Cable nozzle for a given PortDef
            </summary>
            <param name="oElectricPortDef">PortDefinition of the nozzle to be created</param>
            <param name="oConnection">SP3DConnection required for getiing the resource Manager</param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EqpNozzlePBO.CreateCableTrayNozzle(Ingr.SP3D.ReferenceData.Middle.CableTrayPortDef,Ingr.SP3D.Common.Middle.Services.SP3DConnection)">
            <summary>
            Creates a CableTray nozzle for a given PortDef
            </summary>
            <param name="oCableTrayPortDef">PortDefinition of the nozzle to be created</param>
            <param name="oConnection">SP3DConnection required for getiing the resource Manager</param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EqpNozzlePBO.CreateConduiltNozzle(Ingr.SP3D.ReferenceData.Middle.PipePortDef,Ingr.SP3D.Common.Middle.Services.SP3DConnection)">
            <summary>
            Creates a Conduit nozzle for a given PortDef
            </summary>
            <param name="oConduitPortDef">PortDefinition of the nozzle to be created</param>
            <param name="oConnection">SP3DConnection required for getiing the resource Manager</param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EqpNozzlePBO.GetConnections">
            <summary>
            Returns the collection of connections to the Port.
            </summary>
            <returns>Collection of Connections</returns>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EqpNozzlePBO.IsAssemblyMember">
            <summary>
            Checks if the Nozzle is an Assembly Member
            </summary>
            <returns>True if the nozzle is an Assembly Member else returns False</returns>
        </member>
        <member name="M:Ingr.SP3D.Equipment.Middle.EqpNozzlePBO.GetDepthAndOffset(System.Double@,System.Double@)">
            <summary>
            Gets the Depth and Offset used for this Nozzle
            </summary>
            <param name="dDepth"></param>
            <param name="dOffset"></param>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.EqpNozzlePBO.IsConnected">
            <summary>
            Checks if the DistribPort is connected.
            </summary>
            <returns>True if it is connected or False if is not</returns>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.EqpNozzlePBO.Location">
            <summary>
            Returns or sets the location of the DistribPort.
            </summary>        
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.EqpNozzlePBO.NormalVector">
            <summary>
            Returns or sets the normalvector of the DistribPort.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.EqpNozzlePBO.RadialVector">
            <summary>
            Returns or sets the radialvector of the DistribPort.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.EqpNozzlePBO.Origin">
            <summary>
            Returns or sets the origin of the Port Object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.EqpNozzlePBO.XAxis">
            <summary>
            Returns or sets the X-Axis of the Port Object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.EqpNozzlePBO.YAxis">
            <summary>
            Returns or sets the Y-Axis of the Port Object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.EqpNozzlePBO.ZAxis">
            <summary>
            Returns or sets the Z-Axis of the Port Object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.EqpNozzlePBO.GetConnectable">
            <summary>
            Returns the IConnectable of the Port
            </summary>
            <returns>connectable Object</returns>
        </member>
        <member name="P:Ingr.SP3D.Equipment.Middle.EqpNozzlePBO.PortType">
            <summary>
            Returns the PortType of the Port.
            </summary>
            <returns>Port Type of the given Nozzle</returns>
        </member>
        <member name="T:Ingr.SP3D.Equipment.Middle.EqpNozzlePBO.NozzleErrorResults">
            <summary>
            Enum representing different errors returned from Nozzle COM business object
            </summary>
        </member>
    </members>
</doc>
