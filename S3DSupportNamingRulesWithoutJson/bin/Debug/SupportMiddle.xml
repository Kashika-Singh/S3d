<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SupportMiddle</name>
    </assembly>
    <members>
        <member name="T:Ingr.SP3D.Support.Middle.Hidden.SupportComponentUtils">
            <summary>
            SupportComponentUtils contains helper methods for Support Component.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.Hidden.SupportComponentUtils.AddSupCompToDesignSup(Ingr.SP3D.ReferenceData.Middle.Part,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Support.Middle.DesignSupport)">
            <summary>
            Add given support component to design support at the given location.
            </summary>
            <param name="oPart">Part</param>
            <param name="oPosition">Position</param>
            <param name="oDesignSup">Design Support</param>
            <returns>returns the SupportComponent</returns>
            <exception cref="T:System.ArgumentNullException">One or more arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.HangerPartException">Hanger part is invalid.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.AddPartException">Failed to add part to the design support.</exception>        
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.Hidden.SupportComponentUtils.AddSupCompToDesignSup(Ingr.SP3D.ReferenceData.Middle.Part,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Support.Middle.DesignSupport)">
            <summary>
            Add given part to design support.
            </summary>
            <param name="oPart">Part</param>
            <param name="ofromPosition">fromPosition</param>
            <param name="otoPosition">toPosition</param>
            <param name="oDesignSup">Design Support</param>
            <returns>returns the SupportComponent</returns>
            <exception cref="T:System.ArgumentNullException">One or more arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.HangerPartException">Hanger part is invalid.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.AddPartException">Failed to add part to the design support.</exception>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.Hidden.SupportComponentUtils.GetPartFromPartClass(System.String,System.String,Ingr.SP3D.Support.Middle.Support)">
            <summary>
            Retuns the part from the given part class.
            </summary>
            <param name="sPartClass">Part class name</param>
            <param name="sPSRName">Part Selection Rule name</param>
            <param name="oSup">Support</param>
            <returns>returns the part</returns>
            <exception cref="T:System.ArgumentNullException">One or more arguments are null.</exception>        
            <exception cref="T:Ingr.SP3D.Support.Exceptions.PartFromPartClassException">Failed to get the part from part class.</exception>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.Hidden.SupportComponentUtils.GetHgrPortOriginFromSupComp(Ingr.SP3D.Support.Middle.SupportComponent,System.String)">
            <summary>
            Get the origin of given hgr port name using given support component.
            </summary>
            <param name="oSupComp">Support Component</param>
            <param name="sPortName">Port Name</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">One or more arguments are null.</exception>        
            <exception cref="T:Ingr.SP3D.Support.Exceptions.HangerPortFromSupCompException">Failed to get the port form support component.</exception>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.Support">
            <summary>
            Support abstract class contains the implementation of necessary methods and properties for 
            the derived classes; i.e., Pipe Support, Duct Support, and so on.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.ISupportBOMDescription">
            <summary>
            ISupportBOMDescription definition.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.ISupportBOMDescription.BOMDescription">
            <summary>
            Gets or sets the BOM description of a support or support component.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.ISupport">
            <summary>
            ISupport interface definition.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.ISupport.SupportSelectionRule">
            <summary>
            Gets the ProgID of the support selection rule.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.ISupport.SelectedByRule">
            <summary>
            Gets or sets the selected by rule property. Returns True if this support was selected by the support selection rule.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.ISupport.PrimaryRunName">
            <summary>
            Gets the name of the primary run. The primary run refers to the first selected route run while placing the support.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.ISupport.MaximumLoad">
            <summary>
            Gets the maximum load carried by the support from the catalog.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.Support.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.Support.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor for .NET to access this class.
            </summary>
            <param name="oPB">Private Business object</param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.Support.IsDesignSupportAssembly">
            <summary>
            Returns True or False depending on whether the support is design support or not.
            </summary>   
            <exception cref="T:Ingr.SP3D.Support.Exceptions.IsDesignSupportAssemblyException">Failed to return the boolean value if support is standard or design support.</exception>
            <example>How to determine if the given support is a Design Support.
            <code>
            'Get the Support.
            Dim oSupport As Support = Nothing
            'Boolean to store whether or not it is a Design Support.
            Dim bIsConnected As Boolean
            'Check if the Support is a Design Support.
            bIsDesignSupport = oSupport.IsDesignSupportAssembly()
            </code>
            </example>  
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.Support.SetPropertyValue(Ingr.SP3D.Common.Middle.PropertyValue)">
            <summary>
            Sets the value of the indicated property. This function needs to be called to  set any occurance property on the support defintion.
            </summary>
            <param name="oPropertyValue">New value.</param>
            <exception cref="T:System.ArgumentNullException">Raised if the argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidPropertyTypeException">Raised if the property is not valid.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoObjectForMonikerException">Raised if there is no object for the moniker.</exception>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.Support.AddSystemChild(Ingr.SP3D.Common.Middle.ISystemChild)">
            <summary>
            Adds the given object as a child to the support.
            </summary>
            <param name="oChild">Objects implementing the ISystemChild interface.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidChildTypeException">Passed-in child object is not valid to be added under support.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailToAddSystemChildException">Unexpected error adding the system child.</exception>
            <example>How to add a object as a child to the support.
            <code>
            'Get the Support
            Dim oSupport As Support = Nothing
            'Define the Child
            Dim oChild As ISystemChild = Nothing
            'Add the Child
            oSupport.AddSystemChild(oChild)
            </code>
            </example>  
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.Support.GetSystemHelper">
            <summary>
            Private utility method to get and manage the system helper object.
            </summary>
            <returns>m_oSystemHelper - Occurrence to the system helper object.</returns>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.Support.GetSystemChildHelper">
            <summary>
            Private utility method to get and manage the system child helper object.
            </summary>
            <returns>m_oSystemChildHelper - Occurrence to the system child helper object.</returns>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.Support.GetAssemblyHelper">
            <summary>
            Private method to get and manage an occurance of the assembly hierarchy helper of CommonMiddle.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.Support.AddAssemblyChild(Ingr.SP3D.Common.Middle.IAssemblyChild)">
            <summary>
            Adds an assembly hierarchy child.
            </summary>
            <param name="oChild">Assembly hierarchy child to be added.</param>
            <example>How to add an assembly child to the hierarchy.
            <code>
            'Get the Support
            Dim oSupport As Support = Nothing
            'Define the Child
            Dim oChild As IAssemblyChild = Nothing
            'Add the Child
            oSupport.AddAssemblyChild(oChild)
            </code>
            </example>  
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.Support.GetWBSHierarchyHelper">
            <summary>
            Property to get the WBS hierarchy helper.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.Support.GetConnectablePorts(Ingr.SP3D.Common.Middle.PortType)">
            <summary>
            Gets the collection of connectable ports of a requested type.
            </summary>
            <param name="eType">The type of the ports to be returned.</param>
            <returns>A read-only collection of connectable ports.</returns>
            <example>How to get the collection of connectable ports from a Support.
            <code>
            'Get the Support
            Dim oSupport As Support = Nothing
            'Define the Port Collection
            Dim oPortCollection As ReadOnlyCollection(Of IPort)
            'Get the Collection of Connectable Ports
            oPortCollection = oSupport.GetConnectablePorts(PortType.All)    'Get All Port Types
            </code>
            </example>  
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.Support.GetConnectedPorts(Ingr.SP3D.Common.Middle.PortType)">
            <summary>
            Gets the collection of connected ports of a requested type.
            </summary>
            <param name="eType">The type of the ports to be returned.</param>
            <returns>ReadOnlyCollection of connected ports.</returns>
            <example>How to get the collection of connected ports from a Support.
            <code>
            'Get the Support
            Dim oSupport As Support = Nothing
            'Define the Port Collection
            Dim oPortCollection As ReadOnlyCollection(Of IPort)
            'Get the Collection of Connected Ports
            oPortCollection = oSupport.GetConnectedPorts(PortType.All)    'Get All Port Types
            </code>
            </example> 
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.Support.GetPorts(Ingr.SP3D.Common.Middle.PortType)">
            <summary>
            Gets the collection of ports of a requested port type.
            </summary>
            <param name="eType">The type of the ports to be returned.</param>
            <returns>Read-only collection of ports.</returns>
            <example>How to get the collection of ports from a support.
            <code>
            'Get the Support
            Dim oSupport As Support = Nothing
            'Define the Port Collection
            Dim oPortCollection As ReadOnlyCollection(Of IPort)
            'Get the Collection of Ports
            oPortCollection = oSupport.GetPorts(PortType.All)    'Get All Port Types
            </code>
            </example> 
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.Support.IsConnectedTo(Ingr.SP3D.Common.Middle.IConnectable,System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.IConnection}@)">
            <summary>
            Determines whether the input object oConnectable is connected to this support.
            </summary>
            <param name="oConnectable">Object being tested to see if it is connected to this support.</param>
            <param name="oConnectionEnum">Read-only collection of objects connected to this support.</param>
            <returns>True if there are objects connected to this support.</returns>
            <example>How to determine whether the input object is connected to the support.
            <code>
            'Get the Support
            Dim oSupport As Support = Nothing
            'Get the Connectable Object
            Dim oConn As IConnectable = Nothing
            'Define the Connection Collection
            Dim oConnectionColl As ReadOnlyCollection(Of IConnection) = Nothing
            'Boolean to store whether or not it is connected
            Dim bIsConnected As Boolean
            'Determine if oConn is connected to the Support
            bIsConnected = oSupport.IsConnectedTo(oConn, oConnectionColl)
            </code>
            </example> 
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.Support.GetConnectedObjects">
            <summary>
            Gets the connected objects.
            This method was not implemented.
            </summary>
            <returns>Read-only collection of the connected objects.</returns>
            <compilewhen>not implemented</compilewhen>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.Support.GetConnectedObjects(System.Type)">
            <summary>
            Gets the connected objects of specific object type.
            This method was not implemented.
            </summary>
            <param name="connectedObjectType">Type of the connected object.</param>
            <returns>Read-only collection of specific object type of the connected objects.</returns>
            <compilewhen>not implemented</compilewhen>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.Support.SetOrientation(Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Sets the orientation of the support.
            </summary>
            <param name="xAxisNew">X-axis of the equipment component that needs to be set.</param>
            <param name="yAxisNew">Y-axis of the equipment component that needs to be set.</param>
            <example>How to set the orientation of a support
            <code>
            'Get the Support
            Dim oSupport As Support = Nothing
            'Set the Orientation, The Example uses (1,0,0) for the X-Axis and (0,1,0) for the Y-Axis
            oSupport.SetOrientation(New Vector(1, 0, 0), New Vector(0, 1, 0))
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.Support.Transform(Ingr.SP3D.Common.Middle.Matrix4X4)">
            <summary>
            Transforms the support.
            </summary>
            <param name="oT4X4">Transform matrix.</param>
            <example>How to transform the support by a given matrix
            <code>
            'Get the Support
            Dim oSupport As Support = Nothing
            'Define the Matrix
            Dim oMatrix As New Matrix4X4()
            'In this example, we translate the Support by the vector (1,1,0)
            oMatrix.Translate(New Vector(1, 1, 0))
            'Apply the transformation to the support
            oSupport.Transform(oMatrix)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.Support.GetNameRuleHelper">
            <summary>
            Private utility method to get and manage the name rule helper object.
            </summary>
            <returns>m_oSystemChildHelper - Occurrence to the name rule helper object.</returns>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.Support.GetNamedItemHelper">
            <summary>
            Private utility method to get and manage the named item helper object.
            </summary>
            <returns>m_oNamedItemHelper - Occurrence of the named item helper object.</returns>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.Support.SetUserDefinedName(System.String)">
            <summary>
            Sets the name of an item.
            </summary>
            <param name="Name">The new name string.</param>
            <example>How to set the name of a support
            <code>
            'Get the Support
            Dim oSupport As Support = Nothing
            'Set the Name
            oSupport.SetUserDefinedName("User-Defined-Name")
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.Support.FindPort(Ingr.SP3D.Common.Middle.IConnectable)">
            <summary>
            Finds a port on the IConnectable object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.Support.SupportDefinition">
            <summary>
            Gets or sets the part from or on the support.
            </summary>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.SupportDefinitionException">Failed to get or set the support definition.</exception>
            <exception cref="T:System.ArgumentNullException">One or more arguments are null.</exception>        
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.Support.SupportedObjects">
            <summary>
            Gets or sets the supported objects from or on the support.
            </summary>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.SupportedObjectsException">Failed to get or set the supported objects.</exception>
            <exception cref="T:System.ArgumentNullException">One or more arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.SupportInvalidArgumentException">Supported objects collection has invalid objects.</exception>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.Support.SupportingObjects">
            <summary>
            Gets or sets the supporting objects from or on the support.
            </summary>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.SupportingObjectsException">Failed to get or set the supporting objects.</exception>
            <exception cref="T:System.ArgumentNullException">One or more arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.SupportInvalidArgumentException">Supporting objects collection has invalid objects.</exception>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.Support.SupportingFaces">
            <summary>
            Returns the read-only BusinessObject collection of supporting object ports or surfaces.
            </summary>
            <example>
            <code>
            ReadOnlyCollection(BusinessObject) supportingfaces = Support.SupportingFaces;        
            </code>
            </example>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.SupportingFacesException">failed to get the supporting objects ports or surfaces</exception>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.Support.SupportPosition">
            <summary>
            Gets or sets the support position from or on the support.
            </summary>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.SupportPositionException">Failed to get or set the support position.</exception>
            <exception cref="T:System.ArgumentNullException">One or more arguments are null.</exception>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.Support.CommandType">
            <summary>
            CommandType property
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.Support.SystemChildren">
            <summary>
            Gets the children under the support.
            </summary>
            <returns>Read-only collection of systemchild objects under the support.</returns>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.Support.SystemParent">
            <summary>
            Gets or sets the system parent of the Support.  
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.Support.AssemblyChildren">
            <summary>
            Gets the children of an assembly hierarchy parent.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.Support.AssemblyParent">
            <summary>
            Gets or sets the parent of an object in the assembly hierarchy.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.Support.WBSItemParents">
            <summary>
            Gets the collecton of WBS parents.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.Support.WBSProjects">
            <summary>
            Gets the collecton of WBS projects.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.Support.Matrix">
            <summary>
            Gets or sets the local coordinate system matrix of the support.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.Support.XAxis">
            <summary>
            Gets the X-axis vector of the support.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.Support.YAxis">
            <summary>
            Gets the Y-axis vector of the support.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.Support.ZAxis">
            <summary>
            Gets the Z-axis vector of the support.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.Support.Origin">
            <summary>
            Gets or sets the origin of the support.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.Support.Range">
            <summary>
            Gets the range box of the support.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.Support.ActiveNameRule">
            <summary>
            Gets or sets the active name rule assigned to a run.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.Support.Name">
            <summary>
            Gets the read-only name.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.Support.BOMDescription">
            <summary>
            Gets the BOM description property on a support.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.Support.SupportSelectionRule">
            <summary>
            Gets the ProgID of a support selection rule.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.Support.SelectedByRule">
            <summary>
            Gets or sets the selected by rule property. Returns True if this support was selected by the support selection rule.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.Support.PrimaryRunName">
            <summary>
            Gets the name of the primary run. The primary run refers to the first selected route run while placing the support.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.Support.MaximumLoad">
            <summary>
            Gets the maximum load carried by a support from the catalog.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.LogicalComponent">
            <summary>
            LogicalComponent class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.SupportComponent">
            <summary>
            SupportComponent abstract class contains all the necessary information 
            for all other support components such as StandardComponent, LogicalComponent, and
            ConnectionComponent.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportComponent.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportComponent.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor for .NET to access this class.
            </summary>
            <param name="oPBO">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportComponent.GetVolumeAndCOG">
            <summary>
            Method to calculate Support Component Volume and center of gravity.
            </summary>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.GetVolumeCGException">Unable to get volume and center of gravity values for the Support component.</exception>
            <returns>VolumeCG of the support component</returns>
            <example>
            <code>
            //Get the support component.
            SupportComponentUtils supCompUtils = new SupportComponentUtils();
            SupportComponent supComp; 
            string partClassName;
            Position position;
            string empty = "";           
            Part part = supCompUtils.GetPartFromPartClass(partClassName, empty, this);
            supComp = supCompUtils.AddSupCompToDesignSup(part, position, this);
            //Call the GetVolumeAndCOG method
            VolumeCG volumeCG;
            //get the volume and center of gravity
            volumeCG = supComp. GetVolumeAndCOG ();
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportComponent.GetAssemblyHelper">
            <summary>
            Private method to get and manage an occurance of the assembly hierarchy helper of CommonMiddle.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportComponent.Transform(Ingr.SP3D.Common.Middle.Matrix4X4)">
            <summary>
            Transforms this object by the given transformation.
            </summary>
            <param name="oMatrix">Matrix4X4</param>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.HgrTransformException">Failed to perform the transformation.</exception>
            <example>This shows how to transform the support component by a given matrix.
            <code>
            'Get the support component.
            Dim oSupportComponent As SupportComponent = Nothing
            'Define the matrix.
            Dim oMatrix As New Matrix4X4()
            'In this example, we translate the support component by the vector (1,1,0).
            oMatrix.Translate(New Vector(1, 1, 0))
            'Apply the transformation to the support component.
            oSupportComponent.Transform(oMatrix)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportComponent.GetConnectablePorts(Ingr.SP3D.Common.Middle.PortType)">
            <summary>
            Returns the collection of ports given a port type that are free to be connected.
            </summary>
            <param name="eType">PortType</param>
            <returns>Connectable ports collection of objects.</returns>
            <remarks>
            <list type="table">
               <listheader>
                   <term>PortType</term>
                   <description>Description</description>
               </listheader>
               <item>
                   <term>All = 1</term>
                   <description>All port type.</description>
               </item>    
               <item>
                   <term>Piping = 2</term>
                   <description>Piping port type.</description>
               </item>
               <item>
                   <term>Duct = 3</term>
                   <description>Duct port type.</description>
               </item>
               <item>
                   <term>Cable = 4</term>
                   <description>Cable port type.</description>
               </item>
               <item>
                   <term>Foundation = 5</term>
                   <description>Foundation port type.</description>
               </item>
               <item>
                   <term>Cabletray = 6</term>
                   <description>Cabletray port type.</description>
               </item>
               <item>
                   <term>Conduit = 7</term>
                   <description>Conduit port type.</description>
               </item>
               <item>
                   <term>Edge = 8</term>
                   <description>Edge port type.</description>
               </item>
               <item>
                   <term>Face = 9</term>
                   <description>Face port type.</description>
               </item>
               <item>
                   <term>End = 10</term>
                   <description>End port type.</description>
               </item>
               <item>
                   <term>Centerline = 11</term>
                   <description>Centerline port type.</description>
               </item>
            </list>
            </remarks>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnComObjectNullException">Failed to get the connectable object.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.HgrConnectablePortsException">Failed to get connectable ports.</exception>
            <example>This shows how to get the collection of connectable ports.
            <code>
            'Get the support component.
            Dim oSupportComponent As SupportComponent = Nothing
            'Define the port collection.
            Dim oPortCollection As ReadOnlyCollection(Of IPort)
            'Get the collection of connectable ports.
            oPortCollection = oSupportComponent.GetConnectablePorts(PortType.All)    'Get All port types.
            </code>
            </example>  
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportComponent.GetConnectedPorts(Ingr.SP3D.Common.Middle.PortType)">
            <summary>
            Returns the collection of connected ports of the given port type.
            </summary>
            <param name="eType">Type of port.</param>
            <returns>Collection of connected ports.</returns>
            <remarks>
            <list type="table">
               <listheader>
                   <term>PortType</term>
                   <description>Description</description>
               </listheader>
               <item>
                   <term>All = 1</term>
                   <description>All port type.</description>
               </item>    
               <item>
                   <term>Piping = 2</term>
                   <description>Piping port type.</description>
               </item>
               <item>
                   <term>Duct = 3</term>
                   <description>Duct port type.</description>
               </item>
               <item>
                   <term>Cable = 4</term>
                   <description>Cable port type.</description>
               </item>
               <item>
                   <term>Foundation = 5</term>
                   <description>Foundation port type.</description>
               </item>
               <item>
                   <term>Cabletray = 6</term>
                   <description>Cabletray port type.</description>
               </item>
               <item>
                   <term>Conduit = 7</term>
                   <description>Conduit port type.</description>
               </item>
               <item>
                   <term>Edge = 8</term>
                   <description>Edge port type.</description>
               </item>
               <item>
                   <term>Face = 9</term>
                   <description>Face port type.</description>
               </item>
               <item>
                   <term>End = 10</term>
                   <description>End port type.</description>
               </item>
               <item>
                   <term>Centerline = 11</term>
                   <description>Centerline port type.</description>
               </item>
            </list>
            </remarks>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnComObjectNullException">Failed to get the connectable object.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.HgrConnectedPortsException">Failed to get connected ports.</exception>
            <example>This shows how to get the collection of connected ports.
            <code>
            'Get the support component.
            Dim oSupportComponent As SupportComponent = Nothing
            'Define the port collection.
            Dim oPortCollection As ReadOnlyCollection(Of IPort)
            'Get the collection of connected ports.
            oPortCollection = oSupportComponent.GetConnectedPorts(PortType.All)    'Get All Port Types
            </code>
            </example> 
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportComponent.GetPorts(Ingr.SP3D.Common.Middle.PortType)">
            <summary>
            Returns the collection of ports of the given port type on the support component.
            </summary>
            <param name="eType">Type of port.</param>
            <returns>Collection of ports.</returns>
            <remarks>
            <list type="table">
               <listheader>
                   <term>PortType</term>
                   <description>Description</description>
               </listheader>
               <item>
                   <term>All = 1</term>
                   <description>All port type.</description>
               </item>    
               <item>
                   <term>Piping = 2</term>
                   <description>Piping port type.</description>
               </item>
               <item>
                   <term>Duct = 3</term>
                   <description>Duct port type.</description>
               </item>
               <item>
                   <term>Cable = 4</term>
                   <description>Cable port type.</description>
               </item>
               <item>
                   <term>Foundation = 5</term>
                   <description>Foundation port type.</description>
               </item>
               <item>
                   <term>Cabletray = 6</term>
                   <description>Cabletray port type.</description>
               </item>
               <item>
                   <term>Conduit = 7</term>
                   <description>Conduit port type.</description>
               </item>
               <item>
                   <term>Edge = 8</term>
                   <description>Edge port type.</description>
               </item>
               <item>
                   <term>Face = 9</term>
                   <description>Face port type.</description>
               </item>
               <item>
                   <term>End = 10</term>
                   <description>End port type.</description>
               </item>
               <item>
                   <term>Centerline = 11</term>
                   <description>Centerline port type.</description>
               </item>
            </list>
            </remarks>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnComObjectNullException">Failed to get the connectable object.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.HgrPortsException">Failed to get the ports.</exception>
            <example>How to get the collection of ports.
            <code>
            'Get the support component.
            Dim oSupportComponent As SupportComponent = Nothing
            'Define the port collection.
            Dim oPortCollection As ReadOnlyCollection(Of IPort)
            'Get the collection of ports.
            oPortCollection = oSupportComponent.GetPorts(PortType.All)    'Get all port types.
            </code>
            </example> 
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportComponent.IsConnectedTo(Ingr.SP3D.Common.Middle.IConnectable,System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.IConnection}@)">
            <summary>
            Checks whether the support or support component is connected through any of its ports. 
            </summary>
            <param name="oConnectable">Connectable object.</param>
            <param name="oConnectionEnum">List of objects connected to the object through any of its ports.</param>
            <returns>Boolean to represent whether it is connected.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnComObjectNullException">Failed to get the connectable object.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.HgrIsConnectedToException">Failed to get whether the given object is connected to this component.</exception>
            <example>This shows how to determine whether the input object is connected to the support component.
            <code>
            'Get the support component.
            Dim oSupportComponent As SupportComponent = Nothing
            'Get the connectable object.
            Dim oConn As IConnectable = Nothing
            'Define the connection collection.
            Dim oConnectionColl As ReadOnlyCollection(Of IConnection) = Nothing
            'Boolean to store whether or not it is connected.
            Dim bIsConnected As Boolean
            'Determine if oConn is connected to the support.
            bIsConnected = oSupportComponent.IsConnectedTo(oConn, oConnectionColl)
            </code>
            </example> 
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportComponent.GetConnectedObjects">
            <summary>
            Gets the connected objects.
            This method was not implemented.
            </summary>
            <returns>Read-only collection of the connected objects.</returns>
            <compilewhen>not implemented</compilewhen>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportComponent.GetConnectedObjects(System.Type)">
            <summary>
            Gets the connected objects of specific object type.
            This method was not implemented.
            </summary>
            <param name="connectedObjectType">Type of the connected object.</param>
            <returns>Read-only collection of specific object type of the connected objects.</returns>
            <compilewhen>not implemented</compilewhen>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportComponent.GetNameRuleHelper">
            <summary>
            Private utility method to get and manage the name rule helper object.
            </summary>
            <returns>m_oSystemChildHelper - Occurrence to the name rule helper object.</returns>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportComponent.GetNamedItemHelper">
            <summary>
            Private utility method to get and manage the named item helper object.
            </summary>
            <returns>m_oNamedItemHelper - Occurrence of the named item helper object.</returns>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportComponent.SetUserDefinedName(System.String)">
            <summary>
            Sets the name of an item.
            </summary>
            <param name="Name">The new name string.</param>
            <example>This shows how to set the name of a support component.
            <code>
            'Get the support component.
            Dim oSupportComponent As SupportComponent = Nothing
            'Set the name.
            oSupportComponent.SetUserDefinedName("User Defined Name")
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportComponent.SetWeightAndCOG(System.Double,System.Double,System.Double,System.Double)">
             <summary>
             Called from a symbol .Net project to implement ICustomWeightCG interface. 
             This method is delegating the actual call to the respective business object where the actual weight and center of gravity is being set.
             </summary>
             <param name="weight">Double value of weight.</param>
             <param name="globalCOGX">Double value of position X for center of gravity in respect to the global coordinate system.</param>
             <param name="globalCOGY">Double value of position Y for center of gravity in respect to the global coordinate system.</param>
             <param name="globalCOGZ">Double value of position Z for center of gravity in respect to the global coordinate system.</param>
             <exception cref="T:Ingr.SP3D.Common.Middle.CmnException">Exception raised if an error is encountered while trying to set weight and center of gravity.</exception>
            <code>
             SupportComponent supportComponent;
             supportComponent.SetWeightAndCOG(totalWeight, globalCOG.X, globalCOG.Y, globalCOG.Z);
            </code>   
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportComponent.SystemParent">
            <summary>
            Gets or sets the system parent associated to the component.
            </summary>        
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportComponent.AssemblyParent">
            <summary>
            Gets or sets the parent of an object in the assembly hierarchy.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportComponent.Range">
            <summary>
            Gets the range of the support component.
            </summary>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.SupportObjectNullException"> No COM IJHgrSupportComponent is returned from the factory.</exception>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportComponent.ActiveNameRule">
            <summary>
            Gets or sets the active name rule assigned to a run.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportComponent.Name">
            <summary>
            Gets the read-only name.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportComponent.WBSItemParents">
            <summary>
            Returns the collection of WBS parents.
            </summary>
            <example>This example explains how to get WBSItemParents of a support component.
            <code>
            'Get support component
            Dim oSupComp As SupportComponent = Nothing 
            'Get WBSItemParents from support component. 
            Dim oWBSParentsCollection As ReadOnlyCollection(Of IWBSItem) = oSupComp.WBSItemParents 
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportComponent.WBSProjects">
            <summary>
            Returns the collection of WBS projects.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportComponent.BOMDescription">
            <summary>
            Gets the BOM description property on a support component.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.LogicalComponent.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.LogicalComponent.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructs a LogicalComponent from the database.
            </summary>
            <param name="oPrivateBusinessObject">PrivateBusinessObject</param>
            <example>How to create a LogicalComponent from an existing Business Object.
            <code>
            'Get the existing Business Object.
            Dim oPrivateBO As PrivateBusinessObject = Nothing
            'Create the Logical Component.
            Dim oLogicalComponent = New LogicalComponent(oPrivateBO)
            </code>
            </example>
        </member>
        <member name="T:Ingr.SP3D.Support.Services.HgrCommandType">
            <summary>
            HgrCommandType enumerator.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Services.HgrCommandType.HgrByStructCmdType">
            <summary>
            Defines the support, which is placed by using the structure command.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Services.HgrCommandType.HgrByPointCmdType">
            <summary>
            Defines the support, which is placed by using the point command.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Services.HgrCommandType.HgrByStructOrByPointCmdType">
            <summary>
            Defines the support, which can be placed using either the structure or point command.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Services.HgrCommandType.HgrByReferencePointCmdType">
            <summary>
            Defines the support, which can be placed using reference command.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Services.HgrCommandType.HgrByStructOrReferencePointCmdType">
            <summary>
            Defines the support, which can be placed using either the structure or reference command.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Services.HgrCommandType.HgrByPointOrReferencePointCmdType">
            <summary>
            Defines the support, which can be placed using either the point or reference command.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Services.HgrCommandType.HgrByStructOrPointOrReferencePointCmdType">
            <summary>
            Defines the support, which can be placed using either the structure or point or reference command.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Services.HgrCommandType.HgrAllCmdType">
            <summary>
            Defines the support, which can be placed using any command.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.CableTraySupport">
            <summary>
            Used to create the cable tray support and allow modification.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.CableTraySupport.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor to access this CableTraySupport class.
            </summary>
            <param name="oPB">Private Business object.</param>
            <example>How to create a CableTraySupport from an existing Business Object.
            <code>
            'Get the existing Business Object.
            Dim oPrivateBO As PrivateBusinessObject = Nothing
            'Create the Cable Tray Support.
            Dim oCableTraySupport = New CableTraySupport(oPrivateBO)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.CableTraySupport.#ctor(Ingr.SP3D.Common.Middle.ISystem,System.Collections.ObjectModel.Collection{Ingr.SP3D.Route.Middle.RouteFeature},System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.BusinessObject})">
            <summary>
            Constructor to create a cable tray support given a parent, a collection of supporting objects,
            and a collection of objects to be supported.
            </summary>
            <param name="oParentSys">System hierarchy parent of this support.</param>
            <param name="oSupportedColl">Collection of objects to be supported.</param>
            <param name="oSupportingColl">Collection of objects from which this support will be hung.</param>
            <exception cref="T:System.ArgumentNullException">One or more arguments are null.</exception>        
            <exception cref="T:Ingr.SP3D.Support.Exceptions.SupportInvalidParentException">Parent is not ISystem.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.SupportInvalidArgumentException">Supported objects collection has invalid objects.</exception>
            <example>How to create a new CableTraySupport by specifying the Parent System, Supported Objects, and Supporting Objects.
            <code>
            'Get the Parent System.
            Dim oParentSys As ISystem = Nothing
            'Get the Collection of Supported Route Features.
            Dim oSupportedColl As Collection(Of RouteFeature) = Nothing
            'Get the Collection of Supporting Objects.
            Dim oSupportingColl As Collection(Of BusinessObject) = Nothing
            'Create the Cable Tray Support.
            Dim oCableTraySupport = New CableTraySupport(oParentSys, oSupportedColl, oSupportingColl)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.CableTraySupport.#ctor(Ingr.SP3D.Common.Middle.ISystem,System.Collections.ObjectModel.Collection{Ingr.SP3D.Route.Middle.RouteFeature},System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.BusinessObject},Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Constructor to create a cable tray support given a parent, a collection of
            supporting objects, a collection of objects to be supported, and a position for the support.
            </summary>
            <param name="oParentSys">System hierarchy parent of this support.</param>
            <param name="oSupportedColl">Collection of objects to be supported.</param>
            <param name="oSupportingColl">Collection of objects from which this support will be hung.</param>
            <param name="oPosition">Location at which the support is to be created.</param>
            <exception cref="T:System.ArgumentNullException">One or more arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.SupportInvalidParentException">Parent is not ISystem.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.SupportInvalidArgumentException">Supported objects collection has invalid objects.</exception>
            <example>How to create a new CableTraySupport by specifying the Parent System, Supported Objects, Supporting Objects, along with the position of the support.
            <code>
            'Get the Parent System.
            Dim oParentSys As ISystem = Nothing
            'Get the Collection of Supported Route Features.
            Dim oSupportedColl As Collection(Of RouteFeature) = Nothing
            'Get the Collection of Supporting Objects.
            Dim oSupportingColl As Collection(Of BusinessObject) = Nothing
            'Define the position of the support.
            Dim oPosition As New Position(0, 0, 0)  'Example uses (0,0,0)
            'Create the Cable Tray Support.
            Dim oCableTraySupport = New CableTraySupport(oParentSys, oSupportedColl, oSupportingColl, oPosition)
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.CableTraySupport.SupportedObjects">
            <summary>
            Overrides the SupportedObjects property.
            </summary>
            <exception cref="T:System.ArgumentNullException">One or more arguments are null.</exception>        
            <exception cref="T:Ingr.SP3D.Support.Exceptions.SupportInvalidArgumentException">Supported objects collection has invalid objects.</exception>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.HgrPortType">
            <summary>
            Enumerator for defining the port type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.HgrPortType.UndifinedType">
            <summary>
            Undefined port type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.HgrPortType.SupportingType">
            <summary>
            Supporting type port type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.HgrPortType.SupportedType">
            <summary>
            Supported type port type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.HgrPortType.FlexibleMemberPort">
            <summary>
            Flexible member port type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.HgrPortType.SupportingMemberPort">
            <summary>
            Supporting member port type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.HgrPortType.SupportedMemberPort">
            <summary>
            Supported member port type.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.Port">
            <summary>
            Used to create the Port object and allow modification.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.Port.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private business object constructor.
            </summary>
            <param name="oPB">Private business object.</param>
            <example>How to create a Port from an existing Business Object.
            <code>
            'Get the existing Business Object.
            Dim oPrivateBO As PrivateBusinessObject = Nothing
            'Create the Port.
            Dim oPort = New Port(oPrivateBO)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.Port.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection,Ingr.SP3D.ReferenceData.Middle.Part,System.String)">
            <summary>
            This is the constructor for port that will create the Port object given the port name 
            and part. Origin and orientation must be set explicitly.
            </summary>
            <param name="oConnection">Connection to the database.</param>
            <param name="oPart">Part required for constructing the port.</param>
            <param name="sPortName">Name of the port.</param>
            <exception cref="T:System.ArgumentNullException">One or more arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.PortCreationException">Failed to create the hanger port.</exception>
            <example>How to create a Port given a port name and part.
            <code>
            'Declare the SP3D Connection.
            Dim oConnection As SP3DConnection = Nothing
            'Get the Part.
            Dim oPart As Part = Nothing
            'Create the Port.
            Dim oPort = New Port(oConnection, oPart, "Port-Name")  '"Port-Name" is the name of the port to be created
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.Port.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection,Ingr.SP3D.ReferenceData.Middle.Part,System.String,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            The constructor for port that will create the Port object given the port name. It sets all its
            properties and the orientation using the values provided in the constructor.
            </summary>
            <param name="oConnection">Connection to the database.</param>
            <param name="oPart">Part required for constructing the port.</param>
            <param name="sPortName">Name of the port.</param>
            <param name="Org">Origin to set the orientation.</param>
            <param name="xDir">X-direction to set the orientation.</param>
            <param name="zDir">Z-direction to set the orientation.</param>
            <exception cref="T:System.ArgumentNullException">One or more arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.PortCreationException">Failed to create the hanger port.</exception>
            <example>How to create a port given a port name, part, as well as its location and orientation.
            <code>
            'Declare the SP3D Connection.
            Dim oConnection As SP3DConnection = Nothing
            'Get the Part.
            Dim oPart As Part = Nothing
            'Define the location of the Port.
            Dim oOrigin As New Position(0, 0, 0)  'Example uses (0,0,0).
            'Define the direction of the Port's X-axis.
            Dim oXAxis As New Vector(1, 0, 0)
            'Define the direction of the Port's Z-axis.
            Dim oZAxis As New Vector(0, 0, 1)
            'Create the Port.
            Dim oPort = New Port(oConnection, oPart, "Port-Name", oOrigin, oXAxis, oZAxis)  '"Port-Name" is the name of the port to be created
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.Port.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection)">
            <summary>
            The constructor for port that will only create the Port object for Place By Reference commannd.
            </summary>
            <param name="oConnection">Connection to the database.</param>
            <exception cref="T:System.ArgumentNullException">One or more arguments are null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.Port.GetOrientation(Ingr.SP3D.Common.Middle.Vector@,Ingr.SP3D.Common.Middle.Vector@)">
            <summary>
            Gets the orientation on the port.
            </summary>
            <param name="XAxis">X-axis of the port.</param>
            <param name="ZAxis">Z-axis of the port.</param>        
            <exception cref="T:Ingr.SP3D.Support.Exceptions.PortOrientationException">Failed to get the orientation of the hanger port.</exception>
            <example>How to get the orientation from a port.
            <code>
            'Get the Port.
            Dim oPort As Port = Nothing
            'Create a Vector to store the X-axis of the Port.
            Dim xAxis As Vector = Nothing
            'Create a Vector to store the Z-axis of the Port.
            Dim zAxis As Vector = Nothing
            'Get the orientation.
            oPort.GetOrientation(xAxis, zAxis)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.Port.SetOrientation(Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
             Sets the orientation of the port. 
            </summary>
            <param name="XAxis">X-axis of the port.</param>
            <param name="ZAxis">Z-axis of the port.</param>
            <exception cref="T:System.ArgumentNullException">One or more arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.PortOrientationException">Failed to get the orientation of the hanger port.</exception>
            <example>How to set the orientation from a port.
            <code>
            'Get the port.
            Dim oPort As Port = Nothing
            'Define the X-axis of the Port.
            Dim xAxis As New Vector(1, 0, 0)
            'Define the Z-axis of the port.
            Dim zAxis As New Vector(0, 0, 1)
            'Set the orientation.
            oPort.SetOrientation(xAxis, zAxis)
            </code>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ingr.SP3D.Support.Middle.Port.Name" -->
        <member name="P:Ingr.SP3D.Support.Middle.Port.Origin">
            <summary>
            Gets or sets the Origin property on the port.
            </summary>
            <exception cref="T:System.ArgumentNullException">One or more arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.PortOriginException">Failed to get or set the origin on the hanger port.</exception>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.Port.Connectable">
            <summary>
            Gets the connectable from the member system.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.Port.Connections">
            <summary>
            Gets the connections connected to a member system.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.Port.PortType">
            <summary>
            Gets the port type.
            </summary>
            <remarks>
            <list type="table">
               <listheader>
                   <term>PortType</term>
                   <description>Description</description>
               </listheader>
               <item>
                   <term>All = 1</term>
                   <description>All port type.</description>
               </item>    
               <item>
                   <term>Piping = 2</term>
                   <description>Piping port type.</description>
               </item>
               <item>
                   <term>Duct = 3</term>
                   <description>Duct port type.</description>
               </item>
               <item>
                   <term>Cable = 4</term>
                   <description>Cable port type.</description>
               </item>
               <item>
                   <term>Foundation = 5</term>
                   <description>Foundation port type.</description>
               </item>
               <item>
                   <term>Cabletray = 6</term>
                   <description>Cabletray port type.</description>
               </item>
               <item>
                   <term>Conduit = 7</term>
                   <description>Conduit port type.</description>
               </item>
               <item>
                   <term>Edge = 8</term>
                   <description>Edge port type.</description>
               </item>
               <item>
                   <term>Face = 9</term>
                   <description>Face port type.</description>
               </item>
               <item>
                   <term>End = 10</term>
                   <description>End port type.</description>
               </item>
               <item>
                   <term>Centerline = 11</term>
                   <description>Centerline port type.</description>
               </item>
            </list>
            </remarks>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.CombinedSupport">
            <summary>
            Used to create the combined support and allow modification.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.CombinedSupport.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor for .NET to access this CombinedSupport class.
            </summary>
            <param name="oPB">Private Business object.</param>
            <example>How to create a CombinedSupport from an existing Business Object.
            <code>
            'Get the existing Business Object.
            Dim oPrivateBO As PrivateBusinessObject = Nothing
            'Create the Cable Tray Support.
            Dim oCombinedSupport = New CombinedSupport(oPrivateBO)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.CombinedSupport.#ctor(Ingr.SP3D.Common.Middle.ISystem,System.Collections.ObjectModel.Collection{Ingr.SP3D.Route.Middle.RouteFeature},System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.BusinessObject})">
            <summary>
            Constructor used to create the new combined support by giving the inputs.
            </summary>
            <param name="oParentSys">Parent system.</param>
            <param name="oSupportedColl">Supported collection.</param>
            <param name="oSupportingColl">Supporting collection.</param>
            <exception cref="T:System.ArgumentNullException">One or more arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid arguments.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.SupportInvalidParentException">Parent is not ISystem.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.SupportInvalidArgumentException">Supported objects collection has invalid objects.</exception>
            <example>How to create a new CombinedSupport by specifying the Parent System, Supported Objects, and Supporting Objects.
            <code>
            'Get the Parent System.
            Dim oParentSys As ISystem = Nothing
            'Get the Collection of Supported Route Features.
            Dim oSupportedColl As Collection(Of RouteFeature) = Nothing
            'Get the Collection of Supporting Objects.
            Dim oSupportingColl As Collection(Of BusinessObject) = Nothing
            'Create the Combined Support.
            Dim oCombinedSupport = New CombinedSupport(oParentSys, oSupportedColl, oSupportingColl)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.CombinedSupport.#ctor(Ingr.SP3D.Common.Middle.ISystem,System.Collections.ObjectModel.Collection{Ingr.SP3D.Route.Middle.RouteFeature},System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.BusinessObject},Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Constructor used to create the new combined support by giving the inputs.
            </summary>
            <param name="oParentSys">Parent system.</param>
            <param name="oSupportedColl">Supported collection.</param>
            <param name="oSupportingColl">Supporting collection.</param>
            <param name="oPosition">Support position.</param>
            <exception cref="T:System.ArgumentNullException">One or more arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid arguments.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.SupportInvalidParentException">Parent is not ISystem.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.SupportInvalidArgumentException">Supported objects collection has invalid objects.</exception>
            <example>How to create a new CombinedSupport by specifying the Parent System, Supported Objects, Supporting Objects, along with the position of the support.
            <code>
            'Get the Parent System.
            Dim oParentSys As ISystem = Nothing
            'Get the Collection of Supported Route Features.
            Dim oSupportedColl As Collection(Of RouteFeature) = Nothing
            'Get the Collection of Supporting Objects.
            Dim oSupportingColl As Collection(Of BusinessObject) = Nothing
            'Define the position of the support.
            Dim oPosition As New Position(0, 0, 0)  'Example uses (0,0,0)
            'Create the Combined Support.
            Dim oCombinedSupport = New CombinedSupport(oParentSys, oSupportedColl, oSupportingColl, oPosition)
            </code>
            </example>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.Hidden.SupportUtils">
            <summary>
            SupportUtils class contains helper methods
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.Hidden.SupportUtils.GetProxy(Ingr.SP3D.Common.Middle.Services.SP3DConnection,Ingr.SP3D.ReferenceData.Middle.Part)">
            <summary>
            return the proxy object of the given part
            </summary>
            <param name="oModelConn">Model Connection</param>
            <param name="oPart">Part</param>
            <returns>Proxy object</returns>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.Hidden.SupportUtils.IsValidateSupportedObjs(System.Collections.ObjectModel.Collection{Ingr.SP3D.Route.Middle.RouteFeature},System.String)">
            <summary>
            returns true if supportedobjects are valid
            </summary>
            <param name="oSupEdObjects">SupporetedObjects</param>
            <param name="sValInterfaces">ValidateInterfaceNames String</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.Hidden.SupportUtils.IsValidateSupportIngObjs(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.BusinessObject},System.String)">
            <summary>
            This method validates the supporting objects.
            </summary>
            <param name="oSupIngObjects">Supporting Objects</param>
            <param name="sValInterfaces">sInterface names</param>
            <returns>returns true/false</returns>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.Hidden.SupportUtils.GetDefaultNameRule">
            <summary>
            returns the defaultname rule object
            </summary>
            <returns>default Hanger Namerule object</returns>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.Hidden.SupportUtils.CreateSupport(Ingr.SP3D.Common.Middle.ISystem,System.String)">
            <summary>
            returns COM Support based on SupProgID
            </summary>
            <param name="oSys">System</param>
            <param name="sSupProgID">Support Prog ID</param>
            <returns>Support COM object</returns>
        </member>
        <member name="T:Ingr.SP3D.Support.Exceptions.ConnectionPortsCreationException">
            <summary>
            Raised when ConnectionPorts creation fails unexpectedly.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.ConnectionPortsCreationException.#ctor(System.Int32,System.String)">
            <summary>
             Instantiates when connection port creation fails.
            </summary>
            <param name="iMessageID">The error message number that explains the reason for the exception.</param>
            <param name="sDefaultMessage"> Default error message. </param>
        </member>
        <member name="T:Ingr.SP3D.Support.Exceptions.ConnectionComponentWeightCGException">
            <summary>
            Raised when ConnectionComponentsWeighCG calculation failed.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.ConnectionComponentWeightCGException.#ctor(System.Int32,System.String)">
            <summary>
             Instantiates whenConnectionComponentsWeighCG calculation failed.
            </summary>
            <param name="iMessageID">The error message number that explains the reason for the exception.</param>
            <param name="sDefaultMessage"> Default error message. </param>
        </member>
        <member name="T:Ingr.SP3D.Support.Exceptions.SupportInvalidArgumentException">
            <summary>
            Raised when an argument is not valid.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.SupportInvalidArgumentException.#ctor(System.Int32,System.String)">
             <summary>
            Instantiates when an argument is not valid. 
             </summary>
             <param name="iMessageID">The error message number that explains the reason for the exception.</param>
             <param name="sDefaultMessage"> Default error message. </param>
        </member>
        <member name="T:Ingr.SP3D.Support.Exceptions.SupportInvalidParentException">
            <summary>
            Raised when calling routines do not have a valid parent system object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.SupportInvalidParentException.#ctor(System.Int32,System.String)">
            <summary>
             Instantiates when calling routines do not have a valid parent system object.
            </summary>
            <param name="iMessageID">The error message number that explains the reason for the exception.</param>
            <param name="sDefaultMessage"> Default error message. </param>
        </member>
        <member name="T:Ingr.SP3D.Support.Exceptions.SupportFactoryFailedException">
            <summary>
            Raised when calling routines do not have a valid parent system object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.SupportFactoryFailedException.#ctor(System.Int32,System.String)">
            <summary>
             Instantiates when there is failure to create a support factory.
            </summary>
            <param name="iMessageID">The error message number that explains the reason for the exception.</param>
            <param name="sDefaultMessage"> Default error message. </param>
        </member>
        <member name="T:Ingr.SP3D.Support.Exceptions.SupportObjectNullException">
            <summary>
            Raised when a null is returned by calling IJDPOM.GetObject.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.SupportObjectNullException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the ObjectNullException 
            class with the error message.
            </summary>
            <param name="iMessageID">The error message number that explains the reason for the exception.</param>
            <param name="sDefaultMessage"> Default error message. </param>
        </member>
        <member name="T:Ingr.SP3D.Support.Exceptions.SupportSOMHelperCreationException">
            <summary>
            Raised when there is failure to create a .NET helper.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.SupportSOMHelperCreationException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes when there is failure to create a .NET helper.
            </summary>
            <param name="iMessageID">The error message number that explains the reason for the exception.</param>
            <param name="sDefaultMessage"> Default error message. </param>
        </member>
        <member name="T:Ingr.SP3D.Support.Exceptions.SupportCreateAEException">
            <summary>
            Raised when there is failure to create a support assembly entity.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.SupportCreateAEException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes when there is failure to create a support assembly entity.
            </summary>
            <param name="iMessageID">The error message number that explains the reason for the exception.</param>
            <param name="sDefaultMessage"> Default error message. </param>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.SupportCreateAEException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the SupportCreateAEException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Support.Exceptions.SupportDefinitionException">
            <summary>
            Raised when there is failure to get or set the support definition.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.SupportDefinitionException.#ctor(System.Int32,System.String)">
            <summary>
            Failed to get or set the support definition on the support.
            </summary>
            <param name="iMessageID">The error message number that explains the reason for the exception.</param>
            <param name="sDefaultMessage"> Default error message. </param>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.SupportDefinitionException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the SupportDefinitionException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Support.Exceptions.SupportingObjectsException">
            <summary>
            Raised when there is failure to get or set the supporting objects.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.SupportingObjectsException.#ctor(System.Int32,System.String)">
            <summary>
            Failed to get or set the supporting objects.
            </summary>
            <param name="iMessageID">The error message that explains the reason for the exception.</param>
            <param name="sDefaultMessage"> Default error message. </param>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.SupportingObjectsException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the SupportingObjectsException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Support.Exceptions.SupportingFacesException">
            <summary>
            Raised when there is failure to get supporting objects ports or surfaces.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.SupportingFacesException.#ctor(System.Int32,System.String)">
            <summary>
            Failed to get the supporting objects ports or surfaces.
            </summary>
            <param name="iMessageID">The error message that explains the reason for the exception.</param>
            <param name="sDefaultMessage"> Default error message. </param>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.SupportingFacesException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the SupportingFacesException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Support.Exceptions.SupportedObjectsException">
            <summary>
            Raised when there is failure to get or set the supported objects.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.SupportedObjectsException.#ctor(System.Int32,System.String)">
            <summary>
            Failed to get or set the supported objects.
            </summary>
            <param name="iMessageID">The error message number that explains the reason for the exception.</param>
            <param name="sDefaultMessage"> Default error message. </param>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.SupportedObjectsException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the SupportedObjectsException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Support.Exceptions.SupportPositionException">
            <summary>
            Raised when there is failure to get or set the support position.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.SupportPositionException.#ctor(System.Int32,System.String)">
            <summary>
            Failed to get or set the support position.
            </summary>
            <param name="iMessageID">The error message number that explains the reason for the exception.</param>
            <param name="sDefaultMessage"> Default error message. </param>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.SupportPositionException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the SupportPositionException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Support.Exceptions.IsDesignSupportAssemblyException">
            <summary>
            Raised when there is failure to return the boolean value if the support is a standard or design support.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.IsDesignSupportAssemblyException.#ctor(System.Int32,System.String)">
            <summary>
            Failed to return the boolean value if the support is a standard or design support.
            </summary>
            <param name="iMessageID">The error message number that explains the reason for the exception.</param>
            <param name="sDefaultMessage"> Default error message. </param>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.IsDesignSupportAssemblyException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the IsDesignSupportAssemblyException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Support.Exceptions.PortCreationException">
            <summary>
            Raised when there is failure to create the hanger port.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.PortCreationException.#ctor(System.Int32,System.String)">
            <summary>
            Failed to create the hanger port.
            </summary>
            <param name="iMessageID">The error message number that explains the reason for the exception.</param>
            <param name="sDefaultMessage"> Default error message. </param>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.PortCreationException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the PortCreationException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Support.Exceptions.PortOriginException">
            <summary>
            Raised when there is failure to get or set the origin of the hanger port.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.PortOriginException.#ctor(System.Int32,System.String)">
            <summary>
            Raised when there is failure to get or set the origin of the hanger port.
            </summary>
            <param name="iMessageID">The error message number that explains the reason for the exception.</param>
            <param name="sDefaultMessage"> Default error message. </param>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.PortOriginException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the PortOriginException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Support.Exceptions.PortOrientationException">
            <summary>
            Raised when there is failure to get or set the orientation of the hanger port.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.PortOrientationException.#ctor(System.Int32,System.String)">
            <summary>
            Raised when there is failure to get or set the orientation of the hanger port.
            </summary>
            <param name="iMessageID">The error message number that explains the reason for the exception.</param>
            <param name="sDefaultMessage"> Default error message. </param>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.PortOrientationException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the PortOrientationException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Support.Exceptions.HgrConnectablePortsException">
            <summary>
            Raised when there is failure to get connectable ports of the support or support component.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.HgrConnectablePortsException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the HgrConnectablePortsException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Support.Exceptions.HgrConnectedPortsException">
            <summary>
            Raised when there is failure to get connected ports of the support or support component.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.HgrConnectedPortsException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the HgrConnectedPortsException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Support.Exceptions.HgrConnectableException">
            <summary>
            Raised when there is failure to get the connectable from SupportPort.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.HgrConnectableException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the HgrConnectableException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Support.Exceptions.HgrConnectionException">
            <summary>
            Raised when there is failure to get the connection from SupportPort.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.HgrConnectionException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the HgrConnectionException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Support.Exceptions.HgrPortTypeException">
            <summary>
            Raised when there is failure to retrieve PortType from SupportPort.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.HgrPortTypeException.#ctor(System.Int32,System.String)">
            <summary>
            Raised when there is failure to retrieve the PortType.
            </summary>
            <param name="iMessageID">The error message number that explains the reason for the exception.</param>
            <param name="sDefaultMessage"> Default error message. </param>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.HgrPortTypeException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the HgrPortTypeException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Support.Exceptions.HgrPortsException">
            <summary>
            Raised when there is failure to get ports of the support or support component.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.HgrPortsException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the HgrPortsException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Support.Exceptions.HgrIsConnectedToException">
            <summary>
            Raised when there is failure to get the objects that are connected to the support.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.HgrIsConnectedToException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the HgrIsConnectedToException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Support.Exceptions.HgrDesignSupportAsChildException">
            <summary>
            Raised when a user attempts to drop a standard support, whose parent is either a standard or a design support.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.HgrDesignSupportAsChildException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the HgrDesignSupportAsChildException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Support.Exceptions.HgrASRNotFoundException">
            <summary>
            Raised when a part is not found for design support.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.HgrASRNotFoundException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the HgrASRNotFoundException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Support.Exceptions.HgrNoAssembliesFromASRException">
            <summary>
             Raised when an Assembly Selection Rule is not found for the design support. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.HgrNoAssembliesFromASRException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the HgrNoAssembliesFromASRException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Support.Exceptions.HgrLCSPositionOrOrientationException">
            <summary>
            Raised when there is failure to get the position or orientation of the local coordinate system of the support.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.HgrLCSPositionOrOrientationException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the HgrLCSPositionOrOrientationException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Support.Exceptions.HgrRangeException">
            <summary>
            Raised when there is failure to get the range of the support.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.HgrRangeException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the HgrRangeException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Support.Exceptions.HgrTransformException">
            <summary>
            Raised when there is failure to perform a transform of the support.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.HgrTransformException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the HgrTransformException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Support.Exceptions.HangerPortFactoryFailedException">
            <summary>
            Failed to create the hanger port factory.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.HangerPortFactoryFailedException.#ctor(System.Int32,System.String)">
            <summary>
             Instantiates when there is failure to create a hanger port factory.
            </summary>
            <param name="iMessageID">The error message number that explains the reason for the exception.</param>
            <param name="sDefaultMessage"> Default error message. </param>
        </member>
        <member name="T:Ingr.SP3D.Support.Exceptions.HangerPartException">
            <summary>
            Raised when the hanger part is not valid.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.HangerPartException.#ctor(System.Int32,System.String)">
            <summary>
            Raised when the hanger part is not valid.
            </summary>
            <param name="iMessageID">The error message number that explains the reason for the exception.</param>
            <param name="sDefaultMessage"> Default error message. </param>
        </member>
        <member name="T:Ingr.SP3D.Support.Exceptions.AddPartException">
            <summary>
            Failed to add a part to the design support.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.AddPartException.#ctor(System.Int32,System.String)">
            <summary>
            Failed to add a part to the Design Support.
            </summary>
            <param name="iMessageID">The error message number that explains the reason for the exception.</param>
            <param name="sDefaultMessage"> Default error message. </param>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.AddPartException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the SupportCreateAEException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Support.Exceptions.PartFromPartClassException">
            <summary>
            Failed to get the part from the part class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.PartFromPartClassException.#ctor(System.Int32,System.String)">
            <summary>
            Hanger part is not valid.
            </summary>
            <param name="iMessageID">The error message number that explains the reason for the exception.</param>
            <param name="sDefaultMessage"> Default error message. </param>
        </member>
        <member name="T:Ingr.SP3D.Support.Exceptions.HangerPortFromSupCompException">
            <summary>
            Failed to get the hanger port from the given support component.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.HangerPortFromSupCompException.#ctor(System.Int32,System.String)">
            <summary>
            Hanger part is not valid.
            </summary>
            <param name="iMessageID">The error message number that explains the reason for the exception.</param>
            <param name="sDefaultMessage"> Default error message. </param>
        </member>
        <member name="T:Ingr.SP3D.Support.Exceptions.CannotSetMatrixOnLocalCoorOfSup">
            <summary>
            Raised if the user cannot set the matrix on the local coordinate system of the support.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.CannotSetMatrixOnLocalCoorOfSup.#ctor">
            <summary>
            Raised an exception if there is failure to set the matrix on the local coordinate system of the support.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Exceptions.SupportDoesntHaveSupportedOrIngObjsException">
            <summary>
            Raised when the support does not have supported or supporting objects.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.SupportDoesntHaveSupportedOrIngObjsException.#ctor(System.Int32,System.String)">
            <summary>
            Raised when the support does not have supported or supporting objects.
            </summary>
            <param name="iMessageID">The error message number that explains the reason for the exception.</param>
            <param name="sDefaultMessage"> Default error message. </param>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.SupportDoesntHaveSupportedOrIngObjsException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the SupportDoesntHaveInputsException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Support.Exceptions.UnitNotSetException">
            <summary>
            Raised when the nominal diameter does not have units set.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.UnitNotSetException.#ctor(System.Int32,System.String)">
            <summary>
             Raised when the nominal diameter does not have units set.
            </summary>
            <param name="iMessageID">The error message number that explains the reason for the exception.</param>
            <param name="sDefaultMessage"> Default error message. </param>
        </member>
        <member name="T:Ingr.SP3D.Support.Exceptions.BBXMissingException">
            <summary>
            Raised when unable to get the specified bounding box.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.BBXMissingException.#ctor(System.Int32,System.String)">
            <summary>
             Raised when unable to get the specified bounding box.
            </summary>
            <param name="iMessageID">The error message number that explains the reason for the exception.</param>
            <param name="sDefaultMessage"> Default error message. </param>
        </member>
        <member name="T:Ingr.SP3D.Support.Exceptions.BBXCreationFailed">
            <summary>
            Raised when the bounding box creation fails.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.BBXCreationFailed.#ctor(System.Int32,System.String)">
            <summary>
             Raised when bounding box creation fails.
            </summary>
            <param name="iMessageID">The error message number that explains the reason for the exception.</param>
            <param name="sDefaultMessage"> Default error message. </param>
        </member>
        <member name="T:Ingr.SP3D.Support.Exceptions.ConnectionComponentNotRelatedToCrossSectionException">
            <summary>
            Raised when the connection component is not related to the cross section.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.ConnectionComponentNotRelatedToCrossSectionException.#ctor(System.Int32,System.String)">
            <summary>
             Raised when the connection component is not related to the cross section.
            </summary>
            <param name="iMessageID">The error message number that explains the reason for the exception.</param>
            <param name="sDefaultMessage"> Default error message. </param>
        </member>
        <member name="T:Ingr.SP3D.Support.Exceptions.SetWeightCGException">
            <summary>
            Raised when WeighCG setting failed.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.SetWeightCGException.#ctor(System.Int32,System.String)">
            <summary>
             Instantiates when SetWeightAndCOG calculation failed.
            </summary>
            <param name="iMessageID">The error message number that explains the reason for the exception.</param>
            <param name="sDefaultMessage"> Default error message. </param>
        </member>
        <member name="T:Ingr.SP3D.Support.Exceptions.GetVolumeCGException">
            <summary>
            Raised when Getting Volume and CG failed.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Exceptions.GetVolumeCGException.#ctor(System.Int32,System.String)">
            <summary>
             Instantiates when Volume and CG calculation failed.
            </summary>
            <param name="iMessageID">The error message number that explains the reason for the exception.</param>
            <param name="sDefaultMessage"> Default error message. </param>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.DuctSupport">
            <summary>
            DuctSupport class which inherits from the Support base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.DuctSupport.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor for .NET to access this DuctSupport class.
            </summary>
            <param name="oPB">Private Business object</param>
            <example>How to create a DuctSupport from an existing Business Object.
            <code>
            'Get the existing Business Object.
            Dim oPrivateBO As PrivateBusinessObject = Nothing
            'Create the Duct Support.
            Dim oDuctSupport = New DuctSupport(oPrivateBO)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.DuctSupport.#ctor(Ingr.SP3D.Common.Middle.ISystem,System.Collections.ObjectModel.Collection{Ingr.SP3D.Route.Middle.RouteFeature},System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.BusinessObject})">
            <summary>
            Constructor to create a duct support given a parent, a collection of supporting objects,
            and a collection of objects to be supported.
            </summary>
            <param name="oParent">System hierarchy parent of this support.</param>
            <param name="oSupportedColl">Collection of objects to be supported.</param>
            <param name="oSupportingColl">Collection of objects from which this support will be hung.</param>
            <exception cref="T:System.ArgumentNullException">One or more arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.InvalidParentException">Parent system is not valid.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnAccessDeniedException">Access denied, unable to create the object.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Unable to create the object due to working status.</exception>
            <example>How to create a new DuctSupport by specifying the Parent System, Supported Objects, and Supporting Objects.
            <code>
            'Get the Parent System.
            Dim oParentSys As ISystem = Nothing
            'Get the Collection of Supported Route Features.
            Dim oSupportedColl As Collection(Of RouteFeature) = Nothing
            'Get the Collection of Supporting Objects.
            Dim oSupportingColl As Collection(Of BusinessObject) = Nothing
            'Create the Duct Support.
            Dim oDuctSupport = New DuctSupport(oParentSys, oSupportedColl, oSupportingColl)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.DuctSupport.#ctor(Ingr.SP3D.Common.Middle.ISystem,System.Collections.ObjectModel.Collection{Ingr.SP3D.Route.Middle.RouteFeature},System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.BusinessObject},Ingr.SP3D.Common.Middle.Position)">
            <summary>
            DuctSupport constructor used to create a duct support given a parent, a collection of
            supporting objects, a collection of objects to be supported, and a position for the support.
            </summary>
            <param name="oParent">System hierarchy parent of this support.</param>
            <param name="oSupportedColl">Collection of objects to be supported.</param>
            <param name="oSupportingColl">Collection of objects from which this support will be hung.</param>
            <param name="oPosition">Location at which the support is to be created.</param>
            <exception cref="T:System.ArgumentNullException">One or more arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.InvalidParentException">Parent system is not valid.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnAccessDeniedException">Access denied, unable to create the object.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Unable to create the object due to working status.</exception>
            <example>How to create a new DuctSupport by specifying the Parent System, Supported Objects, Supporting Objects, along with the position of the support.
            <code>
            'Get the Parent System.
            Dim oParentSys As ISystem = Nothing
            'Get the Collection of Supported Route Features.
            Dim oSupportedColl As Collection(Of RouteFeature) = Nothing
            'Get the Collection of Supporting Objects.
            Dim oSupportingColl As Collection(Of BusinessObject) = Nothing
            'Define the position of the support.
            Dim oPosition As New Position(0, 0, 0)  'Example uses (0,0,0)
            'Create the Duct Support.
            Dim oDuctSupport = New DuctSupport(oParentSys, oSupportedColl, oSupportingColl, oPosition)
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.DuctSupport.SupportedObjects">
            <summary>
            Overrides the SupportedObjects property.
            </summary>
            <exception cref="T:System.ArgumentNullException">One or more arguments are null.</exception>        
            <exception cref="T:Ingr.SP3D.Support.Exceptions.SupportInvalidArgumentException">Supported objects collection has invalid objects.</exception>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.PipeSupport">
            <summary>
            Used to create the pipe support and allow modification.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.PipeSupport.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor for .NET to access this PipeSupport class.
            </summary>
            <param name="oPB">Private Business object</param>
            <example>How to create a PipeSupport from an existing Business Object.
            <code>
            'Get the existing Business Object.
            Dim oPrivateBO As PrivateBusinessObject = Nothing
            'Create the Pipe Support.
            Dim oPipeSupport = New PipeSupport(oPrivateBO)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.PipeSupport.#ctor(Ingr.SP3D.Common.Middle.ISystem,System.Collections.ObjectModel.Collection{Ingr.SP3D.Route.Middle.RouteFeature},System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.BusinessObject})">
            <summary>
            Pipe support constructor used to create the new pipe support by giving the inputs.
            </summary>
            <param name="oParentSys">Parent system.</param>
            <param name="oSupportedColl">Supported collection.</param>
            <param name="oSupportingColl">Supporting collection.</param>
            <exception cref="T:System.ArgumentNullException">One or more arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid arguments.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.SupportInvalidParentException">Parent is not ISystem.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.SupportInvalidArgumentException">Supported objects collection has invalid objects.</exception>
            <example>How to create a new PipeSupport by specifying the Parent System, Supported Objects, and Supporting Objects.
            <code>
            'Get the Parent System.
            Dim oParentSys As ISystem = Nothing
            'Get the Collection of Supported Route Features.
            Dim oSupportedColl As Collection(Of RouteFeature) = Nothing
            'Get the Collection of Supporting Objects.
            Dim oSupportingColl As Collection(Of BusinessObject) = Nothing
            'Create the Pipe Support.
            Dim oPipeSupport = New PipeSupport(oParentSys, oSupportedColl, oSupportingColl)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.PipeSupport.#ctor(Ingr.SP3D.Common.Middle.ISystem,System.Collections.ObjectModel.Collection{Ingr.SP3D.Route.Middle.RouteFeature},System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.BusinessObject},Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Pipe support constructor used to create the new pipe support by giving the inputs.
            </summary>
            <param name="oParentSys">Parent system.</param>
            <param name="oSupportedColl">Supported collection.</param>
            <param name="oSupportingColl">Supporting collection.</param>
            <param name="oPosition">Support position.</param>
            <exception cref="T:System.ArgumentNullException">One or more arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid arguments.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.SupportInvalidParentException">Parent is not ISystem.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.SupportInvalidArgumentException">Supported objects collection has invalid objects.</exception>
            <example>How to create a new PipeSupport by specifying the Parent System, Supported Objects, Supporting Objects, along with the position of the support.
            <code>
            'Get the Parent System.
            Dim oParentSys As ISystem = Nothing
            'Get the Collection of Supported Route Features.
            Dim oSupportedColl As Collection(Of RouteFeature) = Nothing
            'Get the Collection of Supporting Objects.
            Dim oSupportingColl As Collection(Of BusinessObject) = Nothing
            'Define the position of the support.
            Dim oPosition As New Position(0, 0, 0)  'Example uses (0,0,0)
            'Create the Pipe Support.
            Dim oPipeSupport = New PipeSupport(oParentSys, oSupportedColl, oSupportingColl, oPosition)
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.PipeSupport.SupportedObjects">
            <summary>
            Overrides the SupportedObjects property.
            </summary>
            <exception cref="T:System.ArgumentNullException">One or more arguments are null.</exception>        
            <exception cref="T:Ingr.SP3D.Support.Exceptions.SupportInvalidArgumentException">Supported objects collection has invalid objects.</exception>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.StandardComponent">
            <summary>
            StandardComponent class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.StandardComponent.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.StandardComponent.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructs a StandardComponent from the database.
            </summary>
            <param name="oPrivateBusinessObject">PrivateBusinessObject</param>
            <example>How to create a StandardComponent from an existing Business Object.
            <code>
            'Get the existing Business Object.
            Dim oPrivateBO As PrivateBusinessObject = Nothing
            'Create the Standard Component.
            Dim oStandardComponent = New StandardComponent(oPrivateBO)
            </code>
            </example>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs">
            <summary>
            Support resource identifiers.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrInvalidArguments">
            <summary>
            Invalid input arguments.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrRetrieveObject">
            <summary>
            Failed to retrieve Object.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrModifyObject">
            <summary>
            Failed to Modify the Object.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrParent">
            <summary>
            Failed to get Parent.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrInvalidparent">
            <summary>
            Invalid Parent.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.NoComSupportComponent">
            <summary>
            Failed to get COM Support Componet object.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrElements">
            <summary>
            Error in get/set the elements.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrInvalidCategory">
            <summary>
            Invalid Category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrURetrieveObject">
            <summary>
            Error in retrieve user object.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrUVerifyObject">
            <summary>
            Error in Verify the user object.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrVerifyObject">
            <summary>
            Error in Verify the object.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrInvalidSupportedColl">
            <summary>
            Invalid Supported Collection.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrInvalidSupportingColl">
            <summary>
            Invalid Supporting Collection.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrSupportFactory">
            <summary>
            Error in Support Factory.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrFailedSupportFactory">
            <summary>
            Failed to get the Support Factory.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrSupportSOMHelperFailure">
            <summary>
            Failed to get the Support SOM Helper.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrSupportCreateAE">
            <summary>
            Failed to create Support AE.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrIsValidateSupportedObjs">
            <summary>
            Error in Validate Supported Objects.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrIsValidateSupportingObjs">
            <summary>
            Error in Validate supporting objects.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrFailedinSupDef">
            <summary>
            Failed to get/set the support definition.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrFailedinSupEd">
            <summary>
            Failed to get/set the supported objects on support.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrFailedinSupIng">
            <summary>
            Failed to get/set the supporting objects on support.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrFailedinSupPos">
            <summary>
            Failed to get/set the support position on support.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrFailedinIsDesignAsmm">
            <summary>
            Failed to return true/false, whether given support is design support.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrPortCreation">
            <summary>
            Failed to create the PortCreation.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrPortOrigin">
            <summary>
            Failed to set/get the Port Origin.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrPortOrientation">
            <summary>
            Failed to set/get the Port Orientation.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrConnectablePort">
            <summary>
            Failed to get the Connectable Ports.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrConnectedPort">
            <summary>
            Failed to get the Connected Ports.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrPort">
            <summary>
            Failed to get the Ports.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrIsConnectedTo">
            <summary>
            Fialed to get the Connected Ports of the given port.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrLCSPosOrientation">
            <summary>
            Failed to set Position or Orientation on LCS.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrHgrRange">
            <summary>
            Failed to get the Range of the Support.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrHgrTransform">
            <summary>
            Failed to do trasfomation of the Support.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrPortFac">
            <summary>
            Failed to create the Hanger Port Factory.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrInvalidHangerPart">
            <summary>
            Hanger part is Invalid.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrAddPart">
            <summary>
            Failed to add part to design support.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrPartFromPartClass">
            <summary>
            Failed to get the Part from given part class.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrPortFromSupComp">
            <summary>
            Failed to get the port from support component.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ThirdPartyConfiguration">
            <summary>
            ThirdParty PlugIn Configuration.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ThirdPartyPlugInNotFound">
            <summary>
            Not able to get the ThirdParty Plugin From the Catalog Rule or Default Rule.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.SelectSuppComp">
            <summary>
            Select SupportComponent.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.SelectDesignSupport">
            <summary>
            Select Design Support.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.SelectDesignSuppCompSteel">
            <summary>
            Select a Design Support Component (secondary steel) before calling the command!
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.PartNotSelected">
            <summary>
            Part Not Selected
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.SlecetDiffPart">
            <summary>
            Select part from different part class.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.InvalidRuleSpecified">
            <summary>
            The Rule Specified is Invalid.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.SelectMatchPart">
            <summary>
            Select the Part wchich matches
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrCannotSetMatrix">
            <summary>
            Can not able to set matrix on local coordinate system of support.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.SupDoesntHvSupEdorIng">
            <summary>
            support does not have supported or supporting objects.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.UnableToFindAssembly">
            <summary>
            Unable to find the assembly at 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.CheckTheRule">
            <summary>
            Check the Rule provided.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.FailGetTypeRule">
            <summary>
            Failed in getting the Type specified in the Rule.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.UnableGetTypeRule">
            <summary>
            Unable to find the Type specified in the Rule.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.InterfaceNotInherit">
            <summary>
            Interface provided by the software is not inherited.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.CheckNETConfig">
            <summary>
            Unable to create an instance of the Rule.Check the .NET configuration settings on your system.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.RunMapToolAndTry">
            <summary>
            Unable to find the path for the PlugIn Assembly. Run ProgIDClassIDMapTool.exe and try again.
            </summary>   
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.SelectSupport">
            <summary>
            Select Support;
            </summary>   
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.NoCatalogPart">
            <summary>
            No catalog Part;
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.DESIGNSUPP_UNDER_DESIGNORSTD">
            <summary>
            Design Support cannot be added as child to another Standard or Design support
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.NO_ASSEMBLIES_FROM_ASR">
            <summary>
            No assemblies returned from ASR
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.NO_ASR_FOUND">
            <summary>
            No ASR found
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.SP3D_CAPTION">
            <summary>
            SP3D Caption
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.OBJECT_NOT_IN_WORKINGSTATUS">
            <summary>
            Object not in Working Status
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrConnectable">
            <summary>
            Failed to get Connectable Object 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrConnection">
            <summary>
            Failed to get Connections
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrGetPortType">
            <summary>
            Unable to get The PortType
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.InValidSupportedObject">
            <summary>
            Unable to get the Supported Object Information
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.UnitNameNotSet">
            <summary>
            Unit name is not set on the Nominal Diameter
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.BBXMissing">
            <summary>
            Unable to get the specified Bounding Box 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.BBXCreationFailed">
            <summary>
            Bounding Box Creation Failed
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrToGetConnPortsForBeams">
            <summary>
            Unable to Create Connection Ports
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrToCalcWCGForBeams">
            <summary>
            Unable to Calculate Weight and CG for Beam
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrCatalogPartIsNull">
            <summary>
            Catalog Part is null
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ConnectionCompNotRelatedToCS">
            <summary>
            Connection component is not related to cross section.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.InvalidRefPortNameArgument">
            <summary>
            Invalid Reference port name passed as argument.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrInWeightCG">
            <summary>
            Unexpected failure while trying to set weight and center of gravity
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.DEFAULT_RESOURCE">
            <summary>
            Default Resource Name.
            </summary>   
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.DEFAULT_ASSEMBLY">
            <summary>
            Default Assembly Name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrMismatchDictionaryValueType">
            <summary>
            Mismatch in the datatype of the IDictionary value
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrClassItemNotFound">
            <summary>
            No Class Item found by the given criteria
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrPartClassNotFound">
            <summary>
            No Part Class found by the given criteria
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrEmptyKey">
            <summary>
            Empty Key(Attribute Name) in the IDictionary
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrInVolumeCG">
            <summary>
            Unable to get volume and center of gravity for the support component.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Services.SupportResourceIDs.ErrFailedinSupIngFaces">
            <summary>
            failed to get the supporting objects ports or surfaces
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.ConduitSupport">
            <summary>
            Used to create the conduit support and allow modification.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.ConduitSupport.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor for .NET to access this ConduitSupport class.
            </summary>
            <param name="oPB">Private Business object.</param>
            <example>How to create a ConduitSupport from an existing Business Object.
            <code>
            'Get the existing Business Object.
            Dim oPrivateBO As PrivateBusinessObject = Nothing
            'Create the Conduit Support.
            Dim oConduitSupport = New ConduitSupport(oPrivateBO)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.ConduitSupport.#ctor(Ingr.SP3D.Common.Middle.ISystem,System.Collections.ObjectModel.Collection{Ingr.SP3D.Route.Middle.RouteFeature},System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.BusinessObject})">
            <summary>
            Constructor to create a conduit support given a parent, a collection of supporting objects,
            and a collection of objects to be supported.
            </summary>
            <param name="oParentSys">System hierarchy parent of this support.</param>
            <param name="oSupportedColl">Collection of objects to be supported.</param>
            <param name="oSupportingColl">Collection of objects from which this support will be hung.</param>
            <exception cref="T:System.ArgumentNullException">One or more arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.SupportInvalidParentException">Parent is not ISystem.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.SupportInvalidArgumentException">Supported objects collection has invalid objects.</exception>
            <example>How to create a new ConduitSupport by specifying the Parent System, Supported Objects, and Supporting Objects.
            <code>
            'Get the Parent System.
            Dim oParentSys As ISystem = Nothing
            'Get the Collection of Supported Route Features.
            Dim oSupportedColl As Collection(Of RouteFeature) = Nothing
            'Get the Collection of Supporting Objects.
            Dim oSupportingColl As Collection(Of BusinessObject) = Nothing
            'Create the Conduit Support.
            Dim oCombinedSupport = New CombinedSupport(oParentSys, oSupportedColl, oSupportingColl)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.ConduitSupport.#ctor(Ingr.SP3D.Common.Middle.ISystem,System.Collections.ObjectModel.Collection{Ingr.SP3D.Route.Middle.RouteFeature},System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.BusinessObject},Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Constructor to create a conduit support given a parent, a collection of
            supporting objects, a collection of objects to be supported, and a position for the support.
            </summary>
            <param name="oParentSys">System hierarchy parent of this support.</param>
            <param name="oSupportedColl">Collection of objects to be supported.</param>
            <param name="oSupportingColl">Collection of objects from which this support will be hung.</param>
            <param name="oPosition">Location at which the support is to be created.</param>
            <exception cref="T:System.ArgumentNullException">One or more arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.SupportInvalidParentException">Parent is not ISystem.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.SupportInvalidArgumentException">Supported objects collection has invalid objects.</exception>
            <example>How to create a new ConduitSupport by specifying the Parent System, Supported Objects, Supporting Objects, along with the position of the support.
            <code>
            'Get the Parent System.
            Dim oParentSys As ISystem = Nothing
            'Get the Collection of Supported Route Features.
            Dim oSupportedColl As Collection(Of RouteFeature) = Nothing
            'Get the Collection of Supporting Objects.
            Dim oSupportingColl As Collection(Of BusinessObject) = Nothing
            'Define the position of the support.
            Dim oPosition As New Position(0, 0, 0)  'Example uses (0,0,0)
            'Create the Conduit Support.
            Dim oCombinedSupport = New CombinedSupport(oParentSys, oSupportedColl, oSupportingColl, oPosition)
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.ConduitSupport.SupportedObjects">
            <summary>
            Overrides the SupportedObjects property.
            </summary>
            <exception cref="T:System.ArgumentNullException">One or more arguments are null.</exception>        
            <exception cref="T:Ingr.SP3D.Support.Exceptions.SupportInvalidArgumentException">Supported objects collection has invalid objects.</exception>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.AnchorPoint">
            <summary>
            Enumerator of CardinalPoints that are valid to trim/slice.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.AnchorPoint.BottomCenter">
            <summary>
            Cardinal point 2 of the beam.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.AnchorPoint.MiddleLeft">
            <summary>
            Cardinal point 4 of the beam.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.AnchorPoint.MiddleRight">
            <summary>
            Cardinal point 6 of the beam.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.AnchorPoint.TopCenter">
            <summary>
            Cardinal point 8 of the beam.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.HangerComponentSymbolDefinition">
            <summary>
            Abstract class used as a base class by every hanger-specific symbol definition base class.
            This contains all the methods, properties, and overridable implementation for symbols specific to hangers.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.StandardComponentDefinition">
            <summary>
            Abstract class from which all .NET Hanger Standard Component symbols derive to provide the basic symbol behavior. 
            A class inheriting from this should have three basic sections: 
            declaration of inputs, declaration of aspects and outputs, and implementation of the symbol within the overridden ConstructOutputs method.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.LogicalComponentDefinition">
            <summary>
            Abstract class from which all .NET Hanger Logical Component symbols derive to provide the basic symbol behavior. 
            A class inheriting from this should have three basic sections: 
            declaration of inputs, declaration of aspects and outputs, and implementation of the symbol within the overridden ConstructOutputs method.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.ConnectionComponentDefinition">
            <summary>
            Abstract class from which all .NET Hanger Connection Component symbols derive to provide the basic symbol behavior.
            A class inheriting from this should have three basic sections: 
            declaration of inputs, declaration of aspects and outputs, and implementation of the symbol within the overridden ConstructOutputs method.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.ConnectionComponentDefinition.CreateConnectionComponentPorts(Ingr.SP3D.Support.Middle.ConnectionComponentDefinition.HangerBeamInputs)">
             <summary>
             Creates and returns the connection ports, which are outputs of the hanger beam.
             </summary>
             <param name="hangerBeamInputs">Inputs required to construct outputs [HangerBeamInputs].</param>
             <returns>Connection Port Business Object Collection. The last two ports in this collection are BeginCapSurface and EndCapSurface.</returns>
             <exception cref="T:Ingr.SP3D.Support.Exceptions.SupportInvalidArgumentException">Catalog part is null.</exception>
             <exception cref="T:Ingr.SP3D.Support.Exceptions.ConnectionPortsCreationException">Creation of ConnectionPort failed.</exception>
             <example> This is an example for CreateConnectionComponentPorts for hanger beam.
             <code>
                     Dim oPorts As ReadOnlyCollection(Of BusinessObject)
                     Dim oHgrBeamInput As HangerBeamInputs = New HangerBeamInputs()
            
                     'required to fill all the inputs from the Symbol definition Inputs
                     'Below values are used for Example Code. While developing a Symbol, values must be retrieved from Part.
                     oHgrBeamInput.BeginOverLength = 0.25    'dblBeginOverLength
                     oHgrBeamInput.CardinalPoint = 1
                     oHgrBeamInput.EndOverLength = 0.2       'dblEndOverLength;
                     oHgrBeamInput.Length = 1.2              'dblLength;
                     oHgrBeamInput.Part = oSectionPart       'Input Part              
                     oHgrBeamInput.Density = 0.25            'default value
             
                     ' call this method to get the constructed connection Ports
                     ' The last two ports in this collection are BeginCapSurface and EndCapSurface.
                     oPorts = CreateConnectionComponentPorts(oHgrBeamInput)     
             </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.ConnectionComponentDefinition.CreateConnectionComponentPorts(Ingr.SP3D.Support.Middle.ConnectionComponentDefinition.CutbackSteelInputs)">
             <summary>
             Creates and returns the connection ports, which are outputs of the cutback steel.
             </summary>
             <param name="cutbackSteelInputs">Inputs required to construct outputs [CutbackSteelInputs].</param>
             <returns>Connection Port Business Object Collection. The last two ports in this collection are BeginCapSurface and EndCapSurface.</returns>
             <exception cref="T:Ingr.SP3D.Support.Exceptions.SupportInvalidArgumentException">Catalog part is null.</exception>
             <exception cref="T:Ingr.SP3D.Support.Exceptions.ConnectionPortsCreationException">Creation of ConnectionPort failed.</exception>
             <example> This is an example for CreateConnectionComponentPorts for cutback steel.
             <code>
                 Dim oPorts As ReadOnlyCollection(Of BusinessObject)
                 Dim oCutbackSteelInput As CutbackSteelInputs = New CutbackSteelInputs()
                 
                'required to fill all the inputs from the Symbol definition Inputs,
                'Below values are used for Example Code. While developing a Symbol, values must be retrieved from Part.
                 oCutbackSteelInput.BeginAnchorPoint = AnchorPoint.BottomCenter
                 oCutbackSteelInput.BeginOverLength = 0.25                   'dblBeginOverLength
                 oCutbackSteelInput.CutbackBeginAngle = Math.PI / 6          'dblCutbackBeginAngle;
                 oCutbackSteelInput.CutbackEndAngle = Math.PI / 4            'dblCutbackEndAngle;
                 oCutbackSteelInput.Density = 0.25                           'default value
                 oCutbackSteelInput.EndAnchorPoint = AnchorPoint.MiddleLeft
                 oCutbackSteelInput.EndOverLength = 0.2                      'dblEndOverLength;
                 oCutbackSteelInput.Length = 1.2                             'dblLength;
                 oCutbackSteelInput.Part = oSectionPart                      'Input Part              
            
                 ' call this method to get the constructed connection Ports
                 ' The last two ports in this collection are BeginCapSurface and EndCapSurface.
                 oPorts = CreateConnectionComponentPorts(oCutbackSteelInput)
            
             </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.ConnectionComponentDefinition.CreateConnectionComponentPorts(Ingr.SP3D.Support.Middle.ConnectionComponentDefinition.SnipSteelInputs)">
             <summary>
             Creates and returns the connection ports, which are outputs of the snip steel.
             </summary>
             <param name="snipSteelInputs">Inputs required to construct outputs [snipSteelInputs].</param>
             <returns>Connection Port Business Object Collection. The last two ports in this collection are BeginCapSurface and EndCapSurface.</returns>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.SupportInvalidArgumentException">Catalog part is null.</exception>
             <exception cref="T:Ingr.SP3D.Support.Exceptions.ConnectionPortsCreationException">Creation of ConnectionPorts failed.</exception>
             <example> This is an example for CreateConnectionComponentPorts for snip steel.
             <code>
                     Dim oPorts As ReadOnlyCollection(Of BusinessObject)
                     Dim oSnipSteelInputs As SnipSteelInputs = New SnipSteelInputs()
                     
                     'required to fill all the inputs from the Symbol definition Inputs
                     'Below values are used for Example Code. While developing a Symbol, values must be retrieved from Part.
                     oSnipSteelInputs.BeginFlangeAnchorPoint = AnchorPoint.BottomCenter
                     oSnipSteelInputs.BeginOffsetAlongFlange = 0.2                               'dblBeginAlongFlangeOffset
                     oSnipSteelInputs.BeginOffsetAlongWeb = 0.15                                 'dblBeginAlongWebOffset
                     oSnipSteelInputs.BeginOverLength = 0.25                                     ' dblBeginOverLength
                     oSnipSteelInputs.BeginWebAnchorPoint = AnchorPoint.MiddleRight
                     oSnipSteelInputs.Density = 0.25                                                 ' //default value
                     oSnipSteelInputs.EndFlangeAnchorPoint = AnchorPoint.BottomCenter
                     oSnipSteelInputs.EndOffsetAlongFlange = 0.15                                    'dblEndAlongFlangeOffset
                     oSnipSteelInputs.EndOffsetAlongWeb = 0.225                                      'dblEndAlongWebOffset
                     oSnipSteelInputs.EndOverLength = 0.1                                            ' dblEndOverLength
                     oSnipSteelInputs.EndWebAnchorPoint = AnchorPoint.MiddleRight
                     oSnipSteelInputs.Length = 1.2                                                   'dblLength
                     oSnipSteelInputs.Part = oSectionPart                                            'Input Part     
                     oSnipSteelInputs.SnipBeginAngleAlongFlange = Math.PI / 8                        'dblBeginAlongFlangeAngle
                     oSnipSteelInputs.SnipBeginAngleAlongWeb = Math.PI / 4                           'dblBeginAlongWebAngle
                     oSnipSteelInputs.SnipEndAngleAlongFlange = Math.PI / 6                          'dblEndAlongFlangeAngle
                     oSnipSteelInputs.SnipEndAngleAlongWeb = Math.PI / 10                            'dblEndAlongWebAngle
            
                     ' call this method to get the constructed connection Ports
                     ' The last two ports in this collection are BeginCapSurface and EndCapSurface.
                     oPorts = CreateConnectionComponentPorts(oSnipSteelInputs) 
             </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.ConnectionComponentDefinition.CalculateWeightCG(Ingr.SP3D.Support.Middle.ConnectionComponentDefinition.CutbackSteelInputs,System.Double@,System.Double@,Ingr.SP3D.Common.Middle.Position@)">
             <summary>
             Calculates the weight and center of gravity for cutback steel.
             </summary>
             <param name="cutbackSteelInputs">Inputs required to calculate weight and center of gravity [CutbackSteelInputs].</param>
             <param name="weight">Weight of the beam [Double].</param>
             <param name="totalLength">Total length of the cutback steel [Double].</param>
             <param name="centerOfGravity">Center of gravity position [Position].</param>
             <returns></returns>
             <exception cref="T:Ingr.SP3D.Support.Exceptions.SupportInvalidArgumentException">Catalog part is null.</exception> 
             <exception cref="T:Ingr.SP3D.Support.Exceptions.ConnectionComponentWeightCGException">Unable to calculate weight and center of gravity.</exception>
             <example> This is an example for CalculateWeightCG for snip steel.
             <code>
             
                 Dim oPorts As ReadOnlyCollection(Of BusinessObject)
                 Dim oCutbackSteelInput As CutbackSteelInputs = New CutbackSteelInputs()
                  
                'required to fill all the inputs from the Symbol definition Inputs,
                'Below values are used for Example Code. While developing a Symbol, values must be retrieved from Part.
                 oCutbackSteelInput.BeginAnchorPoint = AnchorPoint.BottomCenter
                 oCutbackSteelInput.BeginOverLength = 0.25                   'dblBeginOverLength
                 oCutbackSteelInput.CutbackBeginAngle = Math.PI / 6          'dblCutbackBeginAngle;
                 oCutbackSteelInput.CutbackEndAngle = Math.PI / 4            'dblCutbackEndAngle;
                 oCutbackSteelInput.Density = 0.25                           'default value
                 oCutbackSteelInput.EndAnchorPoint = AnchorPoint.MiddleLeft
                 oCutbackSteelInput.EndOverLength = 0.2                      'dblEndOverLength;
                 oCutbackSteelInput.Length = 1.2                             'dblLength;
                 oCutbackSteelInput.Part = oSectionPart                      'Input Part              
            
                  Dim dblTotalLength As Double
                  Dim oPosition As Position
                  Dim dblWeight As Double
                  
                  ' call this method to get WeightCG of the Beam
                  CalculateWeightCG(oCutbackSteelInput, dblWeight, dblTotalLength, oPosition)
                  
             </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.ConnectionComponentDefinition.CalculateWeightCG(Ingr.SP3D.Support.Middle.ConnectionComponentDefinition.SnipSteelInputs,System.Double@,System.Double@,Ingr.SP3D.Common.Middle.Position@)">
             <summary>
             Calculates the weight and center of gravity for snip steel.
             </summary>
             <param name="snipSteelInputs">Inputs required to calculate weight and center of gravity [SnipSteelInputs].</param>
             <param name="weight">Weight of the beam [Double].</param>
             <param name="totalLength">Total length of the snip steel [Double].</param>
             <param name="centerOfGravity">Center of gravity position [Position].</param>
             <returns></returns>
             <exception cref="T:Ingr.SP3D.Support.Exceptions.SupportInvalidArgumentException">Catalog part is null.</exception>
             <exception cref="T:Ingr.SP3D.Support.Exceptions.ConnectionComponentWeightCGException">Unable to calculate the weight and center of gravity.</exception> 
             <example> This is an example for CalculateWeightCG for snip steel.
             <code>
                     Dim oPorts As ReadOnlyCollection(Of BusinessObject)
                     Dim oSnipSteelInputs As SnipSteelInputs = New SnipSteelInputs()
                     
                     'required to fill all the inputs from the Symbol definition Inputs
                     'Below values are used for Example Code. While developing a Symbol, values must be retrieved from Part.
                     oSnipSteelInputs.BeginFlangeAnchorPoint = AnchorPoint.BottomCenter
                     oSnipSteelInputs.BeginOffsetAlongFlange = 0.2                               'dblBeginAlongFlangeOffset
                     oSnipSteelInputs.BeginOffsetAlongWeb = 0.15                                 'dblBeginAlongWebOffset
                     oSnipSteelInputs.BeginOverLength = 0.25                                     ' dblBeginOverLength
                     oSnipSteelInputs.BeginWebAnchorPoint = AnchorPoint.MiddleRight
                     oSnipSteelInputs.Density = 0.25                                                 ' //default value
                     oSnipSteelInputs.EndFlangeAnchorPoint = AnchorPoint.BottomCenter
                     oSnipSteelInputs.EndOffsetAlongFlange = 0.15                                    'dblEndAlongFlangeOffset
                     oSnipSteelInputs.EndOffsetAlongWeb = 0.225                                      'dblEndAlongWebOffset
                     oSnipSteelInputs.EndOverLength = 0.1                                            ' dblEndOverLength
                     oSnipSteelInputs.EndWebAnchorPoint = AnchorPoint.MiddleRight
                     oSnipSteelInputs.Length = 1.2                                                   'dblLength
                     oSnipSteelInputs.Part = oSectionPart                                            'Input Part     
                     oSnipSteelInputs.SnipBeginAngleAlongFlange = Math.PI / 8                        'dblBeginAlongFlangeAngle
                     oSnipSteelInputs.SnipBeginAngleAlongWeb = Math.PI / 4                           'dblBeginAlongWebAngle
                     oSnipSteelInputs.SnipEndAngleAlongFlange = Math.PI / 6                          'dblEndAlongFlangeAngle
                     oSnipSteelInputs.SnipEndAngleAlongWeb = Math.PI / 10                            'dblEndAlongWebAngle
            
                     Dim dblTotalLength As Double
                     Dim oPosition As Position
                     Dim dblWeight As Double
                     ' call this method to get WeightCG of the Beam
                     CalculateWeightCG(oSnipSteelInputs, dblWeight, dblTotalLength, oPosition)
            
             </code>
            </example>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.ConnectionComponentDefinition.HangerBeamInputs">
            <summary>
            Defines the inputs required to construct ouputs of a hanger beam. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.ConnectionComponentDefinition.HangerBeamInputs.Part">
            <summary>
            Catalog part with which a connection component is related.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.ConnectionComponentDefinition.HangerBeamInputs.BeginOverLength">
            <summary>
            Begin over length of the beam.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.ConnectionComponentDefinition.HangerBeamInputs.Length">
            <summary>
            Length of the beam.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.ConnectionComponentDefinition.HangerBeamInputs.EndOverLength">
            <summary>
            End over length of the beam.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.ConnectionComponentDefinition.HangerBeamInputs.CardinalPoint">
            <summary>
            Cardinal point to align the beam.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.ConnectionComponentDefinition.HangerBeamInputs.Density">
            <summary>
            Density of the beam.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.ConnectionComponentDefinition.CutbackSteelInputs">
            <summary>
            Defines the inputs required to construct ouputs of cutback steel.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.ConnectionComponentDefinition.CutbackSteelInputs.Part">
            <summary>
            Catalog part with which a connection component is related.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.ConnectionComponentDefinition.CutbackSteelInputs.BeginOverLength">
            <summary>
            Begin over length of the beam.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.ConnectionComponentDefinition.CutbackSteelInputs.Length">
            <summary>
            Length of the beam.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.ConnectionComponentDefinition.CutbackSteelInputs.EndOverLength">
            <summary>
            End over length of the beam.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.ConnectionComponentDefinition.CutbackSteelInputs.BeginAnchorPoint">
            <summary>
            Begin anchor point to slice the beam.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.ConnectionComponentDefinition.CutbackSteelInputs.EndAnchorPoint">
            <summary>
            End anchor point to slice the beam.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.ConnectionComponentDefinition.CutbackSteelInputs.CutbackBeginAngle">
            <summary>
            Angle to use at beginning anchor point.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.ConnectionComponentDefinition.CutbackSteelInputs.CutbackEndAngle">
            <summary>
            Angle to use at ending anchor point.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.ConnectionComponentDefinition.CutbackSteelInputs.Density">
            <summary>
            Density of the beam.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.ConnectionComponentDefinition.SnipSteelInputs">
            <summary>
            Defines the inputs required to construct ouputs of snip steel.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.ConnectionComponentDefinition.SnipSteelInputs.Part">
            <summary>
            Catalog part with which a connection component is related.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.ConnectionComponentDefinition.SnipSteelInputs.BeginOverLength">
            <summary>
            Begin over length of the beam.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.ConnectionComponentDefinition.SnipSteelInputs.Length">
            <summary>
            Length of the beam.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.ConnectionComponentDefinition.SnipSteelInputs.EndOverLength">
            <summary>
            End over length of the beam.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.ConnectionComponentDefinition.SnipSteelInputs.BeginFlangeAnchorPoint">
            <summary>
            Anchor point at beginning flange.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.ConnectionComponentDefinition.SnipSteelInputs.EndFlangeAnchorPoint">
            <summary>
            Anchor point at ending flange.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.ConnectionComponentDefinition.SnipSteelInputs.BeginWebAnchorPoint">
            <summary>
            Anchor point at beginning web.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.ConnectionComponentDefinition.SnipSteelInputs.EndWebAnchorPoint">
            <summary>
            Anchor point at ending web.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.ConnectionComponentDefinition.SnipSteelInputs.BeginOffsetAlongFlange">
            <summary>
            Offset at the beginning flange.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.ConnectionComponentDefinition.SnipSteelInputs.BeginOffsetAlongWeb">
            <summary>
            Offset at the beginning web.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.ConnectionComponentDefinition.SnipSteelInputs.EndOffsetAlongFlange">
            <summary>
            Offset at the ending flange.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.ConnectionComponentDefinition.SnipSteelInputs.EndOffsetAlongWeb">
            <summary>
            Offset at the ending web.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.ConnectionComponentDefinition.SnipSteelInputs.SnipBeginAngleAlongFlange">
            <summary>
            Angle at beginning flange.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.ConnectionComponentDefinition.SnipSteelInputs.SnipBeginAngleAlongWeb">
            <summary>
            Angle at beginning web.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.ConnectionComponentDefinition.SnipSteelInputs.SnipEndAngleAlongFlange">
            <summary>
            Angle at ending flange.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.ConnectionComponentDefinition.SnipSteelInputs.SnipEndAngleAlongWeb">
            <summary>
            Angle at ending web.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.ConnectionComponentDefinition.SnipSteelInputs.Density">
            <summary>
            Density of the beam.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.Axis">
            <summary>
            Enumeration List of Standard Axis values.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Axis.X">
            <summary>
            X-axis.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Axis.Y">
            <summary>
            Y-axis.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Axis.Z">
            <summary>
            Z-axis.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Axis.NegativeX">
            <summary>
            Negative X-axis.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Axis.NegativeY">
            <summary>
            Negative Y-axis.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Axis.NegativeZ">
            <summary>
            Negative Z-axis.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.Plane">
            <summary>
            Enumeration list of standard plane values.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Plane.XY">
            <summary>
            XY plane.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Plane.YZ">
            <summary>
            YZ plane.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Plane.ZX">
            <summary>
            ZX plane.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Plane.NegativeXY">
            <summary>
            Negative XY plane.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Plane.NegativeYZ">
            <summary>
            Negative YZ plane.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.Plane.NegativeZX">
            <summary>
            Negative ZX plane.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.MirrorPlane">
            <summary>
            Enumeration List of mirror plane values.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.MirrorPlane.XYPlane">
            <summary>
            XY plane.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.MirrorPlane.YZPlane">
            <summary>
            YZ plane.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.MirrorPlane.XZPlane">
            <summary>
            XZ plane.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.DisciplineTypeFlags">
            <summary>
            Enumeration list of discipline types.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.DisciplineTypeFlags.Piping">
            <summary>
            Piping discipline type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.DisciplineTypeFlags.HVAC">
            <summary>
            HVAC discipline type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.DisciplineTypeFlags.CableTray">
            <summary>
            CableTray discipline type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.DisciplineTypeFlags.Conduit">
            <summary>
            Conduit discipline type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.DisciplineTypeFlags.Combined">
            <summary>
            Combination of discipline types.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.DisciplineTypeFlags.All">
            <summary>
            All discipline types.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.DisciplineTypeFlags.Piping_Designed">
            <summary>
            Piping designed discipline type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.DisciplineTypeFlags.HVAC_Designed">
            <summary>
            Duct designed discipline type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.DisciplineTypeFlags.CableTray_Designed">
            <summary>
            CableTray designed discipline type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.DisciplineTypeFlags.Conduit_Designed">
            <summary>
            Conduit designed discipline type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.DisciplineTypeFlags.Combined_Designed">
            <summary>
            Combined designed discipline type.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.NDComparisonOperatorType">
            <summary>
            Enumeration list for nominal diameter comparison operators.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.NDComparisonOperatorType.NDTo_GREATER_OR_EQUAL">
            <summary>
            Comparison operator for NDTo is greater than or equal to.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.NDComparisonOperatorType.NDTo_GREATER">
            <summary>
            Comparison operator for NDTo is greater than.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.NDComparisonOperatorType.NDTo_EQUAL">
            <summary>
            Comparison operator for NDTo is equal to.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.NDComparisonOperatorType.NDTo_LESS">
            <summary>
            Comparison operator for NDTo is Less than.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.NDComparisonOperatorType.NDTo_LESS_OR_EQUAL">
            <summary>
            Comparison operator for NDTo is less than or equal to.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.NDComparisonOperatorType.NDFrom_GREATER_OR_EQUAL">
            <summary>
            Comparison operator for NDFrom is greater than or equal to.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.NDComparisonOperatorType.NDFrom_GREATER">
            <summary>
            Comparison operator for NDFrom is greater than.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.NDComparisonOperatorType.NDFrom_EQUAL">
            <summary>
            Comparison operator for NDFrom is equal to.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.NDComparisonOperatorType.NDFrom_LESS">
            <summary>
            Comparison operator for NDFrom is less than.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.NDComparisonOperatorType.NDFrom_LESS_OR_EQUAL">
            <summary>
            Comparison operator for NDFrom is less than or equal to.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.ComparisonOperatorType">
            <summary>
            Enumeration list of comparison operator types.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.ComparisonOperatorType.GREATER_OR_EQUAL">
            <summary>
            Greater or equal operator.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.ComparisonOperatorType.LESS_OR_EQUAL">
            <summary>
            Less than or equal operator.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.ComparisonOperatorType.NOT_EQUAL">
            <summary>
            Not equal operator.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.ComparisonOperatorType.GREATER">
            <summary>
            Greater than operator.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.ComparisonOperatorType.LESS">
            <summary>
            Less than operator.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.ComparisonOperatorType.BITWISE_AND">
            <summary>
            Bitwise AND operator.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.ComparisonOperatorType.IN">
            <summary>
            In operator.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.ComparisonOperatorType.NOT_IN">
            <summary>
            Not in operator.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.ComparisonOperatorType.LIKE">
            <summary>
            Like operator.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.ComparisonOperatorType.NOT_LIKE">
            <summary>
            Not like operator.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.ComparisonOperatorType.EQUAL">
            <summary>
            Equal operator.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.OrderDirection">
            <summary>
            Enumeration list of order directions.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.OrderDirection.ASCENDING">
            <summary>
            Ascending order.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.OrderDirection.DESCENDING">
            <summary>
            Descending order.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.PlacementType">
            <summary>
            Enumeration list of placement types.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.PlacementType.PlaceByPoint">
            <summary>
            Place by point.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.PlacementType.PlaceByStruct">
            <summary>
            Place by structure.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.PlacementType.PlaceByReference">
            <summary>
            Place by reference command types.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.PlacementType.All">
            <summary>
            All placement command types.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.SupportedObjectType">
            <summary>
            Enumeration list of supported object types.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.SupportedObjectType.Pipe">
            <summary>
            Piping type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.SupportedObjectType.Conduit">
            <summary>
            Conduit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.SupportedObjectType.HVAC">
            <summary>
            HVAC type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.SupportedObjectType.CableTray">
            <summary>
            Cable tray type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.SupportedObjectType.All">
            <summary>
            All supported object types.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.FeatureType">
            <summary>
            Enumeration list of route feature types.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.FeatureType.Straight">
            <summary>
            Straight feature.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.FeatureType.Turn">
            <summary>
            Turn feature.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.FeatureType.End">
            <summary>
            End feature.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.FeatureType.AlongLeg">
            <summary>
            Along leg feature.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.FeatureType.Branch">
            <summary>
            Branch feature.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.FeatureType.Surface">
            <summary>
            Surface mount feature.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.FeatureType.Transition">
            <summary>
            Transition feature.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.FeatureType.All">
            <summary>
            All feature types.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.CrossSectionShape">
            <summary>
            Enumeration list of cross section shapes.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.CrossSectionShape.Rectangular">
            <summary>
            Rectangular shape.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.CrossSectionShape.Oval">
            <summary>
            Oval shape.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.CrossSectionShape.FlatOval">
            <summary>
            Flat oval shape.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.CrossSectionShape.Round">
            <summary>
            Round shape.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.CrossSectionShape.UShape">
            <summary>
            U-shape shape.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.CrossSectionShape.UserDefined">
            <summary>
            User-defined shape.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.SupportingObjectType">
            <summary>
            Enumeration list of supporting object types.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.SupportingObjectType.Member">
            <summary>
            Member object type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.SupportingObjectType.Slab">
            <summary>
            Slab object type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.SupportingObjectType.Wall">
            <summary>
            Wall object type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.SupportingObjectType.ReferenceFile">
            <summary>
            Reference file graphics.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.SupportingObjectType.GenericSurface">
            <summary>
            Generic surface.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.SupportingObjectType.HangerBeam">
            <summary>
            Hanger beam.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.SupportingObjectType.Plate">
            <summary>
            Plate object type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.SupportingObjectType.Profile">
            <summary>
            Profile object type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.SupportingObjectType.All">
            <summary>
            All supporting object types.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.PortDistanceType">
            <summary>
            Enumeration list of hanger port distance types.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.PortDistanceType.Direct">
            <summary>
            Direct distance.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.PortDistanceType.Horizontal">
            <summary>
            Horizontal distance.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.PortDistanceType.Horizontal_Parallel">
            <summary>
            Horizontal parallel distance.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.PortDistanceType.Horizontal_Perpendicular">
            <summary>
            Horizontal perpendicular distance.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.PortDistanceType.Vertical">
            <summary>
            Vertical distance type.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.PortAxisType">
            <summary>
            Enumeration list of hanger port axis types.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.PortAxisType.X">
            <summary>
            Hanger port X-axis.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.PortAxisType.Y">
            <summary>
            Hanger port Y-axis.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.PortAxisType.Z">
            <summary>
            Hanger port Z-axis.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.OrientationAlong">
            <summary>
            Enumeration list of orientation along types.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.OrientationAlong.Direct">
            <summary>
            Direct orientation.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.OrientationAlong.Global_X">
            <summary>
            Oriented along global X-axis.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.OrientationAlong.Global_Y">
            <summary>
            Oriented along global Y-axis.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.OrientationAlong.Global_Z">
            <summary>
            Oriented along global Z-axis.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.PortConfiguration">
            <summary>
            Enumeration list of port configuration types.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.PortConfiguration.Top">
            <summary>
            Structure above route.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.PortConfiguration.Bottom">
            <summary>
            Structure below route.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.PortConfiguration.AboveOrBelow">
            <summary>
            Structure above or below route.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.PortConfiguration.Beside">
            <summary>
            Structure beside route.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.PortConfiguration.Right">
            <summary>
            Structure to the right of route.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.PortConfiguration.Left">
            <summary>
            Structure to left of route.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.PortConfiguration.BasicDirections">
            <summary>
            Structure above/below/beside route.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.PortConfiguration.Intersecting">
            <summary>
            Structure intersecting with route.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.PortConfiguration.TopRight">
            <summary>
            Structure above-right of route.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.PortConfiguration.TopLeft">
            <summary>
            Structure above-left of route.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.PortConfiguration.BottomRight">
            <summary>
            Structure below-right of route.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.PortConfiguration.BottomLeft">
            <summary>
            Structure below-left of route.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.PortConfiguration.All">
            <summary>
            Structure on all directions.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.BoundingBoxType">
            <summary>
            Enumeration list of bounding box types.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.BoundingBoxType.Supported">
            <summary>
            Bounding box about the supported objects.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.BoundingBoxType.Supporting">
            <summary>
            Bounding box about supporting objects.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.BoundingBoxType.SupportedVertical">
            <summary>
            Bounding box about vertical extent of supported objects.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.BoundingBoxType.SupportingVertical">
            <summary>
            Bounding box about vertical extent of supporting objects.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.BoundingBoxType.SupportedAndSupporting">
            <summary>
            Bounding box about supported and supporting objects.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.BoundingBoxType.GlobalSupportedX">
            <summary>
            Bounding box about global X extent of supported objects.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.BoundingBoxType.GlobalSupportedY">
            <summary>
            Bounding box about global Y extent of Supported objects.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.BoundingBoxType.GlobalSupportedZ">
            <summary>
            Bounding box about global Z extent of supported objects.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.BoundingBoxType.TangentialToSupported">
            <summary>
            Bounding box for tangential extent of supported objects.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.BoundingBoxType.AlternateTangentialToSupported">
            <summary>
            Bounding box for alternate tangential extent of supported objects.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.BoundingBoxType.All">
            <summary>
            All bounding box types.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.BoundingBoxDirection">
            <summary>
            Enumeration list of bounding box directions.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.BoundingBoxDirection.AlongRoute">
            <summary>
            Along route direction.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.BoundingBoxDirection.OrthogonalToRoute">
            <summary>
            Orthogonal to route direction.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.BoundingBoxDirection.RouteX">
            <summary>
            Route X-axis direction.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.BoundingBoxDirection.RouteY">
            <summary>
            Route Y-axis direction.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.BoundingBoxDirection.RouteZ">
            <summary>
            Route Z-axis direction.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.BoundingBoxDirection.StructureX">
            <summary>
            Structure X-axis direction.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.BoundingBoxDirection.StructureY">
            <summary>
            Structure Y-axis direction.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.BoundingBoxDirection.StructureZ">
            <summary>
            Structure Z-axis direction.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.BoundingBoxDirection.GlobalX">
            <summary>
            Global X-axis direction.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.BoundingBoxDirection.GlobalY">
            <summary>
            Global Y-axis direction.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.BoundingBoxDirection.GlobalZ">
            <summary>
            Global Z-axis direction.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.BoundingBoxDirection.RouteToStructure">
            <summary>
            Route to structure direction.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.BoundingBoxDirection.Tangent">
            <summary>
            Tangential direction.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.BoundingBoxEdge">
            <summary>
            Enumeration list of bounding box edge types.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.BoundingBoxEdge.Left">
            <summary>
            Left edge.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.BoundingBoxEdge.Right">
            <summary>
            Right edge.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.BoundingBoxEdge.Top">
            <summary>
            Top edge.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.BoundingBoxEdge.Bottom">
            <summary>
            Bottom edge.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.ConnectionInfo">
            <summary>
            ConnectionInfo is a data structure, which holds the part key along with supported-or-supporting object.
            It is used to define the connection information in SupportedConnection or SupportingConnection properties of CustomSupportDefinition.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.ConnectionInfo.#ctor(System.String,System.Int32)">
            <summary>
            Constructor for ConnectionInfo that takes the part key and supportedOrSupportingIndex as input.
            </summary>
            <param name="partKey">Part key name.</param>
            <param name="supportedOrSupportingIndex">Supported or supporting index.</param>
            <example>How to create a ConnectionInfo. 
            <code>
            'Define the index of the part.
            Dim iPartIndx As Integer = 1
            'Define the index of the supported or supporting object.
            Dim iSupIndx As Integer = 1
            'Create the ConnectionInfo between the part and the supported/supporting object.
            Dim oConnectionInfo = New ConnectionInfo(iPartIndx, iSupIndx)
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.ConnectionInfo.PartKey">
            <summary>
            Gets or sets the part key.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.ConnectionInfo.SupportedOrSupportingIndex">
            <summary>
            Gets or sets the supported or supporting index.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.PartInfo">
            <summary>
            PartInfo is a class datatype, that contains the part key, part class or part number, part selection rule, and reference index for PSR. 
            It is used in implementing the Parts property in a CustomSupportDefinition implementation.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.PartInfo.#ctor(System.String,System.String)">
            <summary>
            This constructor takes part key and part class or part number. 
            The default value of  partSelectionRule is the ProgID, which is defined in the part class sheet in Excel (or catalog).
            The default value of referenceIndexForPSR is 1, which uses the supported or supporting object.
            </summary>
            <param name="partKey">Part key.</param>
            <param name="sPartClassOrPartNo">Part class or part number.</param>
            <example>How to create a PartInfo instance.
            <code>
            'Define the Key of the Part.
            Dim sPartKey As String = "Part1"
            'Create the PartInfo by specifying a part class.
            Dim oPartInfo = New PartInfo(sPartKey, "Part-Class")
            'Create the PartInfo by specifying a Part Number.
            Dim oPartInfo = New PartInfo(sPartKey, "Part-Number")
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.PartInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            This constructor takes part index, part class and part selection rule. 
            The default value of referenceIndexForPSR is 1, which uses the supported or supporting object.
            </summary>
            <param name="partKey">Part index.</param>
            <param name="sPartClass">Part class.</param>
            <param name="sPartSelectionRule">Part selection rule.</param>
            <example>How to create a PartInfo instance, with an overridden part selection rule.
            <code>
            Dim sPartKey As String = "Part1"
            'Create the PartInfo by specifying a part class.
            'Create the PartInfo by specifying a part class and a part selection rule, which will be used to select the part from the specified class.
            Dim oPartInfo = New PartInfo(sPartKey, "Part-Class", "Part-Selection-Rule")
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.PartInfo.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            This constructor takes the part index, part class, part selection rule, and reference index for the part selection rule.
            </summary>
            <param name="partKey">Part key.</param>
            <param name="sPartClass">Part class.</param>
            <param name="sPartSelectionRule">Part selection rule.</param>
            <param name="iReferenceIndexForPSR">Reference index for the part selection rule.</param>
            <example>How to create a PartInfo instance, with an overridded part selection rule, along with which supported/supporting item should be used by the PSR.
            <code>
            'Define the Index of the Part
            Dim sPartKey As String = "Part1"
            'Create the PartInfo by specifying a Part Class and a Part Selection Rule
            'For this example, iReferenceIndexForPSR is 1, so that if the PSR picks the part based on NPD, the first route will be used to determine the required NPD.
            Dim oPartInfo = New PartInfo(sPartKey, "Part-Class", "Part-Selection-Rule", 1)
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.PartInfo.PartKey">
            <summary>
            Gets or sets the part index.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.PartInfo.PartClassOrPartNo">
            <summary>
            Gets or sets the part class or part number.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.PartInfo.PartSelectionRule">
            <summary>
            Gets or sets the part selection rule.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.PartInfo.ReferenceIndexForPSR">
            <summary>
            Gets or sets the reference index for a part selection rule.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.BoundingBox">
            <summary>
            BoundingBox is the class for the datatype representing a bounding box, providing access to its height, width, name, reference port names 
            and additional relevant information about the bounding box.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.BoundingBox.#ctor(Ingr.SP3D.Support.Middle.Support,System.String,Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector,System.Double,System.Double)">
            <summary>
            This constructor takes the bounding box name, Y and Z vectors, width and height. 
            </summary>
            <param name="oSupport">Support object.</param>
            <param name="sName">Name of the bounding box.</param>
            <param name="YVector">Vector representing the Y-axis of the bounding box.</param>
            <param name="ZVector">Vector representing the Z-axis of the bounding box.</param>
            <param name="dWidth">Width of the bounding box.</param>
            <param name="dHeight">Height of the bounding box.</param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.BoundingBox.SupportedObjectsAtEdge(Ingr.SP3D.Support.Middle.BoundingBoxEdge)">
            <summary>
            Returns one or more supported objects that are adjacent to the given edge of the bounding box.
            </summary>
            <param name="eBBXEdge">Specifies the edge of the bounding box for required adjacent objects.</param>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.BoundingBox.Name">
            <summary>
            Gets the name of the bounding box.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.BoundingBox.LowReferencePortName">
            <summary>
            Gets the name of the low reference port on the bounding box.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.BoundingBox.HighReferencePortName">
            <summary>
            Gets the name of the high reference port on the bounding box.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.BoundingBox.Width">
            <summary>
            Gets the width of the bounding box.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.BoundingBox.Height">
            <summary>
            Gets the height of the bounding box.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.CustomSupportBase">
            <summary>
            CustomSupportBase is an abstract class, which provides functionality common to all support rules.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.CustomSupportBase.Notify(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Used to log an error or warning.
            </summary>
            <param name="sDescription">Description of error.</param>
            <param name="sMethod">Method from which the error has raised.</param>
            <param name="sSourceFile">File from which the error has raised.</param>
            <param name="bWarning">Boolean value, which is True to raise a warning. If it is False, then it will raise the error.</param>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.CustomSupportBase.PartInfo">
            <summary>
            Gets or sets the part information.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.CustomSupportBase.GenericHelper">
            <summary>
            Gets the GenericHelper.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.CustomSupportBase.RefPortHelper">
            <summary>
            Gets the RefPortHelper.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.CustomSupportBase.SupportedHelper">
            <summary>
            Gets the SupportedHelper.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.CustomSupportBase.SupportingHelper">
            <summary>
            Gets the SupportingHelper.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.CustomSupportBase.SupportHelper">
            <summary>
            Gets the SupportHelper.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.CustomSupportBase.BoundingBoxHelper">
            <summary>
            Gets the BoundingBoxHelper.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.SupportBOMDescription">
            <summary>
            This is an abstract base class provided to derive from and implement custom BOM description rules as a progID.
            Use this as the base class for your classes that you intend to use as custom BOM description rule progID's.
            By deriving from this class you will need to implement the BOMDescription method and return the BOM description.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.ICustomHgrBOMDescription">
            <summary>
            ICustomHgrBOMDescription interface description.
            Implement this interface to define a rule-based custom BOM description for a support or support component.
            This interface can be implemented by Custom Support Definition or a SupportPart symbol.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.ICustomHgrBOMDescription.BOMDescription(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
             BOM description for a support or support component and
             returns the BOM description string formed and based on the support or support component dimensions/properties.
            </summary>
            <param name="oSupportOrComponent">Support or Component object.</param>
            <returns>BOM description.</returns>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportBOMDescription.BOMDescription(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            BOM Description for support or support component.
            </summary>
            <param name="oSupportOrComponent">Support or component object.</param>
            <returns>BOM description.</returns>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.CustomSupportDefinition">
            <summary>
            This is an abstract class, that contains all the methods, properties, and overridable implementation
            for specifying parts involved in the support assembly, and configuring the support (size the parts and create joints) or toggle mirror behavior.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.CustomSupportDefinition.ConfigureSupport(System.Collections.ObjectModel.Collection{Ingr.SP3D.Support.Middle.SupportComponent})">
            <summary>
            Defines how the parts in the support assembly are sized and connected together.
            Implementation can size the parts (set dimensional attributes on the part occurrences involved), and create joints (using JointHelper) between the part occurrences.
            It can also set any attributes on the support.
            </summary>
            <param name="oSupCompColl">Support component collection.</param>
            <example>This example shows a possible override implementation.
            <code>
            Public Overrides Sub ConfigureSupport(ByVal oSupCompColl As Collection(Of SupportComponent))
               ' Configure the support here; i.e.,
               '   get the parts, 
               '   size them, 
               '   set their attributes, 
               '   connect them in the support configuration 
               '   and return
               Dim oPipeClamp = oSupCompColl.Item(1)   'First Part is a Pipe Clamp.
               Dim oRod = oSupCompColl.Item(2)         'Second Part is a Rod.
               Dim oStructAtt = oSupCompColl.Item(3)   'Third Part is a Structure attachment.
               Dim oSupportedObjectInfo = SupportedHelper.SupportedObjectInfo(1)
               Dim oSupportingObjectInfo = SupportingHelper.SupportingObjectInfo(1)
               'Set attributes on the part occurrences.
               ' Use 'Direct Property Access' or 'Generic Property Access'.
               Dim dValue As Double
               oPipeClamp.SetPropertyValue(dValue, "Interface", "attribute")
               Dim dRodLength As Double
               Dim dStructTakeOut As Double
               Dim dClampTakeOut As Double
               dStructTakeOut = DirectCast(oStructAtt.GetPropertyValue("RodTakeOutInterface", "RodTakeOut"), PropertyValueDouble).PropValue
               dClampTakeOut = DirectCast(oPipeClamp.GetPropertyValue("RodTakeOutInterface", "RodTakeOut"), PropertyValueDouble).PropValue
               dRodLength = RefPortHelper.DistanceBetweenPorts("Route", "Structure", PortDistanceType.Vertical) - dStructTakeOut - dClampTakeOut
               oRod.SetPropertyValue(dRodLength, "IJOAOccLength", "Length")
               If Configuration = 1 Then
                   'Connect calls - specify partIndexA, PortIndexA, partIndexB, portIndexB, offsetVector, RotationVector, TranslationFlags, RotationFlags.
                   Connect(1, "Route", -1, "Route", Nothing, Nothing, 0, 0) 'Nothing for offset/rotation ==> no offset/rotation
                   Connect(2, "RodEnd1", 1, "Pin", Nothing, Nothing, 0, 0) ' 0 for flags means no DOF.
                   Connect(3, "Hole", 2, "RodEnd2", Nothing, Nothing, 0, 0)
               Else
                   Connect(1, "Route", -1, "Route", Nothing, Nothing, 0, 0)
                   Connect(2, "RodEnd1", 1, "Pin", Nothing, New Vector(0, 0, 1), 0, 0)
                   Connect(3, "Hole", 2, "RodEnd2", Nothing, Nothing, 0, 0)
               End If
               Dim dXOffset, dYOffset, dZOffset As Double
               'Create Control Points.
               Dim oControlPoint = CreateControlPoint(oRod, "RodEnd1", New Vector(dXOffset, dYOffset, dZOffset))
               'Create notes at start and end.
               Dim oNote1 = CreateNote("RodStart", oRod, "RodEnd1", Nothing) ' Nothing --> no offset.
               Dim oNote2 = CreateNote("RodEnd", oRod, "RodEnd2", New Vector(dXOffset, dYOffset, dZOffset))
            End Sub
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.CustomSupportDefinition.MirroredConfiguration(System.Int32,Ingr.SP3D.Support.Middle.MirrorPlane)">
            <summary>
            Returns the mirrored configuration for a given active configuration and mirror plane.
            Provides an override implementation for a specific configuration based on a current configuration and a given mirror plane.
            </summary>
            <param name="CurrentMirrorToggleValue">Current mirror toggle value.</param>
            <param name="eMirrorPlane">Enumerated value for mirror plane.</param>
            <returns>An integer value representing the configuration number of the mirrored configuration.</returns>
            <example> This example shows a possible override implementation. Override this method from own support definition.
            <code>
            Public Overrides Function MirroredConfiguration(ByVal CurrentMirrorToggleValue As Integer, ByVal eMirrorPlane As Ingr.SP3D.Support.Middle.MirrorPlane) As Integer
                'This example returns the current mirror toggle.
                Return CurrentMirrorToggleValue
            End Function
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.CustomSupportDefinition.OrientLocalCoordinateSystem">
            <summary>
            Orients the local coordinate system of the support.
            Provides an override implementation to set a different LocalCoordinateSystem for specific support definition.
            </summary>
            <example>This example shows a possible override implementation. Override this method for specific support definition.  
            <code>
            Public Overrides Sub OrientLocalCoordinateSystem(ByRef iPartIndex As Integer, ByRef sPortName As String, ByRef vOffset As Ingr.SP3D.Common.Middle.Vector, ByRef vRotation As Ingr.SP3D.Common.Middle.Vector)
                'This example sets the local coordinate system of the support to be located at the Route Reference Port
                iPartIndex = -1                 'Index of the part.
                sPortName = "Route"             'Port name.
                vOffset = New Vector(0, 0, 0)   'Vector specifying the offset of the LCS from the port.
                vRotation = Nothing             'Vector specifying the rotation of the LCS with respect to the port.
            End Sub
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.CustomSupportDefinition.CreateControlPoint(Ingr.SP3D.Support.Middle.SupportComponent,System.String,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Creates a control point by a given name. If one already exists, it returns that existing control point.
            </summary>
            <param name="oSupComp">Support component.</param>
            <param name="sPortName">Port name.</param>
            <param name="oPortOffset">Vector representing offset (X,Y,Z) from the port location in port's orientation.</param>
            <returns>The control point.</returns>
            <example>How to create a control point.
            <code>
            'The support component on which to add the control point.
            Dim oSupportComp As SupportComponent = Nothing
            'Create the control point at the "PortName" port, offset by the given vector.
            Dim oControlPoint = CreateControlPoint(oSupportComp, "PortName", New Vector(0, 0, 0.5))
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.CustomSupportDefinition.CreateNote(System.String)">
            <summary>
            Creates a note with a given note name. 
            If a note already exists with the given name, it returns that note.
            </summary>
            <param name="sNoteName">Note name.</param>
            <returns>Note object.</returns>
            <example>How to create a note.
            <code>
            'The support component on which to create the note.
            Dim oSupportComp As SupportComponent = Nothing
            'Create the note at the "PortName" port, offset by the given vector.
            Dim oNote = CreateNote("Note-Name")
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.CustomSupportDefinition.CreateNote(System.String,Ingr.SP3D.Support.Middle.SupportComponent,System.String)">
            <summary>
            Creates a note with a given note name to a port of a given port name on a given support component. 
            If a note already exists with the given name, or if a note already exists for that component/port, it returns a note.
            </summary>
            <param name="sNoteName">Note name.</param>
            <param name="oSupComp">Support component.</param>
            <param name="sPortName">Port name.</param>
            <returns>Note object.</returns>
            <example>How to create a note.
            <code>
            'The support component on which to create the note.
            Dim oSupportComp As SupportComponent = Nothing
            'Create the note at the "PortName" port, offset by the given vector.
            Dim oNote = CreateNote("Note-Name", oSupportComp, "PortName", Nothing) ' Nothing --> no offset.
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.CustomSupportDefinition.CreateNote(System.String,Ingr.SP3D.Common.Middle.ControlPoint)">
            <summary>
            Creates a note and associates it with a control point, which is created using CreateControlPoint().
            If a note already exists with the given name, it returns a note.
            </summary>
            <param name="sNoteName">Note name.</param>
            <param name="oControlPoint">Control point.</param>
            <returns>Created note object.</returns>
            <example>How to create a note at the specified control point.
            <code>
            'The control point on which to create the note.
            Dim oControlPoint As ControlPoint = Nothing 
            ' Initialize your control point here before calling CreateNote.
            'Create the note.
            Dim oNote = CreateNote("Note-Name", oControlPoint)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.CustomSupportDefinition.CreateNote(System.String,System.String,System.String,Ingr.SP3D.Common.Middle.Position,System.String,System.Boolean,System.Int32,System.Int32,Ingr.SP3D.Common.Middle.ControlPoint@)">
            <summary>
            Creates a note and associates it with an internally-created control point. If one already exists, it returns that existing control point.
            </summary>
            <param name="noteName">Note name for the control point.</param>
            <param name="partKey">Part key indicates the key of the part being used in the assembly.</param>
            <param name="portName">Port name.</param>
            <param name="portOffset">Position representing the offset (X,Y,Z) from the port location in the port's orientation.</param>
            <param name="noteText">Defines the note text (-location of the .sym file to support HngSup-CAD Details view style).</param>
            <param name="dimensioned">Indicates that the note generates a dimension.</param>
            <param name="contrlpointType">ControlPoint type</param>
            <param name="contrlpointSubType">Select list (codelist) defines subtypes or disciplines for the control points.</param>
            <param name="controlpoint">Retuns the control point -Out.</param>
            <returns>Note and control point.</returns>
            <example>How to create a note and control point.
            <code>
                noteControl = CreateNote("CAD Detail", TOP_PLATE, "BotStructure", new Position(0.0, 0.0, 0.0), @"\HangersAndSupports\CAD Details\Utility four hole plate.sym", false, 2, 53, out controlPoint); 
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.CustomSupportDefinition.IsPipeSizeValid(Ingr.SP3D.Common.Middle.Services.NominalDiameter,Ingr.SP3D.Common.Middle.Services.NominalDiameter,Ingr.SP3D.Common.Middle.Services.NominalDiameter,Ingr.SP3D.Common.Middle.Services.NominalDiameter[])">
            <summary>
            Checks whether the given nominal pipe diameter is within an allowable range and ensures that it is not an invalid value.
            </summary>
            <param name="inputPipeNominalDia">The nominal pipe diameter that will be checked.</param>
            <param name="minNominalDia"> The minimum allowable nominal pipe diameter.</param>
            <param name="maxNominalDia">The maximum allowable nominal pipe diameter.</param>
            <param name="invalidNominalDiaArray">Invalid pipe nominal diameter array.</param>
            <returns>True if the pipe size is valid; otherwise, False.</returns>
            <example>
            <code>
                  bool bFlag = false;
                  NominalDiameter [] ndArray = GetNominalDiameterArray ( new double[] {10.0, 26.0, 35.0}, “mm”);
                  bFlag = IsPipeSizeValid(inputPipeNominalDia, minNominalDia, maxNominalDia, ndArray);
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.CustomSupportDefinition.GetNominalDiameterArray(System.Double[],System.String)">
             <summary>
             Gets the invalid nominal diameter array, given invalid nominal diameter values in adouble array and units of the given nominal diameter values.
             </summary>
             <param name="nominalDiameterArray">The invalid nominal diameter values in doubles.</param>
             <param name="unitName"> The unit name of the invalid nominal diameter values.</param>
             <returns>NominalDiameter[].</returns>
             <example>
             <code>
                  NominalDiameter [] ndArray = GetNominalDiameterArray ( new double[] {10.0, 26.0, 35.0}, “mm”);
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.CustomSupportDefinition.JointHelper">
            <summary>
            Gets the JointHelper.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.CustomSupportDefinition.ConfigurationCount">
            <summary>
            Specifies the number of configurations available for the support. The default value is 1. 
            If more configurations are applicable, override for the support definition and return the appropriate configuration count.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.CustomSupportDefinition.Parts">
            <summary>
            Defines the information about the parts involved in the support assembly.
            Implementation must override this property and return the collection of PartInfo objects representing the parts involved in the support assembly for the active configuration.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.CustomSupportDefinition.ImpliedParts">
            <summary>
            Defines the information about the Impliedparts involved in the support assembly. The default value is a ReadOnlyCollection of PartInfo with count 0.
            Implementation must override this property and return the ReadOnlyCollection of PartInfo objects representing the Impliedparts involved in the support assembly for the active configuration.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.CustomSupportDefinition.SupportingConnections">
            <summary>
            Defines the information regarding the connections to supporting objects. 
            Override this property if one or more connections exist in the assembly of the supporting objects.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.CustomSupportDefinition.SupportedConnections">
            <summary >        
            Defines the information regarding the connections to supported objects. 
            Override this property if one or more connections exist in the assembly to the supporting objects.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.CustomSupportDefinition.Configuration">
            <summary>
            Returns the active configuration number.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.SupportSelectionRule">
            <summary>
            This is an abstract class, that serves as a base class for all support selection rules. 
            It provides the functionality to select supports based on a set of criteria, such as pipe size or discipline.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportSelectionRule.SupportsByInput(Ingr.SP3D.Support.Middle.DisciplineTypeFlags,System.Collections.ObjectModel.Collection{Ingr.SP3D.ReferenceData.Middle.Part})">
            <summary>
            Gets all the supports (from catalog or from given supports) which match the input of support like CmdType, FamilyName, SupportingCount, or SupportedCount.
            </summary>
            <param name="eSupDisciplineType">The discipline type in which to restrict.</param>
            <param name="oCollSupports">Existing supports, if any, to filter; null/nothing implies to search all catalog parts. </param>
            <returns>Supports qualifying specified criteria.</returns>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportSelectionRule.SupportsByRangeQuery(Ingr.SP3D.Support.Middle.DisciplineTypeFlags,System.Collections.ObjectModel.Collection{Ingr.SP3D.ReferenceData.Middle.Part},System.String,System.String,System.Object)">
            <summary>
            Gets all the supports (from catalog or from given supports) which match the discipline type, and a property value within the given low/high property. 
            </summary>
            <param name="eSupDisciplineType">The discipline type in which to restrict.</param>
            <param name="oCollSupports">Existing supports, if any to filter; null/nothing implies to search all catalog parts. </param>
            <param name="sLowerBoundName">Name of the part attribute representing the lower bound.</param>
            <param name="sUpperBoundName">Name of the part Attribute representing the upper bound.</param>
            <param name="value">Value of the attribute being matched.</param>
            <returns>Supports qualifying specified criteria.</returns>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportSelectionRule.SupportsByRangeQuery(Ingr.SP3D.Support.Middle.DisciplineTypeFlags,System.Collections.ObjectModel.Collection{Ingr.SP3D.ReferenceData.Middle.Part},System.String,System.String,System.Int16)">
            <summary>
            Returns a collection of selected supports where the value falls within the range defined by the attributes.
            </summary>
            <param name="eSupDisciplineType">The discipline type used to filter supports.</param>
            <param name="oCollSupports">Collection of supports from which to filter. If Null, all supports in the catalog are considered.</param>
            <param name="sLowerBoundName">The attribute name of the lower bound value.</param>
            <param name="sUpperBoundName">The attribute name of the upper bound value.</param>
            <param name="value">The value that must fall within the specified range.</param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportSelectionRule.SupportsByRangeQuery(Ingr.SP3D.Support.Middle.DisciplineTypeFlags,System.Collections.ObjectModel.Collection{Ingr.SP3D.ReferenceData.Middle.Part},System.String,System.String,System.Int32)">
            <summary>
            Returns a collection of selected supports when the value falls within the range defined by the attributes.
            </summary>
            <param name="eSupDisciplineType">The discipline type used to filter supports.</param>
            <param name="oCollSupports">Collection of supports from which to filter. If Null, all supports in the catalog are considered.</param>
            <param name="sLowerBoundName">The attribute name of the lower bound value.</param>
            <param name="sUpperBoundName">The attribute name of the upper bound value.</param>
            <param name="value">The value that must fall within the specified range.</param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportSelectionRule.SupportsByRangeQuery(Ingr.SP3D.Support.Middle.DisciplineTypeFlags,System.Collections.ObjectModel.Collection{Ingr.SP3D.ReferenceData.Middle.Part},System.String,System.String,System.Single)">
            <summary>
            Returns a collection of selected supports when the value falls within the range defined by the attributes.
            </summary>
            <param name="eSupDisciplineType">The discipline type used to filter supports.</param>
            <param name="oCollSupports">Collection of supports from which to filter. If Null, all supports in the catalog are considered.</param>
            <param name="sLowerBoundName">The attribute name of the lower bound value.</param>
            <param name="sUpperBoundName">The attribute name of the upper bound value.</param>
            <param name="value">The value that must fall within the specified range.</param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportSelectionRule.SupportsByRangeQuery(Ingr.SP3D.Support.Middle.DisciplineTypeFlags,System.Collections.ObjectModel.Collection{Ingr.SP3D.ReferenceData.Middle.Part},System.String,System.String,System.Double)">
            <summary>
            Returns a collection of selected supports in which the value falls within the range defined by the attributes.
            </summary>
            <param name="eSupDisciplineType">The discipline type used to filter supports.</param>
            <param name="oCollSupports">Collection of supports from which to filter. If Null, all supports in the catalog are considered.</param>
            <param name="sLowerBoundName">The attribute name of the lower bound value.</param>
            <param name="sUpperBoundName">The attribute name of the upper bound value.</param>
            <param name="value">The value that must fall within the specified range.</param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportSelectionRule.SupportsByRangeQuery(Ingr.SP3D.Support.Middle.DisciplineTypeFlags,System.Collections.ObjectModel.Collection{Ingr.SP3D.ReferenceData.Middle.Part},System.String,System.String,System.Object,System.Object)">
            <summary>
             Gets all the supports (from catalog or from given supports) that match the discipline type, and a property value within the given low/high property. 
            </summary>
            <param name="eSupDisciplineType">The discipline type in which to restrict.</param>
            <param name="oCollSupports">Existing supports, if any, to filter; null/nothing implies search all catalog parts. </param>
            <param name="sLowerBoundName">Name of the part attribute representing the lower bound.</param>
            <param name="sUpperBoundName">Name of the part attribute representing the upper bound.</param>
            <param name="minValue">Minimum value of the attribute being matched.</param>
            <param name="maxValue">Maximum value of the attribute being matched.</param>
            <returns>Supports qualifying specified criteria.</returns>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportSelectionRule.SupportsByRangeQuery(Ingr.SP3D.Support.Middle.DisciplineTypeFlags,System.Collections.ObjectModel.Collection{Ingr.SP3D.ReferenceData.Middle.Part},System.String,System.String,System.Int16,System.Int16)">
            <summary>
            Returns a collection of selected supports based on the given attribute and short values.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportSelectionRule.SupportsByRangeQuery(Ingr.SP3D.Support.Middle.DisciplineTypeFlags,System.Collections.ObjectModel.Collection{Ingr.SP3D.ReferenceData.Middle.Part},System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Returns a collection of selected supports based on the given attribute and integer values.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportSelectionRule.SupportsByRangeQuery(Ingr.SP3D.Support.Middle.DisciplineTypeFlags,System.Collections.ObjectModel.Collection{Ingr.SP3D.ReferenceData.Middle.Part},System.String,System.String,System.Single,System.Single)">
            <summary>
            Returns a collection of selected supports based on the given attribute and float values.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportSelectionRule.SupportsByRangeQuery(Ingr.SP3D.Support.Middle.DisciplineTypeFlags,System.Collections.ObjectModel.Collection{Ingr.SP3D.ReferenceData.Middle.Part},System.String,System.String,System.Double,System.Double)">
            <summary>
            Returns a collection of selected supports based on the given attribute and double values.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportSelectionRule.SupportsByCriteria(Ingr.SP3D.Support.Middle.DisciplineTypeFlags,System.Collections.ObjectModel.Collection{Ingr.SP3D.ReferenceData.Middle.Part},System.String,Ingr.SP3D.Support.Middle.ComparisonOperatorType,System.String)">
            <summary>
            Gets all the supports (from catalog or from given supports) which match the specified criteria of discipline type and a given attribute value.
            </summary>
            <param name="eSupDisciplineType">The discipline type in which to restrict.</param>
            <param name="oCollSupports">Existing supports, if any to filter; null/nothing implies to search all catalog parts. </param>
            <param name="sAttributeName"> The attribute name to match.</param>
            <param name="eOperatorType">Attribute value comparison operator.</param>
            <param name="value">Attribute value being matched.</param>
            <returns>Supports qualifying specified criteria.</returns>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportSelectionRule.SupportsByCriteria(Ingr.SP3D.Support.Middle.DisciplineTypeFlags,System.Collections.ObjectModel.Collection{Ingr.SP3D.ReferenceData.Middle.Part},System.String,Ingr.SP3D.Support.Middle.ComparisonOperatorType,System.Boolean)">
            <summary>
            Gets all the supports (from catalog or from given supports) which match the specified criteria of discipline type and a given attribute value.
            </summary>
            <param name="eSupDisciplineType">The discipline type in which to restrict.</param>
            <param name="oCollSupports">Existing supports, if any, to filter; null/nothing implies to search all catalog parts. </param>
            <param name="sAttributeName"> The attribute name to match.</param>
            <param name="eOperatorType">Attribute value comparison operator.</param>
            <param name="value">Attribute value being matched.</param>
            <returns>Supports qualifying specified criteria.</returns>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportSelectionRule.SupportsByCriteria(Ingr.SP3D.Support.Middle.DisciplineTypeFlags,System.Collections.ObjectModel.Collection{Ingr.SP3D.ReferenceData.Middle.Part},System.String,Ingr.SP3D.Support.Middle.ComparisonOperatorType,System.Int16)">
            <summary>
            Gets all the supports (from catalog or from given supports) which match the specified criteria of discipline type and a given attribute value.
            </summary>
            <param name="eSupDisciplineType">The discipline type in which to restrict.</param>
            <param name="oCollSupports">Existing supports if any to filter, null/nothing implies to search all catalog parts. </param>
            <param name="sAttributeName"> The attribute name to match.</param>
            <param name="eOperatorType">Attribute value comparison operator.</param>
            <param name="value">Attribute value being matched.</param>
            <returns>Supports qualifying specified criteria.</returns>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportSelectionRule.SupportsByCriteria(Ingr.SP3D.Support.Middle.DisciplineTypeFlags,System.Collections.ObjectModel.Collection{Ingr.SP3D.ReferenceData.Middle.Part},System.String,Ingr.SP3D.Support.Middle.ComparisonOperatorType,System.Int32)">
            <summary>
            Gets all the supports (from catalog or from given supports) which match the specified criteria of discipline type and a given attribute value.
            </summary>
            <param name="eSupDisciplineType">The discipline type in which to restrict.</param>
            <param name="oCollSupports">Existing supports, if any, to filter; null/nothing implies to search all catalog parts. </param>
            <param name="sAttributeName"> The attribute name to match.</param>
            <param name="eOperatorType">Attribute value comparison operator.</param>
            <param name="value">Attribute value being matched.</param>
            <returns>Supports qualifying specified criteria.</returns>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportSelectionRule.SupportsByCriteria(Ingr.SP3D.Support.Middle.DisciplineTypeFlags,System.Collections.ObjectModel.Collection{Ingr.SP3D.ReferenceData.Middle.Part},System.String,Ingr.SP3D.Support.Middle.ComparisonOperatorType,System.Single)">
            <summary>
            Gets all the supports (from catalog or from given supports) which match the specified criteria of discipline type and a given attribute value.
            </summary>
            <param name="eSupDisciplineType">The discipline type in which to restrict.</param>
            <param name="oCollSupports">Existing supports, if any, to filter; null/nothing implies to search all catalog parts. </param>
            <param name="sAttributeName"> The attribute name to match.</param>
            <param name="eOperatorType">Attribute value comparison operator.</param>
            <param name="value">Attribute value being matched.</param>
            <returns>Supports qualifying specified criteria.</returns>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportSelectionRule.SupportsByCriteria(Ingr.SP3D.Support.Middle.DisciplineTypeFlags,System.Collections.ObjectModel.Collection{Ingr.SP3D.ReferenceData.Middle.Part},System.String,Ingr.SP3D.Support.Middle.ComparisonOperatorType,System.Double)">
            <summary>
            Gets all the supports (from catalog or from given supports) which match the specified criteria of discipline type and a given attribute value.
            </summary>
            <param name="eSupDisciplineType">The discipline type in which to restrict.</param>
            <param name="oCollSupports">Existing supports, if any, to filter; null/nothing implies to search all catalog parts. </param>
            <param name="sAttributeName"> The attribute name to match.</param>
            <param name="eOperatorType">Attribute value comparison operator.</param>
            <param name="value">Attribute value being matched.</param>
            <returns>Supports qualifying specified criteria.</returns>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportSelectionRule.SupportsBySize(Ingr.SP3D.Support.Middle.DisciplineTypeFlags,System.Collections.ObjectModel.Collection{Ingr.SP3D.ReferenceData.Middle.Part},Ingr.SP3D.Common.Middle.Services.NominalDiameter)">
            <summary>
            Gets all the supports (from catalog or from given supports) based on the given nominal diameter.
            </summary>
            <param name="eSupDisciplineType">The discipline type in which to restrict.</param>
            <param name="oCollSupports">Existing supports, if any, to filter; null/nothing implies to search all catalog parts. </param>
            <param name="oNominalDia">The nominal diameter from which to filter.</param>
            <returns>Supports qualifying specified criteria.</returns>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportSelectionRule.SupportsBySize(Ingr.SP3D.Support.Middle.DisciplineTypeFlags,System.Collections.ObjectModel.Collection{Ingr.SP3D.ReferenceData.Middle.Part},System.Double,System.Double,System.String)">
            <summary>
            Gets all the supports (from catalog or from given supports) based on the given width and depth.
            </summary>
            <param name="eSupDisciplineType">The discipline type used to filter for supports.</param>
            <param name="oCollSupports">Existing supports, if any, to filter; null/nothing implies to search all catalog parts. </param>
            <param name="dWidth">The width in which to filter.</param>
            <param name="dDepth">The depth in which to filter.</param>
            <param name="sUnits">The units of dWidth and dDepth.</param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportSelectionRule.SupportsBySupportingFace(System.Int32,System.Collections.ObjectModel.Collection{Ingr.SP3D.ReferenceData.Middle.Part})">
            <summary>
            Gets all the supports (from catalog or from given supports) based on the given width and depth.
            </summary>
            <param name="iSupportingIndex">The index into the supporting object.</param>
            <param name="oExistingSupportsColl">Existing supports, if any, to filter; null/nothing implies to search all catalog parts. </param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportSelectionRule.OrderBy(System.Collections.ObjectModel.Collection{Ingr.SP3D.ReferenceData.Middle.Part},System.String,System.String,Ingr.SP3D.Support.Middle.OrderDirection)">
            <summary>
            Orders the given oCollSupports based on a given attribute.
            </summary>
            <param name="oCollSupports">The collection of supports to be ordered.</param>
            <param name="sInterfaceName">The interface of the attribute used to order the collection.</param>
            <param name="sAttributeName">The attribute used to order the collection.</param>
            <param name="eDirection">The direction (ascending/descending) in which the collection should be ordered.</param>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportSelectionRule.Supports">
            <summary>
            Override this property and provide the collection of catalog Part objects representing the acceptable supports for the
            given modelling situation (supported/supporting objects, disciplines, sizes etc.).
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.SupportPartSelectionRule">
            <summary>
            SupportPartSelectionRule is an abstract base class. It provides the functionality to select a catalog part from a specific part class 
            based on a set of criteria, such as pipe size.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportPartSelectionRule.SelectedPartFromPartClass(System.String)">
            <summary>
            This method must be overridden to return the part from the given Part class.
            </summary>
            <param name="sPartClass">The Part class from which the catalog part should be selected.</param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportPartSelectionRule.SupportPartByRangeQuery(System.String,System.String,System.String,System.String,System.Int16)">
            <summary>
            Returns a part from the specified Part class, when a value falls within the range specified by the two attributes.
            </summary>
            <param name="sPartClass">The Part class from which the catalog part should be selected.</param>
            <param name="sView">The view, if specified will be used to further filter the parts to that view.</param>
            <param name="sAttribute1Name">The attribute representing the lower bound of the range.</param>
            <param name="sAttribute2Name">The attribute representing the upper bound of the range.</param>
            <param name="value">The value that must fall within the specified range.</param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportPartSelectionRule.SupportPartByRangeQuery(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Returns a part from the specified Part class, when a value falls within the range specified by the two attributes.
            </summary>
            <param name="sPartClass">The Part class from which the catalog Part should be selected.</param>
            <param name="sView">The view, if specified will be used to further filter the parts to that view.</param>
            <param name="sAttribute1Name">The attribute representing the lower bound of the range.</param>
            <param name="sAttribute2Name">The attribute representing the upper bound of the range.</param>
            <param name="value">The value that must fall within the specified range.</param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportPartSelectionRule.SupportPartByRangeQuery(System.String,System.String,System.String,System.String,System.Single)">
            <summary>
            Returns a part from the specified Part class, when a value falls within the range specified by the two attributes.
            </summary>
            <param name="sPartClass">The Part class from which the catalog part should be selected.</param>
            <param name="sView">The view, if specified will be used to further filter the parts to that view.</param>
            <param name="sAttribute1Name">The attribute representing the lower bound of the range.</param>
            <param name="sAttribute2Name">The attribute representing the upper bound of the range.</param>
            <param name="value">The value that must fall within the specified range.</param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportPartSelectionRule.SupportPartByRangeQuery(System.String,System.String,System.String,System.String,System.Double)">
            <summary>
            Returns a part from the specified Part class, when a value falls within the range specified by the two attributes.
            </summary>
            <param name="sPartClass">The Part class from which the catalog part should be selected.</param>
            <param name="sView">The view, if specified will be used to further filter the parts to that view.</param>
            <param name="sAttribute1Name">The attribute representing the lower bound of the range.</param>
            <param name="sAttribute2Name">The attribute representing the upper bound of the range.</param>
            <param name="value">The value that must fall within the specified range.</param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportPartSelectionRule.SupportPartByCriteria(System.String,System.String,System.String,Ingr.SP3D.Support.Middle.ComparisonOperatorType,System.String)">
            <summary>
            Returns a part from the specified Part class, when a value is compared to the attribute.
            </summary>
            <param name="sPartClass">The Part class from which the catalog part should be selected.</param>
            <param name="sView">The view, if specified, will be used to further filter the parts to that view.</param>
            <param name="sAttributeName">The attribute that will be used in the comparison.</param>
            <param name="eOperatorType">The operator type to use in the comparison.</param>
            <param name="value">The value that will be compared to the given attribute.</param>		
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportPartSelectionRule.SupportPartByCriteria(System.String,System.String,System.String,Ingr.SP3D.Support.Middle.ComparisonOperatorType,System.Boolean)">
            <summary>
            Returns a part from the specified Part class, when a value is compared to the attribute.
            </summary>
            <param name="sPartClass">The Part class from which the catalog part should be selected.</param>
            <param name="sView">The view, if specified, will be used to further filter the parts to that view.</param>
            <param name="sAttributeName">The attribute that will be used in the comparison.</param>
            <param name="eOperatorType">The operator type to use in the comparison.</param>
            <param name="value">The value that will be compared to the given attribute.</param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportPartSelectionRule.SupportPartByCriteria(System.String,System.String,System.String,Ingr.SP3D.Support.Middle.ComparisonOperatorType,System.Int16)">
            <summary>
            Returns a part from the specified Part class, when a value is compared to the attribute.
            </summary>
            <param name="sPartClass">The Part class from which the catalog part should be selected.</param>
            <param name="sView">The view, if specified, will be used to further filter the parts to that view.</param>
            <param name="sAttributeName">The attribute that will be used in the comparison.</param>
            <param name="eOperatorType">The operator type to use in the comparison.</param>
            <param name="value">The value that will be compared to the given attribute.</param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportPartSelectionRule.SupportPartByCriteria(System.String,System.String,System.String,Ingr.SP3D.Support.Middle.ComparisonOperatorType,System.Int32)">
            <summary>
            Returns a part from the specified Part class, when a value is compared to the attribute.
            </summary>
            <param name="sPartClass">The Part class from which the catalog part should be selected.</param>
            <param name="sView">The view, if specified, will be used to further filter the parts to that view.</param>
            <param name="sAttributeName">The attribute that will be used in the comparison.</param>
            <param name="eOperatorType">The operator type to use in the comparison.</param>
            <param name="value">The value that will be compared to the supplied attribute.</param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportPartSelectionRule.SupportPartByCriteria(System.String,System.String,System.String,Ingr.SP3D.Support.Middle.ComparisonOperatorType,System.Single)">
            <summary>
            Returns a part from the specified Part class, when a value is compared to the attribute.
            </summary>
            <param name="sPartClass">The Part class from which the catalog part should be selected.</param>
            <param name="sView">The view, if specified, will be used to further filter the parts to that view.</param>
            <param name="sAttributeName">The attribute that will be used in the comparison.</param>
            <param name="eOperatorType">The operator type to use in the comparison.</param>
            <param name="value">The value that will be compared to the given attribute.</param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportPartSelectionRule.SupportPartByCriteria(System.String,System.String,System.String,Ingr.SP3D.Support.Middle.ComparisonOperatorType,System.Double)">
            <summary>
            Returns a part from the specified Part class, when a value is compared to the attribute.
            </summary>
            <param name="sPartClass">The Part class from which the catalog part should be selected.</param>
            <param name="sView">The view, if specified, will be used to further filter the parts to that view.</param>
            <param name="sAttributeName">The attribute that will be used in the comparison.</param>
            <param name="eOperatorType">The operator type to use in the comparison.</param>
            <param name="value">The value that will be compared to the given attribute.</param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportPartSelectionRule.SupportPartBySize(System.String,Ingr.SP3D.Common.Middle.Services.NominalDiameter,Ingr.SP3D.Support.Middle.NDComparisonOperatorType)">
            <summary>
            Returns a part from the specified Part class based on the given nominal diameter.
            </summary>
            <param name="sPartClass">The Part class from which the catalog part should be selected.</param>
            <param name="oNominalDia">The nominal diameter from which to filter.</param>
            <param name="eOperatorType">The operator type to use in the comparison.</param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportPartSelectionRule.SupportPartBySize(System.String,Ingr.SP3D.Common.Middle.Services.NominalDiameter)">
            <summary>
            Returns a part from the specified Part class based on the given nominal diameter.
            </summary>
            <param name="sPartClass">The Part class from which the catalog part should be selected.</param>
            <param name="oNominalDia">The nominal diameter from which to filter.</param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportPartSelectionRule.SupportPartBySize(System.String,System.Double,System.Double,Ingr.SP3D.Support.Middle.ComparisonOperatorType)">
            <summary>
            Returns a part based on the given width and depth.
            </summary>
            <param name="sPartClass">The Part class from which the catalog part should be selected.</param>
            <param name="dWidth">The width from which to filter.</param>
            <param name="dDepth">The depth from which to filter.</param>
            <param name="eOperatorType">The operator type to use in the comparison.</param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportPartSelectionRule.SupportPartByQuery(System.String)">
            <summary>
            Returns a part selected by a database query.
            </summary>
            <param name="sQuery">The SQL query.</param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportPartSelectionRule.SupportPartByAssociation(System.String,System.Int32,System.String[])">
            <summary>
            Returns a part based on the given association type, SectionInfo, and PartClass.
            </summary>
            <param name="sPartClass">The Part class from which the catalog part should be selected.</param>
            <param name="HGR_CROSSSECREL">The hanger cross section relation number.</param>
            <param name="SectionInfo">Array of strings containing the section information [Section Standard, Section Type, Section Name].</param>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportPartSelectionRule.ReferenceIndex">
            <summary>
            Returns the current reference index as specified on the PartInfo class. The rule should use this to determine
            which supporting or supported object to consider in selecting the part from the Part class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.SupportHelper">
            <summary>
            Provides all methods and properties related to getting information about the Support object.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.SupportHelper.m_oSupport">
            <summary>
             Used to set a support on SupportHelper.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportHelper.#ctor(Ingr.SP3D.Support.Middle.Support)">
            <summary>
            SupportHelper constructor that takes support as input.
            </summary>
            <param name="oSupport">Support object.</param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportHelper.Finalize">
            <summary>
            Destructor for SupportHelper
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportHelper.MinimumDistances(System.Int32,System.Int32,System.Double@)">
            <summary>
            Gets the minimum and maximum distances between the given route and structure.
            </summary>
            <param name="iSupportedIndex">The index of the supported object.</param>
            <param name="iSupportingIndex">The index of the supporting object.</param>
            <param name="dMinDistance">The minimum distance between the objects.</param>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportHelper.Support">
            <summary>
            Gets the Support object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportHelper.SupportComponentPartNumberDictionary">
            <summary>
            Gets the part numbers with their corresponding unique part keys.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportHelper.SupportComponentDictionary">
            <summary>
            Gets the SupportComponent occurrences with their corresponding unique part keys.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportHelper.SupportedObjects">
            <summary>
            Returns the collection of supported objects.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportHelper.SupportingObjects">
            <summary>
            Returns the collection of supporting objects.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportHelper.SupportPosition">
            <summary>
            Returns the position of the support if placed by-point.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportHelper.PlacementType">
            <summary>
            Returns the command used to place the support.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.SupportedHelper">
            <summary>
            Provids all methods and properties related to getting information about the supported object(s).
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.SupportedHelper.m_oSupport">
            <summary>
             Used to set support on SupportHelper.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportedHelper.#ctor(Ingr.SP3D.Support.Middle.Support)">
            <summary>
            SupportedHelper which takes a Support object as input.
            </summary>
            <param name="oSupport">Support object.</param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportedHelper.Finalize">
            <summary>
            Destructor for SupportHelper
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportedHelper.SupportedObjectInfo(System.Int32)">
            <summary>
            Returns the SupportedObjectInfo class for the given supported index.
            </summary>
            <param name="iSupportedIndex">The index of the supported object.</param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportedHelper.SupportedObjectInfo(Ingr.SP3D.Support.Middle.SupportedObjectType,Ingr.SP3D.Support.Middle.FeatureType)">
            <summary>
            Returns a ReadOnlyCollection of SupportedObjectInfo, filtered according to the given inputs.
            </summary>
            <param name="eSupportedType">The supported object type to return.</param>
            <param name="eFeatureType">The seature type to return.</param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportedHelper.GetSupportedObject(Ingr.SP3D.Support.Middle.SupportedObjectType,Ingr.SP3D.Route.Middle.RouteFeature)">
            <summary>
            Returns SupportedObjectInfo based on a given type and feature.
            </summary>
            <param name="eSupportedType"></param>
            <param name="oRteFeat"></param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportedHelper.IsSupportedObjectVertical(System.Int32,System.Double)">
            <summary>
            Checks whether the supported object is vertical.
            </summary>
            <param name="index">Index of the supported object to check.</param>
            <param name="toleranceDegree"> Tolerance, in degrees, for which a route should be considered vertical if it is not exactly vertical.</param>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.SupportObjectNullException">Unable to get the supported object information.</exception>
            <returns>True if the supported object is vertical; otherwise, False.</returns>
            <example>
            <code>
                  dblValue = SupportedHelper. IsSupportedObjectVertical(index, toleranceDegree );
            </code>
            </example>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.SupportingHelper">
            <summary>
            SupportingHelper is a class providing all methods and properties related to getting information about the supporting object(s).
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.SupportingHelper.m_oSupport">
            <summary>
             Used to set support on SupportingHelper.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportingHelper.#ctor(Ingr.SP3D.Support.Middle.Support)">
            <summary>
            oSupport
            </summary>
            <param name="oSupport"></param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportingHelper.Finalize">
            <summary>
            Destructor for SupportingHelper
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportingHelper.SupportingObjectInfo(System.Int32)">
            <summary>
            Returns the SupportingObjectInfo class for the given supporting index.
            </summary>
            <param name="iSupportingIndex">The index of the supporting object.</param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportingHelper.SupportingObjectInfo(Ingr.SP3D.Support.Middle.SupportingObjectType)">
            <summary>
            Returns a ReadOnlyCollection of SupportingObjectInfo filtered based on the SupportingObjectType.
            </summary>
            <param name="eSupportingObjType">The supporting object type to return.</param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportingHelper.GetProjectedPointOnSurface(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.BusinessObject,Ingr.SP3D.Common.Middle.Position@,Ingr.SP3D.Common.Middle.Vector@)">
            <summary>
            Gets the projected point on a surface and also returns the surface normal at the projected position.
            </summary>
            <param name="InputPosition">The position from which to project.</param>
            <param name="DirectionToProject">The direction in which to project.</param>
            <param name="SurfaceToProjectOnto">The surface/supporting object to project onto.</param>
            <param name="ProjectedPosition">The resulting projected position on the surface.</param>
            <param name="NormalAtProjectedPosition">The resulting normal to the surface at the projected point.</param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportingHelper.GetFacePositionInfo(System.Int32,System.Int32@,System.Int32@,System.Double@,System.Double@)">
            <summary>
            Gets the face position information of the supporting object.
            </summary>
            <param name="lCardinalPnt">Cardinal point</param> 
            <param name="iSupportingIndex">Supporting index</param>
            <param name="lGroupKey">Group key</param> 
            <param name="Offset">Offset</param> 
            <param name="OffsetY">Offset Y</param>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.RefPortHelper">
            <summary>
            RefPortHelper is a class providing all methods and properties related to getting information about the support reference ports.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.RefPortHelper.m_oSupport">
            <summary>
             Used to set support on RefPortHelper.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.RefPortHelper.#ctor(Ingr.SP3D.Support.Middle.Support)">
            <summary>
            Returns the reference support helper.
            </summary>
            <param name="oSupport">Support object.</param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.RefPortHelper.Finalize">
            <summary>
            Destructor for RefPortHelper
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.RefPortHelper.ReferencePort(System.String)">
            <summary>
            Gets the reference port with the given name.
            </summary>
            <param name="sRefPortName">The name of the reference port.</param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.RefPortHelper.PortConfiguration(System.Int32,System.Int32)">
            <summary>
            Gets the port configuration value.
            </summary>
            <param name="iSupportedIndex">Route index.</param>
            <param name="iSupportingIndex">Structure index.</param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.RefPortHelper.DistanceBetweenPorts(System.String,System.String,Ingr.SP3D.Support.Middle.PortDistanceType)">
            <summary>
            Gets the distance between the given reference ports along the specified direction.
            </summary>
            <param name="sPort1Name">The first reference port.</param>
            <param name="sPort2Name">The second reference port.</param>
            <param name="eDistanceType">The distance type.</param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.RefPortHelper.DistanceBetweenPortsCurves(Ingr.SP3D.Support.Middle.PortDistanceType,System.Double@,System.Double@)">
            <summary>
            Gets the distance between the given reference ports along the specified direction.
            </summary>
            <param name="eDistanceType">The distance type.</param>
            <param name="dMinimum">The minimum distance.</param>
            <param name="dMaximum">The maximum distance.</param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.RefPortHelper.DistanceBetweenSpecifiedPortsCurves(System.Int32,System.Int32,Ingr.SP3D.Support.Middle.PortDistanceType,System.Double@,System.Double@)">
            <summary>
            Gets the distance between the given reference ports along the specified direction.
            </summary>
            <param name="iSupportedIndex">The first reference port index.</param>
            <param name="iSupportingIndex">The second reference port index.</param>
            <param name="eDistanceType">The distance type.</param>
            <param name="dMinimum">The minimum distance.</param>
            <param name="dMaximum">The maximum distance.</param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.RefPortHelper.DistanceBetweenPorts(System.String,System.String,Ingr.SP3D.Support.Middle.PortAxisType)">
            <summary>
            Returns the distance between the given reference ports along the specified axis of the first port.
            </summary>
            <param name="sPort1Name">The first reference port.</param>
            <param name="sPort2Name">The second reference port.</param>
            <param name="eAxisType">The axis of sPort1Name along which the distance should be measured.</param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.RefPortHelper.DistanceBetweenPorts(System.String,System.String,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Returns the vector from the first to second port, projected along the given vector. The result may be negative.
            </summary>
            <param name="sPort1Name">The first reference port.</param>
            <param name="sPort2Name">The second reference port.</param>
            <param name="alongVector">The vector along which the distance should be measured.</param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.RefPortHelper.AngleBetweenPorts(System.String,Ingr.SP3D.Support.Middle.PortAxisType,Ingr.SP3D.Support.Middle.OrientationAlong)">
            <summary>
            Returns the angle between the given port's axis and the world reference port.
            </summary>
            <param name="sPortName">The reference port name.</param>
            <param name="ePortAxisType">The axis of sPortName.</param>
            <param name="Orientation">The global vector from which the angle should be measured.</param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.RefPortHelper.AngleBetweenPorts(System.String,Ingr.SP3D.Support.Middle.PortAxisType,System.String,Ingr.SP3D.Support.Middle.PortAxisType,Ingr.SP3D.Support.Middle.OrientationAlong)">
            <summary>
            Returns the angle between the axis of the given ports.
            </summary>
            <param name="sPort1Name">The first reference port name.</param>
            <param name="ePortAxisType1">The axis on the first port.</param>
            <param name="sPort2Name">The second reference port name.</param>
            <param name="ePortAxisType2">The axis on the second port.</param>
            <param name="Orientation">The global direction from which the angle should be measured.</param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.RefPortHelper.PortConfigurationAngle(System.String,System.String,Ingr.SP3D.Support.Middle.PortAxisType)">
            <summary>
            Retrieves the angle between the vector from the first port to the seconc, and the specified axis on first port.
            </summary>
            <param name="sPort1Name">The first reference port name.</param>
            <param name="sPort2Name">The second reference port name.</param>
            <param name="ePort1AxisType">The axis on the first port.</param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.RefPortHelper.PortLCS(System.String)">
            <summary>
            Gets the reference port's position and X,Y,Z vectors.
            </summary>
            <param name="sPortName">The reference port name.</param>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.RefPortHelper.ReferencePorts">
            <summary>
            Gets the collection of ReferencePorts objects for the support.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.BoundingBoxHelper">
            <summary>
            BoundingBoxHelper is a class providing all methods and properties related to the creation and information of a bounding box.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.BoundingBoxHelper.m_oSupport">
            <summary>
             Used to set support on BoundingBoxHelper.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.BoundingBoxHelper.#ctor(Ingr.SP3D.Support.Middle.Support)">
            <summary>
            oSupport
            </summary>
            <param name="oSupport"></param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.BoundingBoxHelper.Finalize">
            <summary>
            Destructor for BoundingBoxHelper
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.BoundingBoxHelper.CreateStandardBoundingBoxes(System.Boolean)">
            <summary>
            Creates all standard bounding boxes based on the given inputs.
            </summary>
            <param name="includeInsulation">Whether or not insulation thickness should be included in the bounding box dimensions.</param>
            <returns>void</returns>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.BBXCreationFailed">Raised if bounding box creation failed.</exception>
            <example>
            <code>          
                  BoundingBoxHelper.CreateStandardBoundingBoxes(includeInsulation );
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.BoundingBoxHelper.GetBoundingBox(Ingr.SP3D.Support.Middle.BoundingBoxType)">
            <summary>
            Gets the bounding box based on the given inputs.
            </summary>
            <param name="boundingBoxType">The pre-defined bounding box type to create.</param>
            <returns>BoundingBox</returns>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.BBXMissingException">Unable to get the specified bounding box.</exception>
            <example>
            <code>          
                  BoundingBoxHelper.GetBoundingBox(bBXType );
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.BoundingBoxHelper.GetBoundingBox(System.String)">
            <summary>
            Gets the bounding box based on the given inputs.
            </summary>
            <param name="boundingBoxName">The bounding box name.</param>
            <returns>Bounding box</returns>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.BBXMissingException">Raised if unable to get the specified bounding box.</exception>
            <example>
            <code>               
                  oBoundingBox = BoundingBoxHelper.CreateBoundingBox(vecY, vecZ, sBBXName, includeInsulation, bMirror, bIncludeSupportPort)
                  oBoundingBox = BoundingBoxHelper.GetBoundingBox(sBBXName );
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.BoundingBoxHelper.CreateBoundingBox(Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates the bounding box based on the given inputs.
            </summary>
            <param name="vecY">A vector representing the Y-axis of the bounding box.</param>
            <param name="vecZ">A vector representing the Z-axis of the bounding box.</param>
            <param name="sBBXName">The name of the bounding box.</param>
            <param name="includeInsulation">Whether or not insulation thickness should be included in the bounding box dimensions.</param>
            <param name="bMirror">Whether or not the bounding box should be mirrored.</param>
            <param name="bIncludeSupportPort">Whether or not the location of the bounding box should be moved such that the supporting port lies on the plane of the bounding box.</param>        
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.BoundingBoxHelper.CreateBoundingBox(Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates the bounding box based on the given inputs.
            </summary>
            <param name="vecY">A vector representing the Y-axis of the bounding box.</param>
            <param name="vecZ">A vector representing the Z-axis of the bounding box.</param>
            <param name="sBBXName">The name of the bounding box.</param>
            <param name="includeInsulation">Whether or not insulation thickness should be included in the bounding box dimensions.</param>
            <param name="bMirror">Whether or not the bounding box should be mirrored.</param>
            <param name="bIncludeSupportPort">Whether or not the location of the bounding box should be moved such that the supporting port lies on the plane of the bounding box.</param>
            <param name="bUseSecondVectorAsNormal">Whether the second vector needs to be used as the normal of the bounding box.</param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.BoundingBoxHelper.GetVectorForBBXDirection(Ingr.SP3D.Support.Middle.BoundingBoxDirection)">
            <summary>
            Gets a vector along a specific direction.
            </summary>
            <param name="eBBXDirection">Direction along which the vector should lie.</param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.BoundingBoxHelper.GetVectorForBBXDirection(Ingr.SP3D.Support.Middle.BoundingBoxDirection,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Gets a vector along a specific direction, projected into the plane defined by the normal.
            </summary>
            <param name="eBBXDirection">Direction that the vector should be along.</param>
            <param name="vecNormal">Normal to the plane into which the vector should be projected.</param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.BoundingBoxHelper.GetBoundaryRouteIndex(System.String,Ingr.SP3D.Support.Middle.BoundingBoxEdge)">
            <summary>
            Gets the index of the boundary Route object on the bounding box.T he boundary index that is returned depends on the type
            specified by BBXBoundary (Left, Right, Top, Bottom). Right is defined as the positive Y-axis direction of the bounding box ports.
            Top is defined as the positive Z-axis direction of the bounding box ports.
            </summary>
            <param name="boundingBoxName">Boundary box name.</param>
            <param name="boundingBoxEdgeType">HgrBBXBoundary enumerated value.</param>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.HgrPortsException">Raised when there is failure to get ports of the support or support component.</exception>
            <returns>The integer index.</returns> 
            <example>
            <code>      
                  int iValue;
                  iValue = BoundingBoxHelper.GetBoundaryRouteIndex(bBXName, hBBXBoundary );
            </code>
            </example>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.GenericHelper">
            <summary>
            GenericHelper is a class providing all methods and properties related to generic functionality that do not fall into the categories
            of the other Hangers and Supports Helper classes.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.GenericHelper.m_oSupport">
            <summary>
             Used to set support on GenericHelper.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.GenericHelper.#ctor(Ingr.SP3D.Support.Middle.Support)">
            <summary>
            Generic helper for the Support object.
            </summary>
            <param name="oSupport">Support object.</param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.GenericHelper.Finalize">
            <summary>
            Destructor for GenericHelper
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.GenericHelper.GetDataByRule(System.String,Ingr.SP3D.Common.Middle.BusinessObject,System.Int16@)">
            <summary>
            Gets the result of a given rule in the catalog.
            </summary>
            <param name="sRuleName">The name of the rule in the catalog.</param>
            <param name="oBO">The BusinessObject the rule should use as an input. If null, the support object is used.</param>
            <param name="value">The result of the rule.</param>
            <example>How to get short value of a rule given in the catalog.
            <code>
            'The sRuleName is Rule Name given on the catalog.
            Dim sRuleName as String = "Rule_Name"
            'The object will be input to for ProgID based Rule.
            Dim oInputObject As BuisinessObject = Nothing 
            'The oValue will be the Output of GetDataByRule and is a short.
            Dim oValue as short
            ' Initialize your oInputObject here before calling GetdataByRule.
            Dim oBool = GetDataByRule(sRuleName, oInputObject, out oValue)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.GenericHelper.GetDataByRule(System.String,Ingr.SP3D.Common.Middle.BusinessObject,System.Int32@)">
            <summary>
            Gets the result of a given rule in the catalog. 
            </summary>
            <param name="sRuleName">The name of the rule in the catalog.</param>
            <param name="oBO">The BusinessObject the rule should use as an input. If null, the support object is used.</param>
            <param name="value">The result of the rule.</param>
            <example>How to get an integer value of a rule given in the catalog.
            <code>
            'The sRuleName is Rule Name given on the catalog.
            Dim sRuleName as String = "Rule_Name"
            'The object will be input to for ProgID based Rule.
            Dim oInputObject As BuisinessObject = Nothing 
            'The oValue will be the Output of GetDataByRule and is an integer.
            Dim oValue as int
            ' Initialize your oInputObject here before calling GetdataByRule.
            Dim oBool = GetDataByRule(sRuleName, oInputObject, out oValue)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.GenericHelper.GetDataByRule(System.String,Ingr.SP3D.Common.Middle.BusinessObject,System.Double@)">
            <summary>
            Gets the result of a given rule in the catalog. 
            </summary>
            <param name="sRuleName">The name of the rule in the catalog.</param>
            <param name="oBO">The BusinessObject the rule should use as an input. If null, the support object is used.</param>
            <param name="value">The result of the rule.</param>
            <example>How to get a double value of a rule given in the catalog.
            <code>
            'The sRuleName is Rule Name given on the catalog.
            Dim sRuleName as String = "Rule_Name"
            'The object will be input to for ProgID based Rule.
            Dim oInputObject As BuisinessObject = Nothing 
            'The oValue will be the Output of GetDataByRule and is a double.
            Dim oValue as double
            ' Initialize your oInputObject here before calling GetdataByRule.
            Dim oBool = GetDataByRule(sRuleName, oInputObject, out oValue)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.GenericHelper.GetDataByRule(System.String,Ingr.SP3D.Common.Middle.BusinessObject,System.String@)">
            <summary>
            Gets the result of a given rule in the catalog. 
            </summary>
            <param name="sRuleName">The name of the rule in the catalog.</param>
            <param name="oBO">The BusinessObject the rule should use as an input. If null, the support object is used.</param>
            <param name="value">The result of the rule.</param>
            <example>How to get a string value of a rule given in the catalog.
            <code>
            'The sRuleName is Rule Name given on the catalog.
            Dim sRuleName as String = "Rule_Name"
            'The object will be input to for ProgID based Rule.
            Dim oInputObject As BuisinessObject = Nothing 
            'The oValue will be the Output of GetDataByRule and is a string.
            Dim oValue as string = Nothing
            ' Initialize your oInputObject here before calling GetdataByRule.
            Dim oBool = GetDataByRule(sRuleName, oInputObject, out oValue)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.GenericHelper.GetDataByRule(System.String,Ingr.SP3D.Common.Middle.BusinessObject,Ingr.SP3D.Common.Middle.Services.CodelistItem@)">
            <summary>
            Gets the result of a given rule in the catalog. 
            </summary>
            <param name="sRuleName">The name of the rule in the catalog.</param>
            <param name="oBO">The BusinessObject that the rule should use as an input. If null, the support object is used.</param>
            <param name="value">The result of the rule.</param>
            <example>How to get the codelist value of rule given in the catalog.
            <code>
            'The sRuleName is Rule Name given on the catalog.
            Dim sRuleName as String = "Rule_Name"
            'The object will be input to for ProgID based Rule.
            Dim oInputObject As BuisinessObject = Nothing 
            'The oValue will be the Output of GetDataByRule and is Code lList Item.
            Dim oValue as CodelistItem = Nothing
            ' Initialize your oInputObject here before calling GetdataByRule.
            Dim oBool = GetDataByRule(sRuleName, oInputObject, out oValue)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.GenericHelper.GetDataByRule(System.String,Ingr.SP3D.Common.Middle.BusinessObject,System.Collections.ObjectModel.Collection{System.Object}@)">
            <summary>
            Gets the result of a given rule in the catalog. 
            </summary>
            <param name="sRuleName">The name of the rule in the catalog.</param>
            <param name="oBO">The BusinessObject that the rule should use as an input. If null, the support object is used.</param>
            <param name="values">The result of the rule.</param>
            <example>How to get a collection of values of a rule given in the catalog.
            <code>
            'The sRuleName is Rule Name given on the catalog.
            Dim sRuleName as String = "Rule_Name"
            'The object will be input for the ProgID-based rule.
            Dim oInputObject As BuisinessObject = Nothing 
            'The oValue will be the output of GetDataByRule and is a collection of type Object.
            Dim oValue as Collection(of Object) = Nothing
            ' Initialize your oInputObject here before calling GetdataByRule.
            Dim oBool = GetDataByRule(sRuleName, oInputObject, out oValue)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.GenericHelper.GetDataByRule(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},Ingr.SP3D.Common.Middle.PropertyValue@)">
            <summary>
            Gets the property value based on the input criteria from a specified lookup/auxillary table in the catalog.
            </summary>
            <param name="strPartClass">The part class and service or auxillary table name from which to get the data. </param>
            <param name="strInterface">The interface in which the data is defined. </param>
            <param name="strAtttribute">The attribute value to be queried. </param>
            <param name="oPropertyNameValuePair">The property name value pair, which is an IDictionary object containing the attribute name and value pair of the other attributes in the table.
            These will be used to match with the values of the attributes in the table. For the matching row, the value of the attribute (specified by the 3rd parameter) will be returned.
            This method currently assumes that only one row in the table will satisfy the requirement, and will raise an exception if more rows are found. </param>
            <param name="propValue">The result of the rule.</param>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.SupportInvalidArgumentException">Empty key (Attribute Name) is in the dictionary.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.SupportInvalidArgumentException">Mismatch in the datatype of the dictionary value.</exception> 
            <exception cref="T:Ingr.SP3D.Support.Exceptions.SupportInvalidArgumentException">No part class is found by the given criteria.</exception> 
            <exception cref="T:Ingr.SP3D.Support.Exceptions.SupportInvalidArgumentException">No class item is found by the given criteria.</exception> 
            <example>How to get a PartNumber value for a given set of constraints.
            <code>
                'The oPropertyNameValuePair is a set of Dictionary value
                Dim oPropertyNameValuePair As IDictionary(Of String, Object) = New Dictionary(Of String, Object)
                oPropertyNameValuePair.Add("SteelID", "L1")
                oPropertyNameValuePair.Add("SteelStandard", 5)
                'The strPartClass is the part class name in which the data is fetched.
                Dim strPartClass As String = "hsS3D_FrameSteelEqual"
                'The strInterface is the interface name in which the data is defined.
                Dim strInterface As String = "IJUAhsFrameSteelEquivalent"
                'The strAtttribute is the attribute name value to be queried.
                Dim strAtttribute As String = "PartNumber"
                The 'propValue is the result of the rule.
                Dim propValue as PropertyValue
                'The bGetData is the boolean for the status of the fetch.
                Dim bGetData As bool
                bGetData = GenericHelper.GetDataByRule("hsS3D_FrameSteelEqual", "IJUAhsFrameSteelEquivalent", "PartNumber", Parameters, propValue);
            </code>
            </example>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.SupportedObjectInfo">
            <summary>
            SupportedObjectInfo is an abstract class providing access to the properties common to all supported object discipline types.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.SupportedObjectInfo.m_oRteFeat">
            <summary>
            RouteFeature member variable
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportedObjectInfo.#ctor(Ingr.SP3D.Route.Middle.RouteFeature)">
            <summary>
            Initializes a new instance of the <see cref="T:Ingr.SP3D.Support.Middle.SupportedObjectInfo"/> class.
            </summary>
            <param name="oRteFeat">The o rte feat.</param>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportedObjectInfo.#ctor">
            <summary>
            Initializes a new instance of the SupportedObjectInfo class.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportedObjectInfo.StartLocation">
            <summary>
            Gets the start position.
            </summary>
            <returns>Position</returns>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportedObjectInfo.EndLocation">
            <summary>
            Gets the end location.
            </summary>
            <returns>Position</returns>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportedObjectInfo.BendAngle">
            <summary>
            Gets the bend angle of the supported object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportedObjectInfo.BendRadius">
            <summary>
            Gets the bend radius of the supported object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportedObjectInfo.Center">
            <summary>
            Gets the center of the supported object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportedObjectInfo.CenterOfRotation">
            <summary>
            Gets the center of rotation of the supported object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportedObjectInfo.FaceToCenter">
            <summary>
            Gets the face to center of the supported object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportedObjectInfo.FeatureType">
            <summary>
            Gets the feature type of the supported object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportedObjectInfo.MaterialCategory">
            <summary>
            Gets the material category of the supported object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportedObjectInfo.MaterialGrade">
            <summary>
            Gets the material grade of the supported object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportedObjectInfo.MaterialType">
            <summary>
            Gets the material type of the supported object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportedObjectInfo.Orientation">
            <summary>
            Gets the orientation of the supported object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportedObjectInfo.OrientationAngle">
            <summary>
            Gets the orientation angle of the supported object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportedObjectInfo.Spec">
            <summary>
            Gets the specification of the supported object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportedObjectInfo.SupportedObjectType">
            <summary>
            Gets the supported object type.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.PipeObjectInfo">
            <summary>
            PipeObjectInfo is a class providing access to properties specific to piping objects.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.PipeObjectInfo.GetNominalDiameterByUnit(Ingr.SP3D.Common.Middle.Services.UnitName)">
            <summary>
            Gets the nominal pipe diameter in the given units.
            </summary>
            <param name="unitName">Units to get the nominal diameter in.</param>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.UnitNotSetException">Unit name is not set on the nominal diameter.</exception>
            <returns>NominalDiameter</returns>
            <example>
            <code>
                  PipeObjectInfo pipeObj = SupportedHelper.SupportedObjectInfo(1);           
                  pipeHelper.GetNominalDiameterByUnit(UnitName.NPD_MILLIMETER);
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.PipeObjectInfo.MaxDesignPressure">
            <summary>
            Gets the maximum design pressure.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.PipeObjectInfo.MaxDesignTemperature">
            <summary>
            Gets the maximum design temperature.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.PipeObjectInfo.MaxOperatingPressure">
            <summary>
            Gets the maximum operating pressure.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.PipeObjectInfo.MaxOperatingTemperature">
            <summary>
            Gets the maximum operating temperature.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.PipeObjectInfo.MinDesignPressure">
            <summary>
            Gets the minimum design pressure.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.PipeObjectInfo.MinDesignTemperature">
            <summary>
            Gets the minimum design temperature.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.PipeObjectInfo.MinOperatingPressure">
            <summary>
            Gets the minimum operating pressure.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.PipeObjectInfo.MinOperatingTemperature">
            <summary>
            Gets the minimum operating temperature.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.PipeObjectInfo.NominalDiameter">
            <summary>
            Gets the nominal diameter.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.PipeObjectInfo.OutsideDiameter">
            <summary>
            Gets the outer diameter.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.PipeObjectInfo.InsulationPurpose">
            <summary>
            Gets the insulation purpose.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.PipeObjectInfo.Schedule">
            <summary>
            Gets the schedule.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.PipeObjectInfo.WallThickness">
            <summary>
            Gets the wall thickness.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.PipeObjectInfo.InsulationThickness">
            <summary>
            Gets the insulation thickness.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.ConduitObjectInfo">
            <summary>
            ConduitObjectInfo is a class providing access to properties specific to conduit objects.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.ConduitObjectInfo.NominalDiameter">
            <summary>
            Gets the nominal diameter.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.ConduitObjectInfo.OutsideDiameter">
            <summary>
            Gets the outer diameter.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.DuctObjectInfo">
            <summary>
            DuctObjectInfo is a class providing access to properties specific to duct objects.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.DuctObjectInfo.CrossSectionShape">
            <summary>
            Gets the cross section shape.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.DuctObjectInfo.Depth">
            <summary>
            Gets the depth of the duct cross section.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.DuctObjectInfo.Width">
            <summary>
            Gets the width of the duct cross section.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.DuctObjectInfo.InsulationPurpose">
            <summary>
            Gets the insulation purpose.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.DuctObjectInfo.InsulationThickness">
            <summary>
            Gets the insulation thickness.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.DuctObjectInfo.NominalDiameter">
            <summary>
            Gets the nominal diameter.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.DuctObjectInfo.OutsideDiameter">
            <summary>
            Gets the outer diameter.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.CableTrayObjectInfo">
            <summary>
            CableTrayObjectInfo is a class providing access to properties specific to cableway objects.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.CableTrayObjectInfo.CrossSectionShape">
            <summary>
            Gets the cross section shape.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.CableTrayObjectInfo.Depth">
            <summary>
            Gets the depth of the cross section.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.CableTrayObjectInfo.Width">
            <summary>
            Gets the width of the cross section.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.SupportingObjectInfo">
            <summary>
            SupportingObjectInfo is a class providing access to properties common to all supporting objects.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportingObjectInfo.Angle">
            <summary>
            Gets the angle of the supporting object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportingObjectInfo.Depth">
            <summary>
            Gets the depth of the supporting object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportingObjectInfo.Diameter">
            <summary>
            Gets the diameter of the supporting object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportingObjectInfo.FlangeThickness">
            <summary>
            Gets the flange thickness of the supporting object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportingObjectInfo.FlangeWidth">
            <summary>
            Gets the flange width of the supporting object. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportingObjectInfo.SupportingObjectType">
            <summary>
            Gets the supporting object type.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportingObjectInfo.WebDepth">
            <summary>
            Gets the web depth of the supporting object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportingObjectInfo.WebThickness">
            <summary>
            Gets the web thickness of the supporting object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportingObjectInfo.Width">
            <summary>
            Gets the width of the supporting object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportingObjectInfo.Gap">
            <summary>
            Gets the gap of the supporting object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportingObjectInfo.Radius">
            <summary>
            Gets the radius of the supporting object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportingObjectInfo.FaceNumber">
            <summary>
            Gets the face number of the supporting object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportingObjectInfo.FacePosition">
            <summary>
            Gets the face position of the supporting object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportingObjectInfo.SectionStandard">
            <summary>
            Gets the section standard.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportingObjectInfo.SectionType">
            <summary>
            Gets the section type.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportingObjectInfo.SectionName">
            <summary>
            Gets the section name.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportingObjectInfo.GeometricCenter">
            <summary>
            Gets the geometric center of the supporting object.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.JointHelper">
            <summary>
            JointHelper class definition.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.JointHelper.m_oSupport">
            <summary>
             Used to set support on JointHelper.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Support.Middle.JointHelper.m_oCollOfJoints">
            <summary>
             Contains the collection of assembly joints.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.JointHelper.#ctor(Ingr.SP3D.Support.Middle.Support)">
            <summary>
            SupportHelper constructor that takes a Support object as input.
            </summary>
            <example>Explains how to instantiate JointHelper given a support.
            <code>
            'Define Joint Helper.
            Dim oSupportObj As Support = Nothing 'Initialize with the required support.
            Dim oJointHlpr As New JointHelper(oSupportObj)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.JointHelper.Finalize">
            <summary>
            Destructor for SupportHelper
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.JointHelper.Joints">
            <summary>
            Returns the collection of joints.
            </summary>
            <example>Explains how to call the Joints method.
            <code>
            'Define Joint Helper.
            Dim oJointtHelper As JointHelper = Nothing 'Initialize will proper value.
            'Get collection of Joints. 
            Dim oJointsCollection As ReadOnlyCollection(Of object) = oJointtHelper.Joints 
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.JointHelper.LeftShift(System.Int32,System.Int32)">
            <summary>
            LeftShift
            </summary>
            <param name="iTarget"></param>
            <param name="iNumBits"></param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.JointHelper.CalculateConfigIndexGivenPlaneAndAxis(Ingr.SP3D.Support.Middle.Plane,Ingr.SP3D.Support.Middle.Plane,Ingr.SP3D.Support.Middle.Axis,Ingr.SP3D.Support.Middle.Axis)">
            <summary>
            CalculateConfigIndexGivenPlaneAndAxis
            </summary>
            <param name="Plane1"></param>
            <param name="Plane2"></param>
            <param name="Axis1"></param>
            <param name="Axis2"></param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.JointHelper.CalculateConfigIndexGivenTwoPlaneAndAxis(Ingr.SP3D.Support.Middle.Plane,Ingr.SP3D.Support.Middle.Plane,Ingr.SP3D.Support.Middle.Axis)">
            <summary>
            CalculateConfigIndexGivenTwoPlaneAndAxis
            </summary>
            <param name="Plane1"></param>
            <param name="Plane2"></param>
            <param name="Axis1"></param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.JointHelper.CalculateConfigIndexGivenPlane(Ingr.SP3D.Support.Middle.Plane,Ingr.SP3D.Support.Middle.Plane)">
            <summary>
            CalculateConfigIndexGivenPlane
            </summary>
            <param name="Plane1"></param>
            <param name="Plane2"></param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.JointHelper.CalculateConfigIndexOnePlane(Ingr.SP3D.Support.Middle.Plane)">
            <summary>
            CalculateConfigIndexOnePlane
            </summary>
            <param name="Plane1"></param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.JointHelper.CalculateConfigIndexGivenAxis(Ingr.SP3D.Support.Middle.Axis,Ingr.SP3D.Support.Middle.Axis)">
            <summary>
            CalculateConfigIndexGivenAxis
            </summary>
            <param name="Axis1"></param>
            <param name="Axis2"></param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.JointHelper.CalculateConfigIndexOneAxis(Ingr.SP3D.Support.Middle.Axis)">
            <summary>
            CalculateConfigIndexOneAxis
            </summary>
            <param name="Axis1"></param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.JointHelper.CalculateConfigIndexGivenOneAxis(Ingr.SP3D.Support.Middle.Axis,Ingr.SP3D.Support.Middle.Axis)">
            <summary>
            CalculateConfigIndexGivenAxis
            </summary>
            <param name="Axis1"></param>
            <param name="Axis2"></param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.JointHelper.CreateGlobalAxesAlignedJoint(System.String,System.String,Ingr.SP3D.Support.Middle.Axis,Ingr.SP3D.Support.Middle.Axis)">
            <summary>
            Creates a global axes aligned joint.
            </summary>
            <param name="partKey">Part key of the part.</param>
            <param name="sPortName">Port name.</param>
            <param name="eAxis">The joint is created along this axis.</param>
            <param name="eGlobalAxisToAlignTo">Along the global axis the joint must be created. This is used to determine whether the joint that is created is horizontal X, horizontal Y, vertical.</param>
            <remarks>
            <img src="Graphics/HangersSupports/GlobalAxesAlignedJoint.png"/>
            </remarks>
            <example>Explains how to create a global axes aligned joint.
            <code>
            'Define Joint Helper.
             Public Overrides Sub ConfigureSupport(ByVal oSupCompColl As Collection(Of SupportComponent))
               Dim lRouteIndex As Double
               Dim oSupport As Support
               Dim dPipeDia As Double
               Dim oSupportedInfo As SupportedObjectInfo
               Dim oPipeInfo As PipeObjectInfo        
               Dim RADIUS As Double
               oSupport = SupportHelper.Support
               oSupportedInfo = SupportedHelper.SupportedObjectInfo(1)
               oPipeInfo = oSupportedInfo
               dPipeDia = oPipeInfo.OutsideDiameter
               lRouteIndex = Configuration() 'Gets the current configuration
               oSupport.SetPropertyValue(RADIUS, "IJUAHgrAssyGN", "RADIUS")
               'Create a GlobalAxesAligned Joint.
               JointHelper.CreateGlobalAxesAlignedJoint("VARIABLE_CYL", "StartOther", Axis.X, Axis.X)
             End Sub
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.JointHelper.CreateSphericalJoint(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a spherical joint.
            </summary>
            <param name="partKeyA">Part key of part A.</param>
            <param name="sPortNameA">Port name of part A.</param>
            <param name="partKeyB">Part key of part B.</param>
            <param name="sPortNameB">Port name of part B.</param>
            <example>Explains how to create a spherical joint.
            <code>
            'Define Joint Helper.
             Public Overrides Sub ConfigureSupport(ByVal oSupCompColl As Collection(Of SupportComponent))
               Dim lRouteIndex As Double
               Dim oSupport As Support
               Dim dPipeDia As Double
               Dim oSupportedInfo As SupportedObjectInfo
               Dim oPipeInfo As PipeObjectInfo
               Dim RADIUS As Double
               oSupport = SupportHelper.Support
               oSupportedInfo = SupportedHelper.SupportedObjectInfo(1)
               oPipeInfo = oSupportedInfo
               dPipeDia = oPipeInfo.OutsideDiameter
               lRouteIndex = Configuration() 'Gets the current configuration
               oSupport.SetPropertyValue(RADIUS, "IJUAHgrAssyGN", "RADIUS")
               'Create a Spherical Joint.
               JointHelper.CreateSphericalJoint("VARIABLE_CYL", "Port1", "-1", "Port2")
             End Sub
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.JointHelper.CreateRevoluteJoint(System.String,System.String,System.String,System.String,Ingr.SP3D.Support.Middle.Axis,Ingr.SP3D.Support.Middle.Axis)">
            <summary>
            Creates a revolute joint.
            </summary>
            <param name="partKeyA">Part key of part A.</param>
            <param name="sPortNameA">Port name of part A.</param>
            <param name="partKeyB">Part key of part B.</param>
            <param name="sPortNameB">Port name of part B.</param>
            <param name="eAxisOfPartA">Axis of part A.</param>
            <param name="eAxisOfPartB">Axis of part B.</param>
            <remarks>
            <img src="Graphics/HangersSupports/RevoluteJoint.png"/>
            </remarks>
            <example>Explains how to create a revolute joint.
            <code>
            'Define Joint Helper.
             Public Overrides Sub ConfigureSupport(ByVal oSupCompColl As Collection(Of SupportComponent))
               Dim lRouteIndex As Double
               Dim oSupport As Support
               Dim dPipeDia As Double
               Dim oSupportedInfo As SupportedObjectInfo
               Dim oPipeInfo As PipeObjectInfo        
               Dim RADIUS As Double
               oSupport = SupportHelper.Support
               oSupportedInfo = SupportedHelper.SupportedObjectInfo(1)
               oPipeInfo = oSupportedInfo
               dPipeDia = oPipeInfo.OutsideDiameter
               lRouteIndex = Configuration() 'Gets the current configuration
               oSupport.SetPropertyValue(RADIUS, "IJUAHgrAssyGN", "RADIUS")
               'Create a Revolute Joint.
                JointHelper.CreateRevoluteJoint("VARIABLE_CYL", "StartOther", "-1", "EndOther", Axis.Z, Axis.Z)
             End Sub
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.JointHelper.CreatePlanarJoint(System.String,System.String,System.String,System.String,Ingr.SP3D.Support.Middle.Plane,Ingr.SP3D.Support.Middle.Plane,System.Double)">
            <summary>
            Creates a planar joint.
            </summary>
            <param name="partKeyA">Part key of part A.</param>
            <param name="sPortNameA">Port name of part A.</param>
            <param name="partKeyB">Part key of part B.</param>
            <param name="sPortNameB">Port name of part B.</param>
            <param name="ePlaneOfPartA">Plane of part A.</param>
            <param name="ePlaneOfPartB">Plane of part B.</param>
            <param name="dPlaneOffset">The offset between the plane of part A and plane of part B.</param>
            <remarks>
            <img src="Graphics/HangersSupports/PlanarJoint.png"/>
            </remarks>
            <example>Explains how to create planar joint.
            <code>
            'Define Joint Helper.
             Public Overrides Sub ConfigureSupport(ByVal oSupCompColl As Collection(Of SupportComponent))
               Dim lRouteIndex As Double
               Dim oSupport As Support
               Dim dPipeDia As Double
               Dim oSupportedInfo As SupportedObjectInfo
               Dim oPipeInfo As PipeObjectInfo        
               Dim RADIUS As Double
               oSupport = SupportHelper.Support
               oSupportedInfo = SupportedHelper.SupportedObjectInfo(1)
               oPipeInfo = oSupportedInfo
               dPipeDia = oPipeInfo.OutsideDiameter
               lRouteIndex = Configuration() 'Gets the current configuration.
               oSupport.SetPropertyValue(RADIUS, "IJUAHgrAssyGN", "RADIUS")
               'Create a Planar Joint.
               JointHelper.CreatePlanarJoint("VARIABLE_CYL", "StartOther", "-1", "Route", Plane.XY, Plane.XY, 0)
             End Sub
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.JointHelper.CreateTranslationalJoint(System.String,System.String,System.String,System.String,Ingr.SP3D.Support.Middle.Plane,Ingr.SP3D.Support.Middle.Plane,Ingr.SP3D.Support.Middle.Axis,Ingr.SP3D.Support.Middle.Axis,System.Double)">
            <summary>
            Creates a translational joint.
            </summary>
            <param name="partKeyA">Part key of part A.</param>
            <param name="sPortNameA">Port name of part A.</param>
            <param name="partKeyB">Part key of part B.</param>
            <param name="sPortNameB">Port name of part B.</param>
            <param name="ePlaneOfPartA">Plane of part A.</param>
            <param name="ePlaneOfPartB">Plane of part B.</param>
            <param name="eAxisInPlaneA">The axis in plane A. For example if plane of part A is YZ, then eAxisInPlaneA should be along Y or along Z.</param>
            <param name="eAxisInPlaneB">The axis in plane B. For example if plane of part B is YZ, then eAxisInPlaneB should be along Y or along Z.</param>
            <param name="dPlaneOffset">The offset between the plane of part A and plane of part B.</param>
            <remarks>
            <img src="Graphics/HangersSupports/TranslationalJoint.png"/>
            </remarks>
            <example>Explains how to create translational joint.
            <code>
            'Define Joint Helper.
             Public Overrides Sub ConfigureSupport(ByVal oSupCompColl As Collection(Of SupportComponent))
               Dim lRouteIndex As Double
               Dim oSupport As Support
               Dim dPipeDia As Double
               Dim oSupportedInfo As SupportedObjectInfo
               Dim oPipeInfo As PipeObjectInfo        
               Dim RADIUS As Double
               oSupport = SupportHelper.Support
               oSupportedInfo = SupportedHelper.SupportedObjectInfo(1)
               oPipeInfo = oSupportedInfo
               dPipeDia = oPipeInfo.OutsideDiameter
               lRouteIndex = Configuration() 'Gets the current configuration
               oSupport.SetPropertyValue(RADIUS, "IJUAHgrAssyGN", "RADIUS")
               'Create a Translational Joint
               JointHelper.CreateTranslationalJoint("VARIABLE_CYL", "PortA", "-1", "PortB", Plane.XY, Plane.XY, Axis.X, Axis.X, 0)
             End Sub
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.JointHelper.CreatePrismaticJoint(System.String,System.String,System.String,System.String,Ingr.SP3D.Support.Middle.Plane,Ingr.SP3D.Support.Middle.Plane,Ingr.SP3D.Support.Middle.Axis,Ingr.SP3D.Support.Middle.Axis,System.Double,System.Double)">
            <summary>
            Creates a prismatic joint.
            </summary>
            <param name="partKeyA">Part key of part A.</param>
            <param name="sPortNameA">Port name of part A.</param>
            <param name="partKeyB">Part key of part B.</param>
            <param name="sPortNameB">Port name of part B.</param>
            <param name="ePlaneOfPartA">Plane of part A.</param>
            <param name="ePlaneOfPartB">Plane of part B.</param>
            <param name="eAxisInPlaneA">The axis in plane A. For example if plane of part A is YZ, then eAxisInPlaneA should be along Y or along Z.</param>
            <param name="eAxisInPlaneB">The axis in plane B. For example if plane of part B is YZ, then eAxisInPlaneB should be along Y or along Z.</param>
            <param name="dPlaneOffset">The offset between the plane of part A and plane of part B.</param>
            <param name="dAxisOffset">The offset between axis of part A and axis of part B.</param>
            <remarks>
            <img src="Graphics/HangersSupports/PrismaticJoint.png"/>
            </remarks>
            <example>Explains how to create prismatic joint.
            <code>
            'Define Joint Helper.
             Public Overrides Sub ConfigureSupport(ByVal oSupCompColl As Collection(Of SupportComponent))
               Dim lRouteIndex As Double
               Dim oSupport As Support
               Dim dPipeDia As Double
               Dim oSupportedInfo As SupportedObjectInfo
               Dim oPipeInfo As PipeObjectInfo
               Dim RADIUS As Double
               oSupport = SupportHelper.Support
               oSupportedInfo = SupportedHelper.SupportedObjectInfo(1)
               oPipeInfo = oSupportedInfo
               dPipeDia = oPipeInfo.OutsideDiameter
               lRouteIndex = Configuration() 'Gets the current configuration.
               oSupport.SetPropertyValue(RADIUS, "IJUAHgrAssyGN", "RADIUS")
               'Create a Prismatic Joint.
               JointHelper.CreatePrismaticJoint("VARIABLE_CYL", "StartOther", "-1", "EndOther", Plane.ZX, Plane.ZX, Axis.Z, Axis.Z, 0, 0)
             End Sub
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.JointHelper.CreateRigidJoint(System.String,System.String,System.String,System.String,Ingr.SP3D.Support.Middle.Plane,Ingr.SP3D.Support.Middle.Plane,Ingr.SP3D.Support.Middle.Axis,Ingr.SP3D.Support.Middle.Axis,System.Double,System.Double,System.Double)">
            <summary>
            Creates a rigid joint.
            </summary>
            <param name="partKeyA">Part key of part A.</param>
            <param name="sPortNameA">Port name of part A.</param>
            <param name="partKeyB">Part key of part B.</param>
            <param name="sPortNameB">Port name of part B.</param>
            <param name="ePlaneOfPartA">Plane of part A.</param>
            <param name="ePlaneOfPartB">Plane of part B.</param>
            <param name="eAxisInPlaneA">The axis in plane A. For example if plane of part A is YZ, then eAxisInPlaneA should be along Y or along Z.</param>
            <param name="eAxisInPlaneB">The axis in plane B. For example if plane of part B is YZ, then eAxisInPlaneB should be along Y or along Z.</param>
            <param name="dPlaneOffset">The offset between the plane of Part A and Plane of part B.</param>
            <param name="dAxisOffset">The offset between axis of part A and axis of part B.</param>
            <param name="dOriginOffset">The offset between part A’s port origin and part B’s port origin.</param>
            <remarks>
            <img src="Graphics/HangersSupports/RigidJoint.png"/>
            </remarks>
            <example>Explains how to create rigid joint.
            <code>
            'Define Joint Helper.
             Public Overrides Sub ConfigureSupport(ByVal oSupCompColl As Collection(Of SupportComponent))
               Dim lRouteIndex As Double
               Dim oSupport As Support
               Dim dPipeDia As Double
               Dim oSupportedInfo As SupportedObjectInfo
               Dim oPipeInfo As PipeObjectInfo        
               Dim RADIUS As Double
               oSupport = SupportHelper.Support
               oSupportedInfo = SupportedHelper.SupportedObjectInfo(1)
               oPipeInfo = oSupportedInfo
               dPipeDia = oPipeInfo.OutsideDiameter
               lRouteIndex = Configuration() 'Gets the current configuration.
               oSupport.SetPropertyValue(RADIUS, "IJUAHgrAssyGN", "RADIUS")
               'Create a Rigid Joint.
               JointHelper.CreateRigidJoint("VARIABLE_CYL", "StartOther", "-1", "Route", Plane.XY, Plane.XY, Axis.X, Axis.X, dPipeDia / 2, 0, 0)
             End Sub
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.JointHelper.CreateAngularRigidJoint(System.String,System.String,System.String,System.String,Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Creates an angular rigid joint.
            </summary>
            <param name="partKeyToBeRotated">Part key of part A that must be rotated.</param>
            <param name="sPortNameToBeRotated">Port name of part A that must be rotated.</param>
            <param name="partKey_Fixed">Part key of part B that is fixed.</param>
            <param name="sPortName_Fixed">Port name of part B that is fixed.</param>
            <param name="XYZOffset">The offset in x,y,z between part A’s port and part B’s port.</param>
            <param name="XYZRotate">The rotational angles in x,y,z between part A’s port and part B’s port.</param>
            <example>Explains how to create an Angular Rigid joint.
            <code>
            'Define Joint Helper.
             Public Overrides Sub ConfigureSupport(ByVal oSupCompColl As Collection(Of SupportComponent))
               Dim lRouteIndex As Double
               Dim oSupport As Support
               Dim dPipeDia As Double
               Dim oSupportedInfo As SupportedObjectInfo
               Dim oPipeInfo As PipeObjectInfo        
               Dim RADIUS As Double
               oSupport = SupportHelper.Support
               oSupportedInfo = SupportedHelper.SupportedObjectInfo(1)
               oPipeInfo = oSupportedInfo
               dPipeDia = oPipeInfo.OutsideDiameter
               lRouteIndex = Configuration() 'Gets the current configuration.
               oSupport.SetPropertyValue(RADIUS, "IJUAHgrAssyGN", "RADIUS")
               Dim oOffSetVec As New Vector(0, 0, 0) 'Initialize with required offset values.
               Dim oRotationAngleVec As New Vector(0, 0, 0) 'Initialize with required rotational angle values along x, y, z.
               'Create a CreateAngularRigidJoint Joint.
               JointHelper.CreateAngularRigidJoint("VARIABLE_CYL", "StartOther", "-1", "Route", oOffSetVec, oRotationAngleVec)
             End Sub
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.JointHelper.CreateCylindricalJoint(System.String,System.String,System.String,System.String,Ingr.SP3D.Support.Middle.Axis,Ingr.SP3D.Support.Middle.Axis,System.Double)">
            <summary>
            Creates a cylindrical joint.
            </summary>
            <param name="partKeyA">Part key of part A.</param>
            <param name="sPortNameA">Port name of part A.</param>
            <param name="partKeyB">Part key of part B.</param>
            <param name="sPortNameB">Port name of part B.</param>
            <param name="eAxisOfPartA">Axis of part A.</param>
            <param name="eAxisOfPartB">Axis of part B.</param>
            <param name="dAxisOffset">The offset between the axis of part A and axis of part B.</param>
            <remarks>
            <img src="Graphics/HangersSupports/CylindricalJoint.png"/>
            </remarks>
            <example>Explains how to create a Cylindrical joint.
            <code>
            'Define joint helper.
             Public Overrides Sub ConfigureSupport(ByVal oSupCompColl As Collection(Of SupportComponent))
               Dim lRouteIndex As Double
               Dim oSupport As Support
               Dim dPipeDia As Double
               Dim oSupportedInfo As SupportedObjectInfo
               Dim oPipeInfo As PipeObjectInfo      
               Dim RADIUS As Double
               oSupport = SupportHelper.Support
               oSupportedInfo = SupportedHelper.SupportedObjectInfo(1)
               oPipeInfo = oSupportedInfo
               dPipeDia = oPipeInfo.OutsideDiameter
               lRouteIndex = Configuration() 'Gets the current configuration.
               oSupport.SetPropertyValue(RADIUS, "IJUAHgrAssyGN", "RADIUS")
               'Create a cylindrical joint.
               JointHelper.CreateCylindricalJoint("VARIABLE_CYL", "StartOther", "-1", "Route", Axis.X, Axis.X, 0)
             End Sub
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.JointHelper.CreatePlanarSlotJoint(System.String,System.String,System.String,System.String,Ingr.SP3D.Support.Middle.Plane,Ingr.SP3D.Support.Middle.Plane,Ingr.SP3D.Support.Middle.Axis,System.Double,System.Double)">
            <summary>
            Creates a planar slot joint.
            </summary>
            <param name="partKeyA">Part key of part A.</param>
            <param name="sPortNameA">Port name of part A.</param>
            <param name="partKeyB">Part key of part B.</param>
            <param name="sPortNameB">Port name of part B.</param>
            <param name="ePlaneOfPartA">Plane of part A.</param>
            <param name="ePlaneOfPartB">Plane of part B.</param>
            <param name="eAxisInPlaneA">The axis in plane A. For example if plane of part A is YZ, then eAxisInPlaneA needs to be along Y or along Z.</param>
            <param name="dPlaneOffset">The offset between the plane of part A and plane of part B.</param>
            <param name="dAxisOffset">The offset between axis of part A and axis of Part B.</param>
            <remarks>
            <img src="Graphics/HangersSupports/PlanarSlotJoint.png"/>
            </remarks>
            <example>Explains how to create Planar Slot joint.
            <code>
            'Define Joint Helper.
             Public Overrides Sub ConfigureSupport(ByVal oSupCompColl As Collection(Of SupportComponent))
               Dim lRouteIndex As Double
               Dim oSupport As Support
               Dim dPipeDia As Double
               Dim oSupportedInfo As SupportedObjectInfo
               Dim oPipeInfo As PipeObjectInfo        
               Dim RADIUS As Double
               oSupport = SupportHelper.Support
               oSupportedInfo = SupportedHelper.SupportedObjectInfo(1)
               oPipeInfo = oSupportedInfo
               dPipeDia = oPipeInfo.OutsideDiameter
               lRouteIndex = Configuration() 'Gets the current configuration.
               oSupport.SetPropertyValue(RADIUS, "IJUAHgrAssyGN", "RADIUS")
               'Create a PlanarSlot Joint.
               JointHelper.CreatePlanarSlotJoint("VARIABLE_CYL", "StartOther", "-1" , "Route", Plane.XY, Plane.XY, Axis.X, 0, 0)
             End Sub
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.JointHelper.CreatePointOnPlaneJoint(System.String,System.String,System.String,System.String,Ingr.SP3D.Support.Middle.Plane)">
            <summary>
            Creates a point on plane joint.
            </summary>
            <param name="partKeyA">Part key of part A.</param>
            <param name="sPortNameA">Port name of part A.</param>
            <param name="partKeyB">Part key of part B.</param>
            <param name="sPortNameB">Port name of part B.</param>
            <param name="ePlaneOfPartA">Plane of part A.</param>
            <example>Explains how to create a point on a plane joint.
            <code>
            'Define Joint Helper.
             Public Overrides Sub ConfigureSupport(ByVal oSupCompColl As Collection(Of SupportComponent))
               Dim lRouteIndex As Double
               Dim oSupport As Support
               Dim dPipeDia As Double
               Dim oSupportedInfo As SupportedObjectInfo
               Dim oPipeInfo As PipeObjectInfo        
               Dim RADIUS As Double
               oSupport = SupportHelper.Support
               oSupportedInfo = SupportedHelper.SupportedObjectInfo(1)
               oPipeInfo = oSupportedInfo
               dPipeDia = oPipeInfo.OutsideDiameter
               lRouteIndex = Configuration() 'Gets the current configuration.
               oSupport.SetPropertyValue(RADIUS, "IJUAHgrAssyGN", "RADIUS")
               'Create a Point on Plane Joint
               JointHelper.CreatePointOnPlaneJoint("VARIABLE_CYL", "EndOther", "-1", "Structure", Plane.XY)
             End Sub
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.JointHelper.CreatePointOnAxisJoint(System.String,System.String,System.String,System.String,Ingr.SP3D.Support.Middle.Axis)">
            <summary>
            Creates a point on axis joint.
            </summary>
            <param name="partKeyA">Part key of part A.</param>
            <param name="sPortNameA">Port name of part A.</param>
            <param name="partKeyB">Part key of part B.</param>
            <param name="sPortNameB">Port name of part B.</param>
            <param name="eAxisOfPartA">The axis of part A.</param>
            <example>Explains how to create a point on an axis joint.
            <code>
            'Define Joint Helper.
             Public Overrides Sub ConfigureSupport(ByVal oSupCompColl As Collection(Of SupportComponent))
               Dim lRouteIndex As Double
               Dim oSupport As Support
               Dim dPipeDia As Double
               Dim oSupportedInfo As SupportedObjectInfo
               Dim oPipeInfo As PipeObjectInfo
               Const VARIABLE_CYL = 1
               Dim RADIUS As Double
               oSupport = SupportHelper.Support
               oSupportedInfo = SupportedHelper.SupportedObjectInfo(1)
               oPipeInfo = oSupportedInfo
               dPipeDia = oPipeInfo.OutsideDiameter
               lRouteIndex = Configuration() 'Gets the current configuration.
               oSupport.SetPropertyValue(RADIUS, "IJUAHgrAssyGN", "RADIUS")
               'Create a Point on Axis Joint.
               JointHelper.CreatePointOnAxisJoint("VARIABLE_CYL", "EndOther", "-1", "Structure", Axis.X)
             End Sub
            </code>
            </example>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.ICustomHgrWeightCG">
            <summary>
            ICustomHgrWeightCG interface description that
            can be implemented by .NET-based SupportPart symbols to calculate their own weight/COG.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.ICustomHgrWeightCG.WeightCG(Ingr.SP3D.Support.Middle.SupportComponent,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
             Implements the WeightCG method for the SupportComponent. It calculates and sets the weight/COG-based on SupportComponent dimensions and properties.
            </summary>
            <param name="supportComponent">SupportComponent object.</param>
            <param name="weight">Weight value.</param>
             <param name="cogX">COG X-value.</param>
              <param name="cogY">COG Y-value.</param>
               <param name="cogZ">COG Z-value.</param>
            <returns>SupportComponent object.</returns>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.IHgrRule">
            <summary>
            ISupportAttributeRule interface description.
            Implement this interface to get Value for Rule defined in the hanger rules.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.IHgrRule.AttributeValue(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
             Implements the AttributeValue method to give the array of values for a rule defined in hanger rules.
            </summary>
            <param name="oBO">Input object.</param>
            <returns>Array of Objects.</returns> 
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.HgrConnection">
            <summary>
            HgrConnection class implementation.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.HgrConnection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.HgrConnection.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructs a hanger connection from the database.
            </summary>
            <param name="oPrivateBusinessObject">PrivateBusinessObject</param>
            <example>How to create a HgrConnection from an existing Business Object.
            <code>
            'Get the existing Business Object.
            Dim oPrivateBO As PrivateBusinessObject = Nothing
            'Create the HgrConnection.
            Dim oHgrConnection = New HgrConnection(oPrivateBO)
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.HgrConnection.SystemParent">
            <summary>
            Gets or sets the system parent associated to the component.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.DesignSupport">
            <summary>
            Used to create the design support and allow for modification.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.DesignSupport.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor for .NET to access this DesignSupport class.
            </summary>
            <param name="oPB">Private Business object</param>
            <example>How to create a DesignSupport from an existing Business Object.
            <code>
            'Get the existing Business Object.
            Dim oPrivateBO As PrivateBusinessObject = Nothing
            'Create the Design Support.
            Dim oDesignSupport = New DesignSupport(oPrivateBO)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.DesignSupport.#ctor(Ingr.SP3D.Common.Middle.ISystem,System.Collections.ObjectModel.Collection{Ingr.SP3D.Route.Middle.RouteFeature},System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.BusinessObject})">
            <summary>
            Design support constructor used to create the new design support by giving the inputs.
            </summary>
            <param name="oParentSys">Parent system.</param>
            <param name="oSupportedColl">Supported collection.</param>
            <param name="oSupportingColl">Supporting collection.</param>
            <exception cref="T:System.ArgumentNullException">One or more arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid arguments.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.SupportInvalidParentException">Parent is not ISystem.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.SupportInvalidArgumentException">Supported objects collection has invalid objects.</exception>
            <example>How to create a new DesignSupport by specifying the Parent System, Supported Objects, and Supporting Objects.
            <code>
            'Get the Parent System.
            Dim oParentSys As ISystem = Nothing
            'Get the Collection of Supported Route Features.
            Dim oSupportedColl As Collection(Of RouteFeature) = Nothing
            'Get the Collection of Supporting Objects.
            Dim oSupportingColl As Collection(Of BusinessObject) = Nothing
            'Create the Design Support.
            Dim oDesignSupport = New DesignSupport(oParentSys, oSupportedColl, oSupportingColl)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.DesignSupport.#ctor(Ingr.SP3D.Common.Middle.ISystem,System.Collections.ObjectModel.Collection{Ingr.SP3D.Route.Middle.RouteFeature},System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.BusinessObject},Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Design support constructor used to create the new design support by giving the inputs.
            </summary>
            <param name="oParentSys">Parent system.</param>
            <param name="oSupportedColl">Supported collection.</param>
            <param name="oSupportingColl">Supporting collection.</param>
            <param name="oPosition">Support position</param>
            <exception cref="T:System.ArgumentNullException">One or more arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid arguments.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.SupportInvalidParentException">Parent is not ISystem.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.SupportInvalidArgumentException">Supported objects collection has invalid objects.</exception>
            <example>How to create a new DesignSupport by specifying the Parent System, Supported Objects, Supporting Objects, along with the position of the support.
            <code>
            'Get the Parent System.
            Dim oParentSys As ISystem = Nothing
            'Get the Collection of Supported Route Features.
            Dim oSupportedColl As Collection(Of RouteFeature) = Nothing
            'Get the Collection of Supporting Objects.
            Dim oSupportingColl As Collection(Of BusinessObject) = Nothing
            'Define the position of the support.
            Dim oPosition As New Position(0, 0, 0)  'Example uses (0,0,0)
            'Create the Design Support.
            Dim oDesignSupport = New DesignSupport(oParentSys, oSupportedColl, oSupportingColl, oPosition)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.DesignSupport.#ctor(Ingr.SP3D.Support.Middle.Support,Ingr.SP3D.Common.Middle.ISystem)">
            <summary>
            Design support constructor takes the standard support and system parent as inputs. 
            <para>Adds all the components of this standard support to design support and this standard support is deleted.</para>
            </summary>
            <param name="oSupport">Standard support.</param>
            <param name="oParentSys">Parent system.</param>
            <exception cref="T:System.ArgumentNullException">One or more arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid arguments.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.SupportInvalidParentException">Parent is not ISystem.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Given support is not in the working status.</exception>
            <example>How to create a new DesignSupport by specifying the Parent System and an existing Standard Support.
            <code>
            'Get the Parent System.
            Dim oParentSys As ISystem = Nothing
            'Get the existing Standard Support.
            Dim oSupport As Support = Nothing
            'Create the Design Support.
            Dim oDesignSupport = New DesignSupport(oSupport, oParentSys)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.DesignSupport.#ctor(Ingr.SP3D.Support.Middle.Support,Ingr.SP3D.ReferenceData.Middle.Part,Ingr.SP3D.Common.Middle.ISystem,Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Design support constructor for creating the design support which takes the standard support
            and adds both standard support and the given part to the design support. It is created under the given system parent.
            </summary>
            <param name="oSupport">Standard support.</param>
            <param name="oPart">Part object.</param>
            <param name="oParentSys">Parent system.</param>
            <param name="oPostion">Position object.</param>
            <exception cref="T:System.ArgumentNullException">One or more arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid arguments.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.SupportInvalidParentException">Parent is not ISystem.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Given support is not in the working status.</exception>
            <example>How to create a new DesignSupport by specifying the Parent System and an existing Standard Support, along with an additional Part to be added to the Design Support.
            <code>
            'Get the Parent System.
            Dim oParentSys As ISystem = Nothing
            'Get the existing Standard Support.
            Dim oSupport As Support = Nothing
            'Get the Part.
            Dim oPart As Part = Nothing
            'Define the Position.
            Dim oPosition As Position = oSupport.SupportPosition()  'In this example we get it from the existing Support.
            'Create the Design Support.
            Dim oDesignSupport = New DesignSupport(oSupport, oPart, oParentSys, oPosition)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.DesignSupport.AddSupportComponent(Ingr.SP3D.ReferenceData.Middle.Part,Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Adds the given part to the design support at the given location.
            </summary>
            <param name="oPart">Part name.</param>
            <param name="oPosition">Position object.</param>
            <returns>Returns the support component.</returns>
            <exception cref="T:System.ArgumentNullException">One or more arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.HangerPartException">Hanger part is invalid.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.AddPartException">Failed to add the part to the design support.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Support is not in working status.</exception>
            <example>
            This example shows how to add a hanger component to design support at the given location.
            <code>
            'Create the design support.
            Dim oDesignSup As DesignSupport = Nothing
            'Create the hanger component.
            Dim oPart As Part = Nothing
            'Set the position, where the hanger part needs to placed in the given design support.
            Dim oPosition As Position = Nothing
            'Declare support component object.
            Dim oSupComp As SupportComponent = Nothing
            'Using AddSupportComponent(), to add the hanger part to the design support at the given location.
            oSupComp = oDesignSup.AddSupportComponent(oPart, oPosition)
            </code>
            </example>        
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.DesignSupport.AddSupportComponent(Ingr.SP3D.ReferenceData.Middle.Part,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Adds the given part to design support.
            </summary>
            <param name="oPart">Part object.</param>
            <param name="ofromPosition">From position to add the support.</param>
            <param name="otoPosition">To position to add the support.</param>
            <returns>Returns the support component.</returns>
            <exception cref="T:System.ArgumentNullException">One or more arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.HangerPartException">Hanger part is invalid.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.AddPartException">Failed to add the part to the design support.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Support is not in working status.</exception>
            <example>This example shows how to add the part to the design support using from and to Positions.
            <code>
            'Create the design support.
            Dim oDesignSup As DesignSupport = Nothing
            'Create the hanger component, which is the stretchable part.
            Dim oPart As Part = Nothing
            'Define the from position and to position.
            Dim ofromPosition As Position = Nothing
            Dim otoPosition As Position = Nothing
            'Declare support component object.
            Dim oSupComp As SupportComponent = Nothing
            'Using AddSupportComponent(), to add the hanger part to the design support using from and to position.
            oSupComp = oDesignSup.AddSupportComponent(oPart, ofromPosition, otoPosition)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.DesignSupport.AddSupportComponent(System.String,Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Adds the part of the given part class to the design support.
            </summary>
            <param name="sPartClass">Part class name.</param>
            <param name="oPosition">Position object.</param>
            <returns>Returns the support component.</returns>
            <exception cref="T:System.ArgumentNullException">One or more arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.HangerPartException">Hanger part is invalid.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.AddPartException">Failed to add part to the design support.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.PartFromPartClassException">Failed to get the part from part class.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Support is not in working status.</exception>
            <example>This example shows how to add the part class of the hanger part to the design support.
            <code>
            'Create the design support.
            Dim oDesignSup As DesignSupport = Nothing
            'Define the part class name of the hanger part.
            Dim sPartClass As String = Nothing
            'Set the position, where the hanger part needs to be placed in the given design support.
            Dim oPosition As Position = Nothing
            'Declare support component object.
            Dim oSupComp As SupportComponent = Nothing
            'Using AddSupportComponent(), to add the part class of hanger part to the design support at the given location.
            oSupComp = oDesignSup.AddSupportComponent(sPartClass, oPosition)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.DesignSupport.AddSupportComponent(System.String,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Adds the part of the given part class to the design support using from and to position.
            </summary>
            <param name="sPartClass">Part class name.</param>
            <param name="ofromPosition">From position to add the part.</param>
            <param name="otoPosition">To position to add the part.</param>
            <returns>Returns the support component.</returns>
            <exception cref="T:System.ArgumentNullException">One or more arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.HangerPartException">Hanger part is invalid.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.AddPartException">Failed to add part to the design support.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.PartFromPartClassException">Failed to get the part from part class.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Support is not in working status.</exception>
            <example>This example shows how to add the part class of the hanger part to the design support.
            <code>
            'Create the design support.
            Dim oDesignSup As DesignSupport = Nothing
            'Define the PartClass name of the hanger part.
            Dim sPartClass As String = Nothing
            'Define the from position and to position.
            Dim ofromPosition As Position = Nothing
            Dim otoPosition As Position = Nothing
            'Declare support component object.
            Dim oSupComp As SupportComponent = Nothing
            'Using AddSupportComponent(), to add the part class of hanger part to the design support using from and to position.
            oSupComp = oDesignSup.AddSupportComponent(sPartClass, ofromPosition, otoPosition)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.DesignSupport.AddSupportComponent(Ingr.SP3D.ReferenceData.Middle.Part,Ingr.SP3D.Support.Middle.SupportComponent,System.String)">
            <summary>
            Adds the given part to the design support using port of the existing support component.
            </summary>
            <param name="oPart">Part object.</param>
            <param name="oExistingSupComp">Support component.</param>
            <param name="sPortName">Port name.</param>
            <returns>Returns the support component.</returns>
            <exception cref="T:System.ArgumentNullException">One or more arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.HangerPartException">Hanger part is invalid.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.AddPartException">Failed to add part to the design support.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.HangerPortFromSupCompException">Failed to get the port from the support component.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Support is not in working status.</exception>
            <example>This example shows how to add the hanger part to the design support at given port location of existing support component.
            <code>
            'Create the design support.
            Dim oDesignSup As DesignSupport = Nothing
            'Define hanger part.
            Dim oPart As Part = Nothing
            'Define existing support component and port name of existing support component.
            Dim oExistingSupComp As SupportComponent = Nothing
            Dim sPortName As String = Nothing
            'Declare support component object.
            Dim oSupComp As SupportComponent = Nothing
            'Using AddSupportComponent(), to add the hanger part to the design support at given port location of existing support component.
            oSupComp = oDesignSup.AddSupportComponent(oPart, oExistingSupComp, sPortName)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.DesignSupport.AddSupportComponent(Ingr.SP3D.ReferenceData.Middle.Part,Ingr.SP3D.Support.Middle.SupportComponent,System.String,Ingr.SP3D.Support.Middle.SupportComponent,System.String)">
            <summary>
            Adds the given part to the design support using ports of the existing support components.
            </summary>
            <param name="oPart">Part object.</param>
            <param name="oExistingSupComp1">Support component.</param>
            <param name="sPortName1">Port name.</param>
            <param name="oExistingSupComp2">Support component.</param>
            <param name="sPortName2">Port name.</param>
            <returns>Returns the support component.</returns>
            <exception cref="T:System.ArgumentNullException">One or more arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.HangerPartException">Hanger part is invalid.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.AddPartException">Failed to add part to the design support.</exception>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.HangerPortFromSupCompException">Failed to get the port from the support component.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Support is not in working status.</exception>
            <example>This example shows how to add the hanger part to the design support using the port lcoations of existing support components.
            <code>
            'Create the design support.
            Dim oDesignSup As DesignSupport = Nothing
            'Define hanger part
            Dim oPart As Part = Nothing
            'Define existing support component 1 and port name of existing support component 1.
            Dim oExistingSupComp1 As SupportComponent = Nothing
            Dim sPortName1 As String = Nothing
            'Define existing support component 2 and port name of existing support component 2.
            Dim oExistingSupComp2 As SupportComponent = Nothing
            Dim sPortName2 As String = Nothing
            'Declare support component object.
            Dim oSupComp As SupportComponent = Nothing
            'Using AddSupportComponent(), to add the hanger part to the design support using the port lcoations of existing support components.
            oSupComp = oDesignSup.AddSupportComponent(oPart, oExistingSupComp1, sPortName1, oExistingSupComp2, sPortName2)
            </code>
            </example>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.ConnectionComponent">
            <summary>
            ConnectionComponent class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.ConnectionComponent.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.ConnectionComponent.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructs a ConnectionComponent from the database.
            </summary>
            <param name="oPrivateBusinessObject">PrivateBusinessObject</param>
            <example>How to create a ConnectionComponent from an existing Business Object.
            <code>
            'Get the existing Business Object.
            Dim oPrivateBO As PrivateBusinessObject = Nothing
            'Create the Connection Component.
            Dim oConnectionComponent = New ConnectionComponent(oPrivateBO)
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.ConnectionComponent.CrossSection">
            <summary>
            Gets the cross section on the connection component.
            <example>
            <code>
            CrossSection crossSection = ConnectionComponentObj.CrossSection;
            </code>
            </example>
            <exception cref="T:Ingr.SP3D.Support.Exceptions.ConnectionComponentNotRelatedToCrossSectionException">Connection component is not related to a cross section.</exception>
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Support.Middle.SupportPort">
            <summary>
            Used to create the SupportPort object and allow modification.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Support.Middle.SupportPort.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private business object constructor.
            </summary>
            <param name="oPB">Private business object.</param>
            <example>How to create a SupportPort from an existing Business Object.
            <code>
            'Get the existing Business Object.
            Dim oPrivateBO As PrivateBusinessObject = Nothing
            'Create the SupportPort.
            Dim oSupportPort = New SupportPort(oPrivateBO)
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportPort.Connectable">
            <summary>
            Gets the connectable from the SupportPort.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportPort.Connections">
            <summary>
            Gets the connections connected to the SupportPort.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Support.Middle.SupportPort.PortType">
            <summary>
            Gets the port type.
            </summary>
            <remarks>
            <list type="table">
               <listheader>
                   <term>PortType</term>
                   <description>Description</description>
               </listheader>
               <item>
                   <term>All = 1</term>
                   <description>All port type.</description>
               </item>    
               <item>
                   <term>Piping = 2</term>
                   <description>Piping port type.</description>
               </item>
               <item>
                   <term>Duct = 3</term>
                   <description>Duct port type.</description>
               </item>
               <item>
                   <term>Cable = 4</term>
                   <description>Cable port type.</description>
               </item>
               <item>
                   <term>Foundation = 5</term>
                   <description>Foundation port type.</description>
               </item>
               <item>
                   <term>Cabletray = 6</term>
                   <description>Cabletray port type.</description>
               </item>
               <item>
                   <term>Conduit = 7</term>
                   <description>Conduit port type.</description>
               </item>
               <item>
                   <term>Edge = 8</term>
                   <description>Edge port type.</description>
               </item>
               <item>
                   <term>Face = 9</term>
                   <description>Face port type.</description>
               </item>
               <item>
                   <term>End = 10</term>
                   <description>End port type.</description>
               </item>
               <item>
                   <term>Centerline = 11</term>
                   <description>Centerline port type.</description>
               </item>
            </list>
            </remarks>
        </member>
    </members>
</doc>
